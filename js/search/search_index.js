var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AddSubscription.html",[0,0.909,1,2.654]],["body/interfaces/AddSubscription.html",[1,3.553,2,1.093,3,0.638,4,0.475,5,3.918,6,1.351,7,3.918,8,3.387,9,2.629,10,4.406,11,3.019,12,4.406,13,5.148,14,5.309,15,5.148,16,3.004,17,2.323,18,1.958,19,0.596,20,0.877,21,5.148,22,4.594,23,2.629,24,5.148,25,1.216,26,0.019,27,1.093,28,0.436,29,1.035,30,0.823,31,1.351,32,0.017,33,0.017]],["title/interfaces/BackendInput.html",[0,0.909,34,2.436]],["body/interfaces/BackendInput.html",[2,1.013,3,0.592,4,0.44,6,1.252,19,0.552,26,0.019,28,0.546,29,1.353,32,0.016,33,0.016,34,3.023,35,2.605,36,3.293,37,2.287,38,4.771,39,3.631,40,2.605,41,4.084,42,2.167,43,2.865,44,1.726,45,5.511,46,4.506,47,2.287,48,1.917,49,4.084,50,2.839,51,2.287,52,2.252,53,3.751,54,4.771,55,4.771,56,3.293,57,1.629,58,3.631,59,4.771,60,4.771,61,4.771,62,4.084,63,4.771,64,1.069,65,4.084,66,4.084]],["title/classes/Connection.html",[67,1.385,68,1.313]],["body/classes/Connection.html",[3,0.429,4,0.319,16,2.161,19,0.4,20,0.677,22,3.306,25,1.654,26,0.02,27,1.471,28,0.607,29,1.393,30,1.119,31,1.693,32,0.013,33,0.013,43,2.526,68,1.18,69,1.245,70,2.027,71,2.027,72,2.447,73,3.645,74,3.645,75,4.1,76,4.184,77,1.822,78,4.79,79,3.645,80,4.1,81,2.635,82,3.645,83,4.1,84,1.471,85,3.456,86,3.794,87,2.809,88,3.035,89,4.79,90,2.809,91,4.79,92,4.086,93,3.306,94,2.63,95,2.63,96,3.456,97,2.027,98,2.958,99,2.63,100,1.471,101,3.456,102,3.738,103,2.616,104,3.456,105,2.809,106,3.456,107,2.958,108,1.007,109,2.958,110,2.958,111,2.958,112,1.765,113,3.456,114,2.958,115,2.038,116,2.447,117,2.958,118,2.958]],["title/interfaces/ConnectionBase.html",[0,0.909,119,2.1]],["body/interfaces/ConnectionBase.html",[2,0.701,3,0.409,4,0.304,6,0.867,8,2.534,9,1.687,14,2.826,16,2.094,17,1.49,18,1.256,19,0.382,20,0.758,22,3.202,23,1.687,25,1.267,26,0.02,27,0.985,28,0.493,29,0.932,30,0.858,31,1.408,32,0.013,33,0.013,48,1.884,52,1.765,64,0.74,68,1.831,77,1.765,81,2.79,94,2.513,95,2.513,100,1.883,108,1.352,109,2.826,112,1.687,119,1.803,120,2.092,121,2.092,122,3.302,123,2.092,124,1.069,125,3.302,126,1.803,127,2.826,128,3.302,129,1.328,130,2.826,131,3.302,132,1.49,133,2.534,134,2.826,135,3.146,136,2.534,137,2.092,138,2.513,139,3.302,140,2.092,141,3.302,142,2.826,143,2.092,144,3.202,145,3.302,146,1.583,147,1.975,148,3.302,149,1.49,150,2.826,151,4.64,152,3.302,153,3.302,154,3.302,155,2.721,156,2.826,157,1.936,158,2.826,159,1.936,160,3.302,161,3.302,162,1.583,163,2.826,164,2.513,165,3.302,166,3.302,167,0.78,168,1.328,169,2.094,170,2.826,171,1.936,172,3.302,173,2.826,174,2.476,175,2.826,176,3.302,177,2.513,178,2.092,179,2.826,180,3.302,181,2.279,182,3.302,183,3.302,184,2.513,185,1.803,186,2.279,187,3.302,188,3.302,189,1.405,190,2.279,191,1.687,192,2.513,193,3.302,194,2.094,195,2.513,196,2.092,197,3.302,198,1.936,199,3.302,200,2.826,201,3.302,202,1.189,203,2.826,204,3.302,205,3.531,206,3.302,207,1.49,208,2.092,209,3.302,210,1.583,211,1.189,212,1.936,213,2.826,214,2.279,215,2.826,216,1.687,217,3.302,218,1.687,219,3.302,220,1.687,221,2.826,222,3.302,223,2.513,224,2.279,225,1.936,226,1.803,227,3.302,228,3.302]],["title/interfaces/Connector.html",[0,0.909,97,2.255]],["body/interfaces/Connector.html",[2,1.086,3,0.634,4,0.472,19,0.592,20,0.874,25,1.209,26,0.02,27,1.086,28,0.524,29,1.028,30,0.988,31,1.622,32,0.017,33,0.017,44,1.801,97,3,98,5.289,211,2.225,229,3.531,230,4.206,231,3.915,232,4.582,233,3.893,234,3.624,235,3.531]],["title/modules/DndModule.html",[40,2.1,236,2.436]],["body/modules/DndModule.html",[3,0.668,4,0.497,20,0.761,25,1.272,26,0.019,27,1.143,28,0.457,29,1.082,30,0.861,32,0.017,33,0.017,34,4.3,35,2.941,36,3.717,40,2.941,237,3.717,238,4.099,239,5.809,240,4.61,241,4.61,242,5.386,243,5.386]],["title/injectables/DndService.html",[129,1.546,244,2.654]],["body/injectables/DndService.html",[1,4.26,3,0.375,4,0.278,5,2.299,6,1.143,7,2.299,8,2.789,9,3.44,17,1.965,19,0.35,20,0.616,23,1.543,25,1.458,26,0.02,27,1.084,28,0.59,29,1.026,30,0.816,32,0.012,33,0.012,48,0.978,51,1.448,64,0.677,68,1.487,81,1.448,92,2.759,115,1.853,116,2.224,124,0.978,129,1.214,132,1.965,135,1.771,140,1.914,144,3.006,146,2.088,147,2.521,149,1.363,167,1.321,189,2.173,202,1.568,205,3.314,207,1.363,211,2.223,216,2.224,218,2.224,225,1.771,226,1.649,245,3.021,246,1.914,247,1.487,248,2.585,249,2.085,250,3.021,251,2.585,252,3.021,253,3.021,254,2.585,255,2.085,256,1.448,257,3.021,258,3.314,259,3.021,260,2.609,261,3.021,262,1.448,263,3.021,264,2.378,265,1.363,266,1.771,267,3.021,268,1.285,269,2.299,270,3.021,271,2.299,272,1.914,273,1.143,274,2.585,275,3.021,276,3.021,277,1.914,278,3.021,279,3.021,280,3.021,281,4.698,282,3.052,283,2.172,284,2.379,285,3.021,286,2.68,287,3.006,288,1.656,289,3.886,290,2.585,291,2.053,292,2.759,293,1.085,294,1.771,295,1.914,296,1.751,297,3.021,298,1.649,299,3.021,300,2.585,301,2.585,302,1.543,303,3.314,304,2.299,305,2.585,306,2.585,307,3.021,308,3.021,309,2.085,310,3.021,311,1.649,312,3.021,313,2.085,314,1.338,315,1.285,316,3.021,317,2.554,318,4.355,319,3.006,320,2.088,321,3.727,322,3.314,323,3.021,324,3.021,325,3.021,326,1.649]],["title/interfaces/DragLayer.html",[0,0.909,282,2.1]],["body/interfaces/DragLayer.html",[2,0.604,3,0.353,4,0.262,6,0.747,18,1.083,19,0.329,20,0.59,25,0.985,26,0.019,27,0.604,28,0.53,29,0.572,30,0.455,31,0.747,32,0.011,33,0.011,37,1.365,42,1.777,48,1.598,51,1.365,56,1.965,57,1.685,64,1.218,77,2.201,81,1.365,100,1.281,102,1.554,108,1.216,112,1.454,119,2.278,120,1.803,121,1.803,133,1.554,163,2.436,164,2.166,167,1.708,168,2.431,169,2.227,171,1.669,174,2.101,177,2.166,178,2.643,191,1.454,202,1.025,210,1.365,212,1.669,215,2.436,216,2.131,218,1.454,226,1.554,247,1.685,256,1.365,265,1.284,268,2.462,271,2.166,282,2.278,286,2.367,293,0.709,296,1.144,309,3.407,313,1.965,327,1.669,328,3.174,329,0.921,330,3.757,331,2.278,332,2.846,333,3.339,334,2.846,335,2.166,336,2.846,337,1.965,338,1.965,339,1.365,340,2.846,341,2.846,342,3.57,343,3.994,344,2.846,345,2.436,346,2.436,347,1.965,348,4.648,349,2.166,350,4.171,351,4.602,352,2.846,353,2,354,2.643,355,1.669,356,2.278,357,1.965,358,2.846,359,1.965,360,2.436,361,2.846,362,2.846,363,2.846,364,2.846,365,2.166,366,2.846,367,1.454,368,1.803,369,2.846,370,1.284,371,2.895,372,2.166,373,1.454,374,2.367,375,1.965,376,1.965,377,2.436,378,1.803,379,3.174,380,1.965,381,2.436,382,2.846,383,2.436,384,2.166,385,2.846,386,1.211,387,1.803,388,1.284,389,2.166,390,2.846,391,2.166,392,2.846,393,2.846,394,4.171,395,2.846,396,2.846,397,2.436,398,2.643,399,2.846,400,1.669,401,2.436,402,2.166,403,1.554,404,2.846,405,2.166,406,2.846,407,2.436,408,1.669,409,2.846,410,1.669,411,1.284,412,1.965,413,2.846,414,2.166,415,2.846,416,2.846,417,2.879,418,1.803,419,1.803,420,2.166,421,1.554,422,2.166,423,1.965,424,2.436,425,2.436,426,2.846,427,2.846,428,2.846,429,2.846,430,3.57,431,1.965,432,2.436,433,1.454,434,2.846]],["title/classes/DragLayerConnectionClass.html",[67,1.385,435,2.927]],["body/classes/DragLayerConnectionClass.html",[3,0.551,4,0.41,16,2.555,19,0.514,20,0.801,22,3.909,25,1.55,26,0.02,27,1.323,28,0.587,29,1.253,30,0.996,31,1.487,32,0.015,33,0.015,44,1.651,69,1.601,77,2.154,81,3.249,82,4.31,83,4.848,84,1.892,87,2.607,88,3.588,90,3.849,94,3.383,95,3.383,100,1.365,107,3.805,108,1.296,110,3.805,111,3.805,112,2.271,118,3.805,282,2.428,329,1.439,348,3.068,371,2.607,435,3.383,436,3.805,437,3.805,438,2.006,439,5.664,440,5.664,441,5.664,442,3.383,443,1.892,444,2.131]],["title/interfaces/DragLayerMonitor.html",[0,0.909,371,2.255]],["body/interfaces/DragLayerMonitor.html",[2,1.132,3,0.661,4,0.492,6,1.4,18,2.028,19,0.617,20,0.896,26,0.018,30,0.853,32,0.017,33,0.017,50,2.557,108,1.554,167,1.26,194,3.049,282,2.912,370,2.406,371,3.128,444,2.557,445,4.565,446,3.681,447,2.557,448,2.912,449,2.144,450,2.912,451,4.059,452,3.681]],["title/directives/DragPreviewDirective.html",[298,2.1,453,2.654]],["body/directives/DragPreviewDirective.html",[3,0.604,4,0.449,6,1.279,18,1.853,19,0.564,20,0.848,26,0.019,28,0.508,30,0.779,31,1.279,32,0.016,33,0.016,35,2.66,42,1.496,43,2.073,103,3.548,167,1.417,268,2.073,283,2.218,288,1.853,293,1.213,296,2.411,320,2.335,331,3.275,333,3.063,337,3.362,438,2.198,449,1.958,453,3.362,454,2.335,455,3.362,456,2.335,457,3.086,458,3.086,459,3.707,460,3.707,461,3.707,462,3.362,463,5.562,464,3.707,465,4.117,466,3.8]],["title/interfaces/DragPreviewOptions.html",[0,0.909,103,2.1]],["body/interfaces/DragPreviewOptions.html",[2,0.698,3,0.408,4,0.303,6,0.863,19,0.381,26,0.018,28,0.519,29,1.379,32,0.013,33,0.013,37,2.218,43,1.399,44,1.349,50,2.218,57,1.123,102,2.527,103,1.796,133,1.796,137,2.084,167,1.621,195,2.503,202,1.666,211,1.666,220,2.363,247,1.123,283,1.123,293,1.152,296,2.335,302,1.68,311,3.172,328,2.503,329,2.055,333,3.504,337,2.27,343,2.27,353,1.577,367,1.68,373,2.363,374,2.218,391,2.503,443,1.969,444,2.218,449,2.152,467,2.503,468,5.808,469,5.808,470,4.582,471,5.808,472,5.808,473,3.746,474,4.009,475,4.009,476,4.972,477,5.808,478,3.723,479,3.521,480,4.627,481,3.289,482,4.627,483,4.627,484,4.964,485,4.972,486,2.815,487,4.627,488,4.627,489,3.289,490,4.582,491,2.503,492,2.503,493,3.289,494,2.503,495,2.503,496,1.796,497,2.084,498,3.289,499,3.289,500,3.289,501,1.796,502,2.815,503,4.627,504,3.289,505,2.815,506,3.289,507,3.289,508,3.289,509,3.289,510,3.289,511,2.084,512,2.503,513,4.627,514,1.399,515,3.289,516,1.929,517,3.289,518,3.289,519,1.929,520,2.27,521,3.193,522,3.96]],["title/interfaces/DragSource.html",[0,0.909,283,1.313]],["body/interfaces/DragSource.html",[2,0.64,3,0.374,4,0.278,6,0.791,9,3.024,17,1.36,18,1.147,19,0.349,20,0.721,25,1.205,26,0.02,27,1.185,28,0.578,29,1.025,30,0.947,31,0.791,32,0.012,33,0.012,37,2.085,42,0.926,43,2.376,48,1.808,64,1.143,68,1.485,72,2.606,73,3.31,74,3.31,76,3.882,79,3.882,100,1.336,102,3.369,103,2.375,105,2.55,114,2.581,115,2.376,116,2.221,119,1.646,120,1.91,121,1.91,124,1.808,129,1.212,134,2.581,146,1.445,149,1.36,157,2.55,159,1.768,167,1.205,168,1.212,174,1.283,202,1.086,247,1.029,256,2.085,260,2.606,262,1.445,273,0.791,283,2.106,284,1.283,286,1.445,287,2.081,289,3.31,291,1.212,293,1.271,295,1.91,296,1.748,302,2.606,314,0.926,319,2.081,333,1.54,338,3.002,398,3.538,400,1.768,403,1.646,408,1.768,410,1.768,411,2.302,454,2.085,456,2.446,465,2.755,473,1.646,501,2.375,514,2.171,523,2.294,524,1.91,525,2.581,526,2.294,527,2.294,528,2.581,529,1.91,530,3.015,531,3.002,532,3.002,533,3.002,534,2.755,535,3.015,536,1.768,537,2.294,538,2.294,539,3.015,540,2.294,541,3.722,542,3.722,543,3.31,544,3.722,545,3.722,546,3.015,547,2.581,548,2.081,549,3.722,550,2.581,551,2.081,552,2.294,553,2.755,554,2.581,555,2.081,556,2.294,557,3.015,558,3.015,559,4.349,560,1.91,561,3.015,562,3.015,563,3.015,564,3.015,565,3.015,566,3.015,567,3.015,568,3.015,569,3.015,570,3.015,571,3.015,572,1.54]],["title/directives/DragSourceDirective.html",[298,2.1,573,2.654]],["body/directives/DragSourceDirective.html",[3,0.548,4,0.408,6,1.161,18,1.682,19,0.512,20,0.798,26,0.02,28,0.574,30,0.707,31,1.161,32,0.015,33,0.015,35,2.415,42,1.358,43,1.882,50,2.12,56,3.052,64,1.264,68,1.509,72,2.883,105,3.646,115,1.882,116,2.259,124,1.431,155,2.593,207,1.995,247,1.509,268,1.882,283,2.401,288,1.682,293,1.101,296,1.778,320,2.12,329,1.431,331,3.082,333,2.259,353,2.12,438,1.995,443,1.882,444,2.12,449,2.269,454,2.12,455,3.052,456,2.12,459,3.365,460,3.365,461,3.365,462,3.052,464,3.365,465,3.939,466,3.576,470,3.785,520,3.052,573,3.052,574,5.644,575,5.644,576,3.785,577,3.785,578,1.995,579,3.785,580,4.422,581,4.422,582,4.422]],["title/interfaces/DragSourceMonitor.html",[0,0.909,583,1.964]],["body/interfaces/DragSourceMonitor.html",[2,0.782,3,0.457,4,0.34,6,0.967,17,1.662,18,1.401,19,0.426,20,0.803,26,0.019,30,1.155,32,0.014,33,0.014,47,1.765,48,1.62,50,2.724,51,1.765,64,0.825,77,1.401,108,1.073,126,2.011,162,2.399,167,1.343,194,2.751,207,1.662,211,1.326,216,2.556,246,2.333,264,2.011,273,1.492,288,1.903,291,1.48,292,2.333,293,0.917,302,1.881,314,2.175,315,2.129,370,1.662,405,2.802,410,2.16,422,2.802,444,2.399,446,2.541,447,1.765,448,2.011,449,2.643,450,2.732,451,3.808,452,2.541,457,2.333,492,2.802,496,2.011,519,2.16,534,3.17,551,2.541,560,2.333,583,1.881,584,3.152,585,3.682,586,4.261,587,4.207,588,3.922,589,3.152,590,2.934,591,1.881,592,3.682,593,3.152,594,2.011,595,3.682,596,3.682,597,3.152,598,2.802,599,3.682,600,3.152,601,3.152,602,2.802,603,3.862,604,3.332,605,2.541,606,3.17,607,3.152,608,2.802,609,3.152,610,3.152,611,3.152,612,3.152,613,3.152,614,2.802,615,3.152,616,3.152,617,3.453,618,2.802,619,3.152]],["title/classes/DragSourceMonitorClass.html",[67,1.385,620,2.927]],["body/classes/DragSourceMonitorClass.html",[3,0.528,4,0.393,19,0.493,20,0.779,25,1.302,26,0.02,27,1.17,28,0.548,29,1.107,30,1.166,31,1.118,32,0.015,33,0.015,44,1.606,69,1.534,84,1.813,87,2.498,93,4.216,194,2.756,231,3.491,234,3.582,438,1.922,442,3.242,583,2.176,586,3.87,587,4.216,588,4.216,620,3.242,621,2.94,622,4.717,623,5.228,624,4.649,625,4.649,626,4.649,627,4.649,628,4.649,629,4.649,630,4.649,631,3.646,632,4.26]],["title/interfaces/DragSourceOptions.html",[0,0.909,105,2.255]],["body/interfaces/DragSourceOptions.html",[2,1.01,3,0.59,4,0.439,6,1.249,19,0.55,26,0.02,28,0.403,29,1.188,32,0.016,33,0.016,42,1.461,44,1.723,51,2.281,57,1.624,64,1.066,105,2.79,115,2.024,133,3.227,202,1.713,283,2.018,317,2.79,329,1.54,349,3.62,374,2.281,402,3.62,418,3.014,467,3.62,520,3.283,521,4.079,633,4.757,634,5.503,635,4.437,636,4.773,637,5.059,638,5.059,639,4.757,640,3.283,641,4.757,642,4.072,643,4.757,644,4.757,645,4.757,646,4.757,647,4.072,648,4.757,649,4.757]],["title/interfaces/DragSourceSpec.html",[0,0.909,291,1.546]],["body/interfaces/DragSourceSpec.html",[0,1.091,2,0.54,3,0.316,4,0.235,6,0.668,17,1.731,18,0.968,19,0.294,20,0.542,25,1.304,26,0.02,27,1.092,28,0.548,29,1.337,30,0.882,31,0.668,32,0.01,33,0.013,42,0.781,44,0.742,47,1.84,48,1.495,50,1.84,51,1.22,58,1.936,64,0.57,108,1.756,115,1.083,123,1.612,129,1.023,135,1.492,136,1.389,147,1.083,155,1.492,157,1.492,162,2.646,167,1.215,169,1.148,174,1.083,181,1.756,185,1.389,194,1.731,202,1.382,210,2.466,216,1.3,224,1.756,247,2.116,260,1.3,269,1.936,273,1.007,274,2.178,277,2.431,286,1.84,288,1.459,291,1.023,292,2.431,293,1.445,303,1.936,309,2.648,313,1.756,314,1.695,315,1.633,320,1.22,326,1.389,327,1.492,329,1.495,335,1.936,339,1.84,370,1.731,372,1.936,373,1.3,374,2.215,386,1.083,408,3.403,411,1.148,412,1.756,423,1.756,433,1.96,447,1.84,449,1.023,450,1.389,473,2.095,494,1.936,495,1.936,496,1.389,511,1.612,514,1.083,516,1.492,524,1.612,527,1.936,536,1.492,555,1.756,560,1.612,572,2.82,578,1.148,583,3.355,586,2.431,591,2.628,594,1.389,603,1.612,604,3.017,606,1.612,619,2.178,634,2.178,635,2.648,636,1.756,647,2.178,650,2.178,651,1.936,652,1.936,653,1.492,654,1.612,655,1.756,656,2.178,657,1.936,658,2.544,659,2.544,660,2.544,661,2.544,662,2.178,663,1.936,664,2.544,665,3.284,666,4.62,667,2.544,668,3.837,669,3.837,670,2.178,671,1.756,672,1.936,673,2.544,674,3.837,675,2.544,676,2.544,677,2.544,678,2.544,679,2.544,680,2.544,681,2.178,682,1.756,683,2.544,684,2.178,685,2.178,686,2.544,687,2.648,688,1.936,689,2.544,690,1.936,691,2.544,692,2.178,693,2.178,694,2.178,695,2.544,696,2.178,697,2.544,698,2.544,699,2.544,700,2.178,701,2.544,702,2.544,703,2.544,704,1.756,705,2.544,706,1.492,707,2.178,708,2.544,709,2.544,710,2.544,711,2.544,712,1.492,713,3.837,714,1.936,715,2.544,716,2.178,717,2.544,718,2.178,719,2.544,720,1.936,721,2.178,722,2.544,723,2.178,724,2.544,725,2.92,726,2.544,727,1.756,728,1.756,729,2.648,730,2.178,731,1.936,732,1.492,733,1.3,734,2.178,735,2.178,736,2.178,737,1.936,738,2.178]],["title/interfaces/DropTarget.html",[0,0.909,284,1.636]],["body/interfaces/DropTarget.html",[2,0.855,3,0.5,4,0.371,6,1.057,7,3.066,9,3.037,17,1.818,18,1.532,19,0.466,20,0.751,25,1.255,26,0.019,27,1.128,28,0.583,29,1.068,30,1.01,31,1.057,32,0.014,33,0.014,37,1.931,42,1.237,48,1.304,57,1.375,64,0.902,68,1.375,72,2.714,75,4.548,76,4.524,77,1.532,80,4.548,92,3.366,100,1.237,102,3.246,117,3.448,119,2.2,120,2.552,121,2.552,124,1.925,129,1.619,132,1.818,157,2.362,159,2.362,167,0.952,168,1.619,174,2.261,256,1.931,260,2.058,262,1.931,273,1.561,283,1.814,284,2.53,287,2.78,294,2.362,295,2.552,296,2.136,302,3.037,314,1.826,319,2.78,400,2.362,408,2.362,411,1.818,454,1.931,456,2.547,501,2.2,514,2.261,529,2.552,531,2.78,532,2.78,533,2.78,534,2.552,541,3.448,542,3.448,543,3.066,544,3.448,545,3.448,547,3.448,548,2.78,549,4.548,550,3.448,551,2.78,552,3.066,553,2.552,594,2.2,712,2.362,733,2.058,739,4.028]],["title/directives/DropTargetDirective.html",[298,2.1,740,2.927]],["body/directives/DropTargetDirective.html",[3,0.545,4,0.405,6,1.154,11,3.299,18,1.673,19,0.509,20,0.795,25,1.039,26,0.019,27,0.933,28,0.573,29,0.884,30,0.899,31,1.477,32,0.015,33,0.015,35,2.402,56,3.035,64,0.985,68,1.501,72,2.873,82,4.281,92,4.141,124,1.424,155,2.579,207,1.984,247,1.501,273,1.154,284,2.94,296,1.768,384,4.281,438,1.984,449,1.768,454,2.108,455,3.035,456,2.108,459,3.347,460,3.347,461,3.347,462,3.035,464,3.347,465,3.929,466,3.564,576,3.764,577,3.764,578,1.984,579,3.764,740,3.347,741,6.536,742,6.536,743,5.625,744,5.625,745,4.814,746,5.625,747,5.625,748,4.398,749,3.347]],["title/interfaces/DropTargetMonitor.html",[0,0.909,750,1.964]],["body/interfaces/DropTargetMonitor.html",[2,0.792,3,0.463,4,0.344,6,0.98,17,1.684,18,1.42,19,0.432,20,0.809,25,0.882,26,0.019,27,0.792,28,0.485,29,0.75,30,1.151,32,0.014,33,0.014,43,1.589,47,1.79,50,2.743,51,2.421,64,0.836,77,1.42,108,1.088,162,1.79,167,1.193,196,3.199,198,3.595,211,1.345,216,2.579,264,2.039,273,1.609,288,1.92,289,2.841,292,2.365,302,1.907,314,2.223,315,2.149,320,1.79,370,1.684,373,1.907,386,1.589,410,2.189,444,2.421,446,2.576,447,1.79,448,2.039,449,2.654,450,2.758,451,3.843,452,2.576,457,2.365,492,2.841,501,2.039,534,3.199,551,2.576,560,2.365,587,4.231,588,3.949,589,3.195,590,2.189,602,2.841,603,3.884,605,2.576,606,3.199,607,3.195,608,2.841,609,3.195,610,4.322,611,3.195,612,3.195,613,3.195,614,4.355,615,3.195,616,3.195,617,2.576,618,3.843,706,2.189,750,1.907,751,3.195,752,3.733,753,3.195,754,5.05,755,3.733,756,2.841,757,2.841,758,3.195,759,3.195,760,2.841,761,3.733]],["title/classes/DropTargetMonitorClass.html",[67,1.385,762,2.927]],["body/classes/DropTargetMonitorClass.html",[3,0.51,4,0.379,19,0.476,20,0.761,25,1.418,26,0.02,27,1.274,28,0.561,29,1.206,30,1.16,31,1.079,32,0.015,33,0.015,43,1.749,44,1.569,69,1.48,84,1.749,87,2.41,93,4.143,196,3.411,198,3.521,231,3.411,234,3.521,288,2.047,329,1.33,438,1.854,442,3.127,443,1.749,444,1.97,587,4.143,588,4.143,622,4.608,624,4.569,625,4.569,626,4.569,627,4.569,628,4.569,629,4.569,630,4.569,631,3.517,750,2.099,753,3.517,758,3.517,762,3.127,763,2.836,764,6.003,765,4.109]],["title/interfaces/DropTargetSpec.html",[0,0.909,132,1.735]],["body/interfaces/DropTargetSpec.html",[2,0.738,3,0.431,4,0.321,6,0.913,17,2.685,19,0.402,20,0.68,25,1.476,26,0.019,27,1.171,28,0.53,29,1.377,30,0.951,31,1.263,32,0.013,33,0.013,47,2.307,50,1.668,51,2.307,57,1.187,58,3.661,64,0.779,108,1.608,123,2.204,126,1.899,129,1.398,132,1.569,135,2.04,136,2.627,140,2.204,147,1.48,155,2.04,162,2.307,167,0.822,169,1.569,185,1.899,198,3.235,200,2.977,202,1.253,210,1.668,216,2.817,224,2.4,247,1.883,273,1.696,277,2.204,286,2.853,288,1.83,291,1.934,292,2.204,293,1.198,303,2.647,314,2.035,315,1.48,329,1.126,339,2.307,342,2.977,356,1.899,370,1.569,380,2.4,386,1.48,418,2.204,433,1.777,444,1.668,447,1.668,449,1.398,452,2.4,458,2.204,494,2.647,501,1.899,534,2.204,578,1.569,590,2.04,591,2.458,603,2.204,604,2.04,605,2.4,606,2.204,614,3.661,618,2.647,651,2.647,652,2.647,653,2.04,654,3.048,655,2.4,682,3.807,700,2.977,728,2.4,729,3.32,730,2.977,731,2.647,732,2.04,733,2.458,734,2.977,735,2.977,736,2.977,737,2.647,738,2.977,750,3.449,766,2.977,767,3.478,768,2.977,769,3.478,770,3.478,771,2.4,772,2.977,773,2.977,774,3.478,775,3.478,776,3.478,777,3.478,778,3.478,779,3.478,780,2.977,781,3.478,782,3.478,783,2.977]],["title/interfaces/FactoryArgs.html",[0,0.909,86,2.654]],["body/interfaces/FactoryArgs.html",[2,1.1,3,0.642,4,0.478,19,0.599,26,0.02,28,0.587,32,0.017,33,0.017,44,1.815,70,3.038,71,3.038,86,3.575,100,2.253,784,6.675,785,6.675,786,6.675,787,6.675]],["title/interfaces/MonitorBase.html",[0,0.909,448,2.1]],["body/interfaces/MonitorBase.html",[2,0.791,3,0.462,4,0.343,6,0.978,19,0.431,20,0.808,26,0.02,28,0.316,30,1.157,32,0.014,33,0.014,69,1.341,108,1.086,115,1.585,116,1.902,124,1.632,157,2.184,167,1.191,211,2.606,255,2.571,286,3.401,291,1.497,293,0.928,296,2.027,356,2.753,373,3.446,374,3.334,375,2.571,378,3.194,379,4.871,448,2.034,450,2.034,478,3.753,479,4.661,624,4.35,625,4.35,626,4.35,627,4.35,628,4.35,629,4.35,630,4.35,788,3.188,789,3.188,790,6.4,791,5.243,792,3.724,793,5.042,794,4.892,795,3.724,796,2.834,797,5.042,798,3.724,799,3.188]],["title/interfaces/Offset.html",[0,0.909,478,2.255]],["body/interfaces/Offset.html",[2,1.114,3,0.651,4,0.484,6,1.377,19,0.607,26,0.019,28,0.569,32,0.017,33,0.017,44,1.829,47,2.516,425,5.745,473,3.798,478,3.077,800,3.993,801,3.993,802,5.247,803,5.247,804,5.953,805,5.953]],["title/classes/Reconnector.html",[67,1.385,806,2.927]],["body/classes/Reconnector.html",[3,0.588,4,0.437,19,0.549,25,1.121,26,0.02,27,1.007,28,0.586,29,1.435,31,1.245,32,0.016,33,0.016,43,2.51,44,1.719,69,1.708,81,2.274,84,2.019,100,1.457,102,3.507,164,4.49,211,1.708,232,4.072,235,4.432,322,4.49,329,1.91,443,2.51,806,3.61,807,4.06,808,5.899,809,4.743,810,4.743,811,4.743,812,4.743]],["title/classes/Source.html",[67,1.385,293,0.958]],["body/classes/Source.html",[3,0.57,4,0.424,19,0.532,20,0.818,25,1.569,26,0.02,27,1.343,28,0.563,29,1.272,30,1.094,31,1.518,32,0.016,33,0.016,69,1.655,84,1.956,90,3.896,99,3.498,100,1.412,108,1.686,147,1.956,194,2.61,283,1.569,291,2.325,293,1.145,438,2.074,572,3.233,583,2.955,586,4.01,604,3.712,623,4.951,749,4.402,813,3.498,814,4.951,815,3.934,816,4.596,817,4.596,818,3.934]],["title/classes/SourceConnector.html",[67,1.385,819,2.927]],["body/classes/SourceConnector.html",[3,0.588,4,0.437,19,0.549,20,0.834,25,1.394,26,0.02,27,1.252,28,0.544,29,1.186,30,0.943,31,1.549,32,0.016,33,0.016,42,1.972,44,1.719,69,1.708,84,2.019,97,2.782,211,2.125,229,3.274,230,3.738,231,3.738,232,4.432,233,3.61,234,3.46,235,3.274,281,5.361,283,1.619,329,1.536,438,2.14,443,2.019,463,4.06,819,3.61,820,4.06,821,4.743,822,4.743,823,4.743]],["title/interfaces/SourceConstructor.html",[0,0.909,824,2.654]],["body/interfaces/SourceConstructor.html",[2,1.22,3,0.713,4,0.53,26,0.018,32,0.018,33,0.018,70,3.37,71,3.37,824,3.966]],["title/classes/Target.html",[67,1.385,273,1.009]],["body/classes/Target.html",[3,0.572,4,0.425,19,0.533,20,0.819,25,1.571,26,0.02,27,1.345,28,0.564,29,1.274,30,1.095,31,1.664,32,0.016,33,0.016,69,1.66,84,1.961,90,3.9,99,3.508,100,1.416,108,1.847,132,2.615,136,3.461,147,1.961,198,3.717,273,1.21,284,1.961,314,1.947,438,2.08,749,4.41,750,2.96,814,4.96,815,3.945,818,3.945,825,3.508,826,5.795,827,4.609]],["title/classes/TargetConnector.html",[67,1.385,828,2.927]],["body/classes/TargetConnector.html",[3,0.592,4,0.44,19,0.552,20,0.837,25,1.399,26,0.02,27,1.257,28,0.546,29,1.19,30,0.947,31,1.554,32,0.016,33,0.016,42,1.977,44,1.726,69,1.718,84,2.03,97,2.798,211,2.133,230,3.751,231,3.751,232,4.443,233,3.631,234,3.472,235,3.293,281,5.368,284,2.03,329,1.545,438,2.153,443,2.03,820,4.084,828,3.631,829,3.631,830,4.771,831,4.771]],["title/interfaces/TargetConstructor.html",[0,0.909,832,2.654]],["body/interfaces/TargetConstructor.html",[2,1.22,3,0.713,4,0.53,26,0.018,32,0.018,33,0.018,70,3.37,71,3.37,832,3.966]],["title/changelog.html",[375,2.25,833,2.79,834,3.26]],["body/changelog.html",[4,0.375,11,4.152,16,1.836,26,0.015,32,0.015,33,0.015,57,1.389,146,1.951,169,1.836,181,2.808,265,3.158,266,4.104,339,1.951,454,1.951,591,3.575,835,4.068,836,4.068,837,4.068,838,3.482,839,4.068,840,3.482,841,3.482,842,4.068,843,3.482,844,4.068,845,4.068,846,4.068,847,6.998,848,4.83,849,4.068,850,6.766,851,6.345,852,4.068,853,4.068,854,6.345,855,5.348,856,4.577,857,5.348,858,5.348,859,4.068,860,4.068,861,4.068,862,4.068,863,4.068,864,3.482,865,3.482,866,4.068,867,3.482,868,4.068,869,3.482,870,4.068,871,4.068,872,4.068,873,5.974,874,4.068,875,4.068,876,3.482,877,4.068,878,5.974,879,4.068,880,4.068,881,4.068,882,4.068,883,4.068]],["title/coverage.html",[884,4.409]],["body/coverage.html",[0,1.656,1,1.713,4,0.229,5,2.866,26,0.021,28,0.21,32,0.01,33,0.01,34,1.573,35,2.982,36,2.599,67,2.269,68,0.847,70,3.371,71,3.371,86,1.713,97,1.456,100,2.057,103,1.356,105,1.456,119,1.356,120,3.218,121,3.218,129,0.998,132,1.12,149,1.12,184,1.889,208,4.194,229,3.141,234,1.456,244,1.713,273,0.989,282,1.356,283,0.847,284,1.056,291,0.998,293,0.938,298,2.485,348,1.713,371,1.456,435,1.889,436,2.125,437,2.125,445,2.125,446,3.141,448,1.356,453,1.713,455,3.141,467,2.866,475,5.036,478,1.456,573,1.713,583,1.268,584,2.125,620,1.889,621,3.506,650,2.125,651,2.866,740,1.889,750,1.268,751,2.125,762,1.889,763,3.141,766,2.125,788,2.125,789,2.125,800,1.889,801,1.889,806,1.889,807,2.125,813,2.866,819,1.889,824,1.713,825,2.866,828,1.889,829,2.866,832,1.713,884,2.125,885,1.713,886,2.482,887,6.108,888,5.461,889,5.08,890,5.08,891,2.482,892,2.482,893,2.482,894,2.482,895,2.482,896,2.482,897,2.482,898,2.125,899,7.046,900,3.766,901,2.482,902,4.551,903,2.125,904,2.125,905,2.482,906,2.125,907,3.766,908,2.125,909,3.766,910,2.125,911,2.125,912,2.125,913,2.125,914,2.125,915,2.125,916,2.125,917,2.125,918,2.125,919,3.224,920,2.125,921,2.125,922,2.125,923,2.125,924,2.482,925,5.112,926,2.125,927,5.973,928,2.125,929,2.125,930,2.125,931,2.125,932,1.889,933,2.125,934,2.482,935,2.125,936,2.125,937,2.125,938,2.125,939,2.125,940,2.482,941,2.482]],["title/dependencies.html",[848,2.25,942,3.936]],["body/dependencies.html",[8,2.971,26,0.02,32,0.017,33,0.017,52,2.069,53,3.447,865,4.656,942,5.486,943,5.44,944,5.44,945,5.44,946,5.44,947,6.41,948,4.14,949,5.44,950,5.44,951,5.44]],["title/miscellaneous/functions.html",[421,2.511,952,1.912]],["body/miscellaneous/functions.html",[19,0.39,25,1.674,26,0.02,27,1.504,28,0.608,29,1.424,30,0.867,32,0.013,33,0.013,34,3.436,35,1.84,36,3.249,42,1.965,50,2.257,87,3.753,88,3.72,90,3.929,115,2.003,132,2.124,147,2.003,184,3.582,229,2.326,273,1.236,283,1.607,284,2.003,291,1.892,293,1.172,421,1.84,583,1.722,621,2.326,750,1.722,763,2.326,813,2.565,825,2.565,829,2.565,898,4.029,906,4.029,908,4.029,910,4.029,913,4.029,914,4.029,915,4.029,917,2.885,918,4.029,919,4.029,920,4.029,921,4.029,922,4.029,923,4.029,935,2.885,936,4.029,937,2.885,938,4.029,939,2.885,952,1.977,953,3.37,954,3.37,955,3.37,956,3.37,957,2.885,958,3.37,959,3.37,960,2.885,961,3.37,962,3.37,963,4.707,964,3.37,965,3.37,966,4.707,967,3.37,968,4.707,969,3.37,970,3.37,971,3.37,972,3.37,973,3.37,974,3.37,975,3.37,976,3.37,977,4.707,978,3.37,979,3.37,980,3.37,981,3.37,982,3.37,983,3.37,984,4.707,985,3.37]],["title/index.html",[19,0.377,375,2.25,833,2.79]],["body/index.html",[2,0.533,4,0.232,16,1.134,26,0.01,32,0.01,33,0.01,39,2.893,42,1.57,48,1.231,52,2.671,53,2.905,57,0.858,62,2.151,64,1.027,69,0.905,90,1.474,112,1.284,124,0.814,133,1.372,136,1.372,155,2.229,167,1.208,171,1.474,174,1.069,178,1.592,185,1.372,189,2.824,190,1.734,191,2.611,202,0.905,207,1.715,210,2.451,220,1.284,225,1.474,246,2.408,247,0.858,249,1.734,262,1.205,265,2.853,266,2.229,268,1.618,273,0.66,305,2.151,309,2.624,313,1.734,314,1.57,317,2.229,327,2.689,328,1.912,331,2.504,339,2.198,345,2.151,347,1.734,355,1.474,365,1.912,367,1.942,376,1.734,377,3.254,386,1.618,387,2.905,403,1.372,411,1.715,412,1.734,419,1.592,420,1.912,450,1.372,474,1.734,485,2.151,491,1.912,495,1.912,496,1.372,511,1.592,512,1.912,514,1.618,519,2.229,525,2.151,543,1.912,578,2.706,591,1.284,594,2.076,606,1.592,653,1.474,657,1.912,662,2.151,663,1.912,670,2.151,671,1.734,672,1.912,685,2.151,706,2.229,712,1.474,718,3.254,720,1.912,727,1.734,728,2.624,729,1.734,733,1.942,737,1.912,759,2.151,771,1.734,780,2.151,783,2.151,848,1.734,856,2.151,867,2.151,885,2.624,986,2.513,987,3.924,988,3.801,989,2.513,990,2.513,991,2.513,992,2.513,993,3.89,994,2.151,995,1.912,996,2.513,997,1.912,998,2.624,999,2.513,1000,2.513,1001,2.513,1002,2.513,1003,1.912,1004,2.513,1005,2.513,1006,2.151,1007,2.513,1008,2.513,1009,2.513,1010,2.513,1011,2.513,1012,2.151,1013,2.151,1014,2.513,1015,1.912,1016,2.513,1017,2.513,1018,2.151,1019,2.513,1020,2.513,1021,2.513,1022,1.592,1023,2.513,1024,2.513,1025,2.513,1026,2.151,1027,2.513,1028,2.151,1029,1.912,1030,2.513,1031,2.513,1032,2.151,1033,2.513,1034,2.513,1035,3.801,1036,2.513,1037,1.912,1038,2.513,1039,2.513,1040,2.151,1041,2.893,1042,2.151,1043,3.254,1044,2.513,1045,2.513,1046,2.151,1047,2.513,1048,2.513,1049,1.912,1050,2.513,1051,2.151,1052,2.151,1053,2.513,1054,2.513,1055,2.513,1056,2.513,1057,2.513,1058,2.513,1059,2.513,1060,2.151,1061,2.513,1062,2.513,1063,1.912,1064,2.513,1065,2.513,1066,2.513,1067,2.151,1068,2.151,1069,2.513,1070,2.513,1071,2.513,1072,2.513,1073,2.513,1074,2.513,1075,2.513,1076,2.513,1077,2.513,1078,2.151,1079,2.513,1080,2.513,1081,2.513,1082,2.513,1083,2.513,1084,2.513,1085,2.513,1086,2.513,1087,2.513,1088,2.513,1089,2.513,1090,1.734,1091,1.912,1092,2.513,1093,2.513,1094,2.624,1095,2.513,1096,2.513,1097,2.513,1098,1.912,1099,1.912,1100,4.585,1101,3.801,1102,2.513,1103,2.513,1104,2.513,1105,2.513,1106,1.912,1107,2.513,1108,2.513,1109,2.513,1110,2.513,1111,3.801,1112,2.513,1113,2.513,1114,2.513,1115,2.513,1116,2.151,1117,2.513,1118,2.513,1119,1.734,1120,2.513,1121,2.513,1122,5.112,1123,2.151,1124,2.151,1125,2.513,1126,2.513,1127,2.513,1128,2.513,1129,2.513,1130,2.513,1131,2.151,1132,2.513,1133,2.513,1134,2.513,1135,2.513,1136,2.151,1137,1.912,1138,3.924,1139,2.513,1140,3.254,1141,2.513]],["title/modules.html",[237,3.555]],["body/modules.html",[26,0.018,32,0.018,33,0.018,40,3.172,237,4.009,1142,4.971]],["title/overview.html",[1143,4.409]],["body/overview.html",[2,1.199,26,0.018,32,0.018,33,0.018,69,2.034,236,3.578,244,3.897,311,3.578,454,2.707,876,4.834,1143,4.834,1144,3.578,1145,5.647]],["title/properties.html",[44,1.34,848,2.25]],["body/properties.html",[6,1.395,11,3.117,26,0.02,32,0.017,33,0.017,44,1.549,52,2.713,167,1.494,189,2.262,265,2.398,314,1.942,578,2.853,843,4.55,1138,4.55,1140,4.55,1146,5.316,1147,5.316,1148,5.316,1149,5.316,1150,5.316]],["title/miscellaneous/typealiases.html",[952,1.912,1151,4.598]],["body/miscellaneous/typealiases.html",[19,0.579,26,0.02,28,0.424,32,0.017,33,0.017,37,2.4,92,3.864,100,2.102,115,2.913,116,3.496,146,2.924,314,1.537,315,2.13,800,3.809,801,4.641,952,2.936,1090,4.209,1152,5.005,1153,6.098,1154,7.017,1155,6.098,1156,6.098,1157,6.098,1158,5.005,1159,5.005]],["title/miscellaneous/variables.html",[952,1.912,1160,3.936]],["body/miscellaneous/variables.html",[19,0.397,26,0.02,28,0.502,32,0.013,33,0.013,37,1.646,42,1.977,43,2.029,45,2.939,46,2.614,52,2.632,53,4.502,57,1.172,64,1.326,68,1.628,70,2.014,71,3.213,88,3.021,116,2.436,133,1.875,140,2.176,149,2.904,174,1.461,211,1.237,273,0.902,293,0.855,329,2.283,405,2.614,443,3.002,444,2.627,621,2.37,756,4.169,763,2.37,771,4.556,824,2.37,832,2.37,903,4.082,904,4.082,911,4.082,912,4.082,916,4.082,925,2.939,926,4.082,928,4.082,929,4.082,930,4.082,931,4.082,932,3.629,933,4.082,952,2.014,957,4.082,960,2.939,1094,2.37,1160,2.939,1161,6.602,1162,4.769,1163,5.479,1164,5.509,1165,6.437,1166,5.479,1167,2.614,1168,3.434,1169,3.434,1170,3.434,1171,3.434,1172,4.769,1173,3.434,1174,3.434,1175,3.434,1176,3.434,1177,2.939,1178,2.939,1179,3.434]],["title/additional-documentation/quickstart.html",[388,1.471,997,2.481,1180,1.665]],["body/additional-documentation/quickstart.html",[2,0.468,10,1.889,11,1.294,12,1.889,16,0.996,26,0.02,28,0.292,32,0.009,33,0.012,37,1.058,39,2.618,40,2.607,42,2.1,44,0.643,46,1.679,47,1.058,48,1.854,49,3.619,52,2.178,57,0.753,64,1.07,65,1.889,66,2.945,67,0.795,69,0.795,77,0.839,93,1.523,100,1.59,102,2.309,108,1.003,116,1.127,124,1.546,133,2.827,136,1.205,137,1.398,138,1.679,143,1.398,146,1.058,147,0.939,149,0.996,162,1.649,167,1.498,168,1.383,169,0.996,171,1.294,174,1.464,189,2.203,191,2.16,210,1.058,211,0.795,220,1.127,225,2.018,230,1.398,236,2.679,237,1.523,238,2.618,239,1.889,241,1.889,247,1.443,254,1.889,260,1.127,262,1.649,264,1.205,265,2.336,266,2.018,268,2.032,272,3.628,273,0.579,277,1.398,286,1.649,288,0.839,293,1.189,296,0.887,304,1.679,314,1.59,315,0.939,317,1.294,326,1.205,329,1.369,331,3.127,333,1.757,347,1.523,349,1.679,351,1.679,353,2.027,355,1.294,357,1.523,365,1.679,367,2.801,368,3.025,370,0.996,387,2.679,400,2.48,403,1.879,411,0.996,417,2.374,420,2.618,421,1.205,431,2.918,433,1.757,443,0.939,449,0.887,450,1.205,456,1.649,474,1.523,475,1.523,496,1.879,497,1.398,511,1.398,514,2.032,516,1.294,519,1.294,520,2.918,528,1.889,529,1.398,531,1.523,553,1.398,578,1.552,586,1.398,590,1.294,591,1.127,604,1.294,617,2.374,642,1.889,654,1.398,655,1.523,657,1.679,684,1.889,706,1.294,721,1.889,731,1.679,771,1.523,799,1.889,885,1.523,994,1.889,995,1.679,998,1.523,1006,1.889,1012,1.889,1026,1.889,1051,1.889,1078,1.889,1091,1.679,1094,2.374,1119,1.523,1137,1.679,1142,2.945,1144,2.18,1181,2.207,1182,1.679,1183,2.207,1184,5.176,1185,1.889,1186,3.44,1187,3.619,1188,2.618,1189,2.207,1190,1.889,1191,2.207,1192,2.207,1193,3.28,1194,2.207,1195,2.207,1196,1.679,1197,1.523,1198,1.889,1199,3.44,1200,2.48,1201,3.44,1202,2.207,1203,1.889,1204,2.207,1205,2.207,1206,2.207,1207,2.207,1208,2.207,1209,1.889,1210,1.523,1211,2.945,1212,1.889,1213,1.889,1214,1.523,1215,1.523,1216,2.207,1217,2.207,1218,2.207,1219,1.889,1220,3.44,1221,2.207,1222,2.207,1223,2.945,1224,2.207,1225,2.207,1226,1.679,1227,2.207,1228,1.889,1229,2.207,1230,2.207,1231,2.207,1232,2.207,1233,1.679,1234,1.889,1235,2.207,1236,4.228,1237,2.207,1238,3.44,1239,3.44,1240,2.207,1241,3.44,1242,2.207,1243,3.44,1244,2.207,1245,2.207,1246,3.44,1247,2.207,1248,2.207,1249,2.207,1250,2.207,1251,2.207,1252,2.207,1253,2.207,1254,2.207,1255,2.207,1256,2.207,1257,2.207,1258,2.207,1259,2.207,1260,2.207,1261,2.207,1262,2.207,1263,1.679,1264,2.207,1265,2.945,1266,1.889,1267,2.207,1268,2.207,1269,2.207,1270,2.207,1271,2.207,1272,2.207,1273,3.44,1274,1.889,1275,1.889,1276,2.207,1277,2.207,1278,1.889,1279,2.945,1280,2.207,1281,2.207,1282,1.889,1283,2.207,1284,1.889,1285,2.207,1286,2.207]],["title/additional-documentation/guide.html",[388,1.471,1180,1.665,1215,2.25]],["body/additional-documentation/guide.html",[17,2.323,20,0.728,26,0.017,32,0.017,33,0.017,52,1.958,64,1.389,68,2.117,72,2.629,77,2.359,124,2.008,144,3.553,168,2.494,169,2.323,218,2.629,256,2.468,258,3.918,265,2.323,268,2.191,294,3.019,311,2.811,354,3.261,355,3.019,422,3.918,454,2.468,457,3.261,458,3.261,529,3.261,1214,3.553,1287,3.553,1288,3.553,1289,4.406,1290,3.261,1291,5.148,1292,5.148,1293,3.553,1294,5.148]],["title/additional-documentation/guide/1.-creating-connections.html",[311,1.365,388,1.128,1180,1.277,1287,1.725,1288,1.725]],["body/additional-documentation/guide/1.-creating-connections.html",[8,2.334,9,2.821,16,1.328,20,0.604,23,1.504,26,0.021,28,0.25,32,0.012,33,0.012,48,1.788,52,1.626,57,1.005,64,0.958,68,2.089,77,1.914,81,2.049,100,0.904,108,0.858,119,1.608,124,1.788,129,2.358,132,1.328,146,2.049,147,1.253,149,1.328,158,3.659,167,1.01,169,1.929,174,2.496,202,1.06,205,2.241,208,1.865,210,1.412,212,1.727,218,2.996,220,2.184,226,2.334,247,2.208,248,2.52,249,2.032,251,2.52,255,2.032,256,2.933,260,2.184,262,1.412,268,2.142,269,2.241,271,3.253,272,1.865,273,1.321,282,1.608,283,1.459,284,1.819,288,1.626,291,1.184,293,1.254,294,1.727,314,0.904,315,1.253,321,2.52,326,1.608,327,1.727,329,0.953,343,2.032,367,1.504,368,1.865,374,2.049,386,1.253,389,2.241,398,1.865,408,1.727,411,1.328,417,2.032,424,2.52,456,2.049,473,1.608,496,1.608,497,1.865,514,1.253,556,2.241,572,1.504,598,3.253,640,2.032,665,3.659,733,1.504,745,3.659,1037,3.253,1041,2.241,1063,2.241,1090,2.032,1099,2.241,1182,2.241,1193,1.865,1196,2.241,1197,2.032,1200,1.727,1210,2.032,1228,2.52,1282,2.52,1287,2.95,1288,3.474,1290,1.865,1295,4.203,1296,4.275,1297,3.83,1298,4.275,1299,2.944,1300,2.944,1301,2.52,1302,2.95,1303,2.241,1304,2.944,1305,2.944,1306,2.944,1307,2.944,1308,2.944,1309,3.659,1310,3.253,1311,2.944,1312,2.52,1313,2.944,1314,2.944,1315,2.944,1316,2.944,1317,2.52,1318,2.241,1319,2.944,1320,2.944,1321,2.944,1322,2.241,1323,2.944,1324,2.944,1325,2.944,1326,4.275,1327,5.523,1328,2.52,1329,2.944,1330,2.944,1331,2.52,1332,2.52,1333,3.659,1334,2.944,1335,2.944,1336,2.944,1337,2.944,1338,2.944,1339,2.944,1340,2.52,1341,2.52]],["title/additional-documentation/guide/2.-connecting-to-dom.html",[124,0.809,186,1.725,388,1.128,1180,1.277,1290,1.583]],["body/additional-documentation/guide/2.-connecting-to-dom.html",[20,0.429,23,1.551,26,0.02,27,0.928,32,0.012,33,0.012,42,1.343,43,1.293,48,1.415,57,1.493,64,1.255,68,1.493,81,2.096,84,1.861,103,1.659,108,0.885,124,1.814,126,2.388,132,1.37,135,1.781,137,1.924,149,1.37,167,1.506,168,1.221,169,1.37,189,1.293,202,1.094,223,3.328,240,2.6,246,1.924,255,2.096,256,1.456,262,1.456,268,2.632,273,1.148,283,1.749,286,1.456,291,1.758,293,1.276,294,2.564,295,1.924,296,2.711,298,1.659,314,1.573,315,1.293,317,1.781,320,1.456,326,1.659,329,0.983,331,1.659,333,3.159,337,3.018,338,3.536,343,2.096,348,2.096,353,1.456,354,2.77,355,1.781,356,2.388,359,2.096,367,1.551,368,1.924,373,2.233,374,1.456,386,1.293,400,1.781,414,2.312,417,3.018,418,3.918,419,2.77,433,2.233,447,2.096,453,2.096,466,1.924,484,3.328,497,1.924,514,1.293,516,1.781,521,3.018,536,1.781,537,2.312,538,2.312,540,2.312,572,1.551,573,2.096,636,2.096,640,2.096,656,2.6,682,2.096,687,2.096,704,2.096,712,1.781,716,2.6,727,3.018,732,3.004,760,2.312,1003,2.312,1022,1.924,1040,2.6,1116,2.6,1167,2.312,1182,2.312,1289,3.742,1290,1.924,1293,2.096,1297,3.328,1342,3.037,1343,3.037,1344,3.037,1345,4.372,1346,4.372,1347,4.372,1348,3.037,1349,4.372,1350,4.372,1351,4.372,1352,4.372,1353,3.742,1354,4.372,1355,3.037,1356,2.6,1357,3.037,1358,2.6,1359,2.6,1360,3.037,1361,4.372,1362,3.037,1363,3.037,1364,4.372,1365,3.037,1366,3.037,1367,2.6,1368,3.037,1369,3.037,1370,3.037,1371,3.037,1372,2.6,1373,3.037,1374,3.037,1375,3.037,1376,2.312,1377,3.037,1378,2.6,1379,3.037,1380,2.6,1381,2.6,1382,3.037,1383,3.037,1384,3.037]],["title/additional-documentation/guide/3.-monitoring-state.html",[168,1.005,388,1.128,1144,1.583,1180,1.277,1293,1.725]],["body/additional-documentation/guide/3.-monitoring-state.html",[2,0.956,8,1.73,20,0.637,23,2.678,26,0.02,28,0.382,30,0.506,32,0.012,33,0.012,44,1.313,48,1.954,52,1.205,64,1.009,68,1.538,77,2.295,100,0.973,108,1.881,112,2.301,126,2.46,143,2.007,147,2.231,157,1.857,159,1.857,167,1.064,168,2.108,171,1.857,179,2.711,185,1.73,189,1.348,191,2.301,194,1.429,196,2.007,202,2.057,207,2.033,208,2.007,212,2.642,214,3.109,220,1.618,224,3.109,225,3.075,247,1.538,260,1.618,262,1.518,273,1.499,284,1.348,288,1.994,302,1.618,314,1.611,339,1.518,353,1.518,356,1.73,370,2.033,371,1.857,378,2.854,380,2.186,384,2.41,386,1.348,387,2.007,403,1.73,411,1.429,421,1.73,423,2.186,433,2.301,447,1.518,448,1.73,449,1.273,458,2.007,473,1.73,478,1.857,511,2.854,514,1.348,524,3.619,554,2.711,583,1.618,591,1.618,594,2.46,600,2.711,635,2.186,653,1.857,655,2.186,704,2.186,725,2.41,729,2.186,732,1.857,733,1.618,750,1.618,757,3.991,791,2.711,838,2.711,993,2.41,1022,2.007,1091,2.41,1190,2.711,1197,2.186,1200,3.35,1210,2.186,1219,2.711,1234,2.711,1293,2.186,1295,3.429,1356,2.711,1376,2.41,1385,2.711,1386,2.711,1387,3.429,1388,2.711,1389,3.167,1390,5.244,1391,3.856,1392,3.167,1393,3.167,1394,3.167,1395,4.505,1396,3.167,1397,2.711,1398,2.711,1399,2.711,1400,3.167,1401,3.167,1402,3.167,1403,3.167,1404,4.505,1405,3.167,1406,2.711,1407,3.167,1408,2.711,1409,3.167,1410,2.41,1411,2.711,1412,2.711,1413,4.505,1414,3.167,1415,3.167,1416,2.711,1417,3.167,1418,3.856,1419,3.167,1420,3.167,1421,3.167,1422,3.167,1423,2.41,1424,2.711,1425,3.167,1426,3.167,1427,3.167,1428,2.711]],["title/additional-documentation/chess-tutorial.html",[388,1.277,998,1.953,1049,2.153,1180,1.445]],["body/additional-documentation/chess-tutorial.html",[0,0.337,4,0.258,8,1.316,9,0.401,11,0.46,16,1.545,20,0.277,23,0.728,26,0.021,27,0.166,28,0.066,30,0.125,32,0.004,33,0.004,37,0.683,40,0.428,42,0.241,47,0.376,48,2.011,51,1.501,52,1.191,57,0.486,64,0.825,67,1.609,69,0.282,72,0.401,77,0.542,81,0.683,84,0.606,100,0.438,108,0.415,112,1.231,115,0.834,123,1.527,124,0.461,127,0.671,129,1.377,130,0.671,137,0.903,138,0.597,143,0.903,144,0.541,146,0.376,149,1.941,150,1.22,159,0.46,162,1.765,167,1.154,168,0.787,169,0.354,170,0.671,171,0.46,173,0.671,174,2.025,185,0.428,186,3.084,189,0.334,190,1.352,191,1,192,0.597,194,0.643,196,1.772,198,1.836,202,1.233,203,0.671,207,2.085,208,0.497,210,1.501,212,0.46,218,1.231,220,1.231,221,0.671,223,2.383,226,1.527,230,0.497,236,0.903,244,1.663,246,2.169,247,1.708,256,1.155,260,0.401,262,0.376,264,1.527,265,1.262,266,0.836,268,1.026,272,3.238,273,0.822,277,1.772,288,0.298,293,0.78,296,0.315,302,0.728,311,2.349,314,1.6,315,0.834,317,0.46,320,0.376,322,0.597,327,0.46,330,1.491,331,0.428,333,1.231,338,1.352,339,1.155,346,1.22,353,1.341,354,0.497,355,0.46,356,0.778,357,0.541,359,0.984,367,2.197,368,0.497,370,0.643,372,0.597,373,0.728,374,0.683,376,1.663,378,0.497,379,3.133,380,1.663,381,0.671,383,0.671,386,0.834,388,0.354,389,1.834,397,1.677,398,2.169,401,0.671,402,1.834,403,0.428,407,0.671,410,0.836,411,0.354,414,0.597,418,0.497,419,0.903,421,0.428,430,1.22,431,1.352,433,1,443,0.834,447,0.683,449,0.315,456,0.376,457,0.903,462,1.93,473,0.778,475,1.352,476,0.671,479,1.085,484,0.597,486,1.22,490,0.671,491,1.085,497,0.903,501,0.778,502,1.22,505,1.677,512,1.085,514,1.332,516,0.836,519,0.836,521,0.541,522,0.671,523,0.597,524,0.497,527,0.597,531,0.541,532,0.541,533,0.541,536,2.008,537,0.597,538,0.597,540,0.597,553,0.497,556,0.597,560,0.497,572,0.401,578,1.087,590,0.46,591,0.401,593,0.671,594,2.011,597,0.671,598,1.834,602,0.597,603,1.241,608,0.597,617,0.541,636,2.541,638,0.671,640,0.541,652,0.597,653,1.413,654,0.497,663,0.597,671,0.984,672,0.597,681,0.671,682,0.541,687,1.663,688,0.597,690,1.085,692,2.394,693,0.671,694,0.671,696,0.671,704,0.541,706,0.46,712,0.46,714,1.085,720,4.163,723,0.671,725,0.597,727,0.541,732,1.149,733,1,757,0.597,768,0.671,772,0.671,773,3.682,794,0.671,796,0.597,804,4.073,805,4.182,840,0.671,841,1.22,864,1.22,869,0.671,887,3.825,948,2.606,987,1.677,993,1.834,997,0.597,998,1.663,1003,1.834,1013,0.671,1015,0.597,1018,0.671,1022,0.903,1037,0.597,1041,1.085,1043,0.671,1046,0.671,1049,2.802,1052,1.677,1060,0.671,1063,0.597,1067,0.671,1090,0.541,1098,1.491,1099,0.597,1106,0.597,1119,0.541,1123,0.671,1137,0.597,1144,1.241,1185,0.671,1188,3.516,1193,1.772,1196,1.834,1197,0.541,1198,1.677,1200,1.64,1210,0.541,1211,0.671,1212,2.394,1213,2.394,1214,1.352,1215,0.984,1223,1.677,1226,0.597,1233,1.085,1263,0.597,1266,0.671,1275,1.22,1279,1.22,1295,1.085,1297,1.491,1301,1.22,1302,1.663,1303,1.834,1310,0.597,1317,3.524,1318,0.597,1322,0.597,1331,0.671,1332,0.671,1333,0.671,1340,1.677,1341,0.671,1353,0.671,1359,0.671,1367,0.671,1372,0.671,1376,1.085,1380,0.671,1381,0.671,1385,0.671,1386,0.671,1387,0.597,1388,0.671,1391,0.671,1397,0.671,1398,0.671,1399,0.671,1406,1.22,1408,0.671,1410,1.085,1411,0.671,1412,0.671,1416,0.671,1424,0.671,1428,0.671,1429,0.784,1430,3.424,1431,6.137,1432,0.671,1433,0.784,1434,0.784,1435,1.425,1436,1.959,1437,4.302,1438,1.425,1439,3.424,1440,4.469,1441,2.41,1442,4.469,1443,3.682,1444,1.959,1445,3.682,1446,1.425,1447,0.784,1448,0.784,1449,0.597,1450,1.959,1451,0.784,1452,0.784,1453,0.784,1454,1.425,1455,1.085,1456,0.784,1457,1.959,1458,0.784,1459,0.784,1460,3.682,1461,2.41,1462,1.425,1463,0.784,1464,2.41,1465,1.425,1466,0.784,1467,4.117,1468,0.784,1469,0.784,1470,0.671,1471,1.425,1472,1.959,1473,0.784,1474,0.784,1475,0.784,1476,0.784,1477,0.784,1478,0.784,1479,1.425,1480,0.784,1481,1.959,1482,1.959,1483,0.784,1484,1.425,1485,0.784,1486,0.784,1487,1.425,1488,1.425,1489,0.784,1490,0.784,1491,0.784,1492,1.425,1493,0.784,1494,0.784,1495,0.784,1496,0.784,1497,2.796,1498,0.671,1499,1.959,1500,2.41,1501,3.131,1502,0.784,1503,0.784,1504,2.41,1505,0.784,1506,0.784,1507,1.425,1508,0.784,1509,0.784,1510,0.784,1511,0.784,1512,0.784,1513,1.425,1514,2.796,1515,0.784,1516,0.784,1517,0.784,1518,0.784,1519,1.425,1520,2.796,1521,1.22,1522,0.784,1523,0.784,1524,0.671,1525,0.784,1526,0.784,1527,0.784,1528,0.784,1529,1.425,1530,1.425,1531,0.784,1532,0.784,1533,0.784,1534,0.784,1535,0.671,1536,0.784,1537,0.784,1538,0.784,1539,0.784,1540,0.784,1541,0.784,1542,1.425,1543,0.784,1544,5.303,1545,0.784,1546,0.784,1547,0.784,1548,0.784,1549,0.784,1550,1.425,1551,0.784,1552,2.68,1553,0.784,1554,0.784,1555,0.784,1556,3.131,1557,2.063,1558,0.671,1559,0.671,1560,0.784,1561,3.912,1562,2.796,1563,0.784,1564,0.671,1565,0.784,1566,0.784,1567,0.784,1568,1.425,1569,0.784,1570,0.784,1571,0.784,1572,0.784,1573,0.784,1574,0.784,1575,1.425,1576,1.425,1577,0.784,1578,0.784,1579,1.425,1580,0.784,1581,0.784,1582,0.784,1583,0.784,1584,0.784,1585,0.784,1586,0.784,1587,0.784,1588,0.784,1589,0.784,1590,0.784,1591,1.677,1592,0.784,1593,0.784,1594,1.425,1595,0.784,1596,1.425,1597,1.425,1598,0.784,1599,0.784,1600,1.425,1601,1.959,1602,0.784,1603,1.425,1604,0.784,1605,1.425,1606,0.784,1607,0.784,1608,0.784,1609,0.784,1610,0.784,1611,0.784,1612,1.425,1613,1.425,1614,0.784,1615,0.784,1616,0.784,1617,0.784,1618,0.784,1619,0.784,1620,0.784,1621,0.671,1622,1.425,1623,0.784,1624,0.784,1625,0.784,1626,0.784,1627,0.784,1628,0.784,1629,0.784,1630,0.784,1631,0.784,1632,0.784,1633,0.671,1634,0.784,1635,1.425,1636,0.784,1637,0.784,1638,0.784,1639,3.682,1640,0.671,1641,0.784,1642,0.784,1643,0.784,1644,2.063,1645,0.784,1646,1.425,1647,0.784,1648,0.784,1649,0.784,1650,0.784,1651,1.959,1652,0.784,1653,0.784,1654,0.784,1655,0.784,1656,0.784,1657,1.425,1658,0.784,1659,1.425,1660,0.784,1661,0.784,1662,1.425,1663,0.671,1664,0.671,1665,0.784,1666,0.784,1667,0.784,1668,1.425,1669,0.784,1670,0.671,1671,0.784,1672,0.784,1673,0.784,1674,0.784,1675,0.784,1676,0.784,1677,0.784,1678,0.784,1679,0.784,1680,0.671,1681,0.784,1682,0.784,1683,0.784,1684,0.784,1685,0.784,1686,0.784,1687,0.784,1688,2.796,1689,2.063,1690,0.784,1691,0.784,1692,1.425,1693,0.784,1694,1.959,1695,0.671,1696,1.425,1697,0.784,1698,0.784,1699,0.784,1700,0.784,1701,0.784,1702,0.784,1703,0.784,1704,0.784,1705,0.784,1706,0.784,1707,0.784,1708,0.784,1709,0.784,1710,0.784,1711,0.784,1712,0.784,1713,1.425,1714,1.425,1715,0.784,1716,0.784,1717,0.784,1718,0.784,1719,0.784,1720,0.784,1721,0.784,1722,0.784,1723,0.784,1724,0.784,1725,0.784,1726,0.784,1727,0.784,1728,0.784,1729,0.784,1730,0.784,1731,0.784,1732,0.784,1733,0.784,1734,0.784,1735,0.784,1736,0.784,1737,0.784,1738,2.796,1739,0.784,1740,0.784,1741,0.784,1742,0.784,1743,1.425,1744,0.784,1745,1.425,1746,0.784,1747,1.425,1748,0.784,1749,0.784,1750,0.784,1751,0.784,1752,0.784]],["title/additional-documentation/translating-react-code.html",[189,1.063,191,1.277,388,1.128,1029,1.902,1180,1.277]],["body/additional-documentation/translating-react-code.html",[2,0.382,9,1.494,18,0.685,20,0.254,23,1.887,26,0.02,28,0.313,30,0.288,32,0.008,33,0.008,44,0.525,47,0.863,48,1.782,52,2.361,57,1.261,64,0.828,67,1.331,68,1.452,72,2.173,73,1.37,74,2.812,77,1.112,79,1.37,100,1.437,108,1.659,112,1.494,115,0.766,124,1.623,126,0.983,129,1.176,135,1.715,140,1.14,143,1.14,146,0.863,147,1.992,149,0.812,156,1.541,159,1.715,162,1.771,167,1.005,168,1.176,174,2.343,175,1.541,177,1.37,178,1.14,181,1.242,185,0.983,186,1.242,189,2.824,190,1.242,191,2.391,192,1.37,194,1.92,195,2.226,202,0.648,207,2.112,211,1.331,212,1.056,213,1.541,214,1.242,216,0.919,218,0.919,220,0.919,225,2.167,226,0.983,247,2.226,256,1.771,258,1.37,264,0.983,265,1.32,268,1.572,283,0.998,286,0.863,287,1.242,288,1.618,290,1.541,293,0.448,294,1.056,295,1.14,298,1.597,300,1.541,301,2.503,304,1.37,306,1.541,311,0.983,319,1.242,320,1.771,326,0.983,327,1.056,329,0.583,335,1.37,339,1.771,347,1.242,351,1.37,353,0.863,354,1.853,357,3.23,359,1.242,367,1.494,373,1.494,374,1.402,376,2.019,378,1.14,386,0.766,387,2.341,398,2.341,403,0.983,410,1.056,411,1.32,412,1.242,419,1.14,421,0.983,423,1.242,431,1.242,432,1.541,433,2.173,443,0.766,447,0.863,454,1.402,456,0.863,458,1.853,465,1.14,466,2.341,474,1.242,496,2.323,501,0.983,516,1.715,519,1.056,523,1.37,524,2.341,526,1.37,529,1.14,532,1.242,536,1.056,552,1.37,553,1.14,555,1.242,572,1.494,578,2.88,594,1.597,601,1.541,604,1.715,635,1.242,637,1.541,653,2.495,654,1.14,671,1.242,687,1.242,690,2.226,712,2.745,714,1.37,732,1.056,733,1.494,796,1.37,885,2.019,1015,1.37,1022,1.14,1028,1.541,1029,1.37,1032,1.541,1068,1.541,1094,2.019,1098,1.37,1119,2.55,1124,1.541,1131,1.541,1136,1.541,1144,1.14,1167,1.37,1177,1.541,1178,1.541,1188,2.226,1193,2.965,1200,1.715,1203,1.541,1214,2.019,1263,1.37,1265,2.503,1274,2.503,1278,1.541,1284,1.541,1288,2.936,1290,1.14,1302,1.242,1312,1.541,1318,2.226,1322,1.37,1328,1.541,1423,1.37,1432,2.503,1449,1.37,1455,1.37,1498,1.541,1521,1.541,1524,1.541,1535,1.541,1552,2.503,1557,1.541,1558,1.541,1591,2.503,1633,1.541,1640,1.541,1644,1.541,1663,1.541,1664,1.541,1670,1.541,1680,2.503,1689,3.162,1695,1.541,1753,1.8,1754,1.8,1755,1.8,1756,1.8,1757,1.8,1758,1.8,1759,2.503,1760,1.8,1761,1.8,1762,1.8,1763,1.8,1764,1.8,1765,1.8,1766,1.8,1767,1.8,1768,2.925,1769,6.208,1770,5.014,1771,1.8,1772,1.8,1773,1.8,1774,2.925,1775,2.503,1776,1.8,1777,1.8,1778,1.8,1779,1.8,1780,1.8,1781,1.8,1782,1.8,1783,1.8,1784,1.8,1785,1.8,1786,1.8,1787,1.8,1788,3.695,1789,2.925,1790,2.925,1791,1.8,1792,1.8,1793,2.925,1794,4.254,1795,3.695,1796,1.8,1797,2.925,1798,1.8,1799,1.8,1800,1.8,1801,1.8,1802,1.8,1803,1.8,1804,1.8,1805,1.8,1806,1.8,1807,1.8,1808,2.925,1809,1.8,1810,1.8,1811,1.8,1812,1.8,1813,1.8,1814,1.8,1815,1.8,1816,1.8,1817,1.8,1818,1.8,1819,1.8,1820,1.8,1821,1.8,1822,1.8,1823,1.8,1824,1.8,1825,1.8,1826,1.8,1827,1.8,1828,1.8,1829,1.8,1830,1.8,1831,1.8,1832,1.8,1833,1.8,1834,1.8,1835,3.162,1836,1.8,1837,1.541,1838,1.8,1839,1.8,1840,1.8,1841,1.8,1842,1.8,1843,1.8,1844,2.925,1845,1.8,1846,1.8,1847,1.8,1848,1.8]],["title/additional-documentation/testing.html",[388,1.471,548,2.25,1180,1.665]],["body/additional-documentation/testing.html",[16,1.2,26,0.021,32,0.011,33,0.011,40,1.453,41,2.277,42,2.105,48,1.703,52,2.325,53,1.686,57,0.908,64,0.889,67,0.958,87,2.783,88,1.686,123,1.686,124,0.861,126,2.167,129,1.595,136,1.453,142,2.277,162,1.276,167,1.545,168,1.07,178,1.686,189,2.511,194,1.2,207,1.2,210,1.276,211,0.958,214,1.836,218,1.359,226,2.167,236,1.686,238,2.025,247,1.921,249,2.738,264,1.453,265,1.79,266,2.327,272,3.873,273,1.477,293,1.401,314,1.878,315,1.132,320,1.276,326,1.453,330,2.025,339,1.276,353,1.276,356,1.453,360,2.277,370,1.2,386,1.689,391,2.025,400,2.327,408,1.56,514,2.019,526,2.025,533,1.836,536,2.327,548,3.883,555,1.836,572,1.359,578,1.2,590,1.56,605,4.432,688,2.025,706,1.56,707,2.277,728,1.836,756,2.025,760,2.025,932,2.025,948,2.025,995,2.025,1042,2.277,1106,2.025,1164,2.277,1187,2.277,1193,2.514,1200,1.56,1209,3.396,1215,1.836,1226,2.025,1233,3.611,1287,1.836,1302,1.836,1303,2.025,1309,2.277,1310,2.025,1358,2.277,1378,3.396,1387,2.025,1410,2.025,1418,2.277,1423,2.025,1449,2.025,1455,2.025,1470,2.277,1559,2.277,1564,2.277,1621,3.396,1759,2.277,1775,4.502,1835,2.277,1837,2.277,1849,3.968,1850,3.968,1851,2.661,1852,2.661,1853,2.661,1854,2.661,1855,2.661,1856,2.661,1857,2.661,1858,2.661,1859,2.661,1860,2.661,1861,2.661,1862,2.661,1863,2.661,1864,2.661,1865,2.661,1866,2.661,1867,3.968,1868,3.968,1869,2.661,1870,3.968,1871,2.661,1872,2.661,1873,2.661,1874,2.661,1875,3.968,1876,3.968,1877,2.661,1878,2.661,1879,2.661,1880,2.661,1881,2.661,1882,2.661,1883,2.661,1884,2.661,1885,2.661,1886,2.661,1887,4.745,1888,2.661,1889,2.661,1890,2.661,1891,2.661,1892,2.661,1893,2.661,1894,2.661,1895,2.661,1896,2.661,1897,2.661,1898,2.661,1899,2.661,1900,2.661]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["0",{"_index":475,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"coverage.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["0..63",{"_index":1547,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["0.1.1",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["0.1.2",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["0.14.0",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":1674,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["0.5",{"_index":476,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["0/1",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":311,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"overview.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["1.0.0",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":887,"title":{},"body":{"coverage.html":{},"additional-documentation/chess-tutorial.html":{}}}],["12.5",{"_index":1530,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["14",{"_index":879,"title":{},"body":{"changelog.html":{}}}],["16.0.0",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["17.0.0",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":876,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1px",{"_index":1526,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["2",{"_index":186,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["2.0.0",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["2.0.2",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["2c0127e",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["2d",{"_index":1074,"title":{},"body":{"index.html":{}}}],["3",{"_index":1144,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["3.0.0",{"_index":843,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["3/3",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1644,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["4/4",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1463,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["5",{"_index":1557,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["5.5",{"_index":1725,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["5/5",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["54px",{"_index":1465,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["560px",{"_index":1534,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["6",{"_index":1834,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["6/6",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":1444,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["7",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":1658,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["70px",{"_index":1468,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["75",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1550,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["8/8",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["8x8",{"_index":1519,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["9",{"_index":1145,"title":{},"body":{"overview.html":{}}}],["above",{"_index":357,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["abramov",{"_index":990,"title":{},"body":{"index.html":{}}}],["absolute",{"_index":1513,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["abstractdnddirective",{"_index":459,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["abstraction",{"_index":1036,"title":{},"body":{"index.html":{}}}],["accept",{"_index":1208,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["accepts",{"_index":63,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["access",{"_index":1423,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["accessors",{"_index":82,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DropTargetDirective.html":{}}}],["accomplish",{"_index":1797,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["achieve",{"_index":1489,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["action",{"_index":648,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["actions",{"_index":58,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["actual",{"_index":1754,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["actually",{"_index":1067,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["add",{"_index":16,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["add(teardown",{"_index":94,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["add(teardownlogic",{"_index":21,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["added",{"_index":1535,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["adding",{"_index":1183,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["additional",{"_index":1180,"title":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}},"body":{}}],["addsubscription",{"_index":1,"title":{"interfaces/AddSubscription.html":{}},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"coverage.html":{}}}],["advanced",{"_index":1282,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["advantage",{"_index":1024,"title":{},"body":{"index.html":{}}}],["advice",{"_index":390,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["affected",{"_index":1485,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["again",{"_index":1190,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["aliases",{"_index":1152,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1502,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["allow",{"_index":1629,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["allowing",{"_index":745,"title":{},"body":{"directives/DropTargetDirective.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["allows",{"_index":456,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["already",{"_index":501,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["alt",{"_index":677,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["alternate",{"_index":1219,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["alternatives",{"_index":1085,"title":{},"body":{"index.html":{}}}],["always",{"_index":1376,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ambitious",{"_index":1047,"title":{},"body":{"index.html":{}}}],["amend",{"_index":1600,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["anchorx",{"_index":468,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["anchory",{"_index":469,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["angular",{"_index":578,"title":{},"body":{"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["angular's",{"_index":1486,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["angular/common",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":948,"title":{},"body":{"dependencies.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["angular/core/testing",{"_index":1872,"title":{},"body":{"additional-documentation/testing.html":{}}}],["angular/platform",{"_index":1873,"title":{},"body":{"additional-documentation/testing.html":{}}}],["another",{"_index":727,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["answer",{"_index":1637,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["any,node",{"_index":810,"title":{},"body":{"classes/Reconnector.html":{}}}],["anything",{"_index":414,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["anyway",{"_index":734,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["aot",{"_index":1236,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["api",{"_index":1759,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["apis",{"_index":1010,"title":{},"body":{"index.html":{}}}],["app",{"_index":1213,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["app.module.ts",{"_index":1253,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["appear",{"_index":735,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["appearance",{"_index":1682,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["appearance—even",{"_index":722,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["applies",{"_index":580,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["apply",{"_index":502,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["applying",{"_index":1377,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["appmodule",{"_index":1189,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["approach",{"_index":1802,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["appropriate",{"_index":304,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["arbitrarily",{"_index":1494,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["arbitrary",{"_index":1846,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["area",{"_index":1057,"title":{},"body":{"index.html":{}}}],["arecollectsequal",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["arecollectsequal(a",{"_index":965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aren't",{"_index":1118,"title":{},"body":{"index.html":{}}}],["areoptionsequal",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["areoptionsequal(nextoptions",{"_index":967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["argument",{"_index":301,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["arguments",{"_index":1806,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["around",{"_index":223,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["array",{"_index":1090,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["array(64).fill(0).map((_",{"_index":1518,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["arrow",{"_index":1265,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["ask",{"_index":428,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["asking",{"_index":307,"title":{},"body":{"injectables/DndService.html":{}}}],["assembly",{"_index":1238,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["assertion",{"_index":978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assign",{"_index":670,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["assigning",{"_index":297,"title":{},"body":{"injectables/DndService.html":{}}}],["associated",{"_index":1831,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["assumes",{"_index":1446,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["assuming",{"_index":1724,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["assumptions",{"_index":1681,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["async",{"_index":1387,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["asynchronous",{"_index":1844,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["attach",{"_index":1297,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["attached",{"_index":1332,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["attaching",{"_index":1483,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["attention",{"_index":1506,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["automatic",{"_index":416,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["automatically",{"_index":541,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["available",{"_index":370,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["avoid",{"_index":695,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["avoiding",{"_index":279,"title":{},"body":{"injectables/DndService.html":{}}}],["aware",{"_index":1810,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["b",{"_index":966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["backend",{"_index":42,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["backend';generally",{"_index":1250,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["backend's",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend.simulatebegindrag([source",{"_index":1891,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulatedrop",{"_index":1896,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulateenddrag",{"_index":1897,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulatehover([target",{"_index":1893,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backendconnector",{"_index":812,"title":{},"body":{"classes/Reconnector.html":{}}}],["backendexample",{"_index":1866,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backendfactory",{"_index":46,"title":{},"body":{"interfaces/BackendInput.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["backendinput",{"_index":34,"title":{"interfaces/BackendInput.html":{}},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["backendnext",{"_index":996,"title":{},"body":{"index.html":{}}}],["backends",{"_index":39,"title":{},"body":{"interfaces/BackendInput.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["backendyou",{"_index":1181,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["background",{"_index":1391,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["backgroundcolor",{"_index":1481,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["bare",{"_index":1086,"title":{},"body":{"index.html":{}}}],["base",{"_index":122,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["base.ts",{"_index":789,"title":{},"body":{"interfaces/MonitorBase.html":{},"coverage.html":{}}}],["based",{"_index":403,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["basic",{"_index":1455,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["basics",{"_index":1448,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["batches",{"_index":1020,"title":{},"body":{"index.html":{}}}],["bbb",{"_index":1590,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["become",{"_index":774,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["becomes",{"_index":344,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["before",{"_index":796,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["beforeeach",{"_index":1881,"title":{},"body":{"additional-documentation/testing.html":{}}}],["beforeeach(async",{"_index":1879,"title":{},"body":{"additional-documentation/testing.html":{}}}],["begindrag",{"_index":572,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["begindrag(monitor",{"_index":683,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["behaviorsubject",{"_index":1562,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["behaviour",{"_index":294,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["behavioursubject",{"_index":1570,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["being",{"_index":373,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["belong",{"_index":1125,"title":{},"body":{"index.html":{}}}],["below",{"_index":1358,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["benefit",{"_index":1133,"title":{},"body":{"index.html":{}}}],["best",{"_index":661,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["better",{"_index":1579,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["between",{"_index":474,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["beyond",{"_index":1311,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["bg",{"_index":1738,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["big",{"_index":1496,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["biggest",{"_index":1787,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["binding",{"_index":579,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["bit",{"_index":1635,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["black",{"_index":1440,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["blindly",{"_index":592,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["block",{"_index":1497,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["blocks",{"_index":1040,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["board",{"_index":720,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["boardcomponent",{"_index":1443,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["boardsquarecomponent",{"_index":1688,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["body",{"_index":1477,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["boilerplate",{"_index":1566,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["bones",{"_index":1087,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":50,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/functions.html":{}}}],["boolean;then",{"_index":1478,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["border",{"_index":1525,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["born",{"_index":1111,"title":{},"body":{"index.html":{}}}],["both",{"_index":654,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["bottom",{"_index":492,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["bound",{"_index":206,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["bounding",{"_index":1345,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["box",{"_index":1364,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["break",{"_index":1433,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["breaking",{"_index":1599,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["brevity's",{"_index":1532,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["broadcast",{"_index":1567,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["broken",{"_index":582,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["browse",{"_index":1142,"title":{},"body":{"modules.html":{},"additional-documentation/quickstart.html":{}}}],["browser",{"_index":1226,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["browsers",{"_index":639,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["browsing",{"_index":1218,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["bug",{"_index":856,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["build",{"_index":864,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["builder",{"_index":1079,"title":{},"body":{"index.html":{}}}],["building",{"_index":987,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["bump",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["c.candrop",{"_index":1733,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["c.isdragging",{"_index":209,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["c.isover",{"_index":1732,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cad",{"_index":1075,"title":{},"body":{"index.html":{}}}],["call",{"_index":260,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["callback",{"_index":135,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["callbacks",{"_index":225,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["called",{"_index":216,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/translating-react-code.html":{}}}],["calling",{"_index":1259,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["came",{"_index":1679,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["can't",{"_index":1263,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["candrag",{"_index":586,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/quickstart.html":{}}}],["candrag(monitor",{"_index":699,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["candrop",{"_index":198,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"additional-documentation/chess-tutorial.html":{}}}],["candrop(monitor",{"_index":769,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["canmoveknight",{"_index":1601,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["canmoveknight(to",{"_index":1607,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["capturedraggingstate",{"_index":470,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{}}}],["card",{"_index":717,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["cards",{"_index":1065,"title":{},"body":{"index.html":{}}}],["carry",{"_index":1424,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["case",{"_index":200,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetSpec.html":{}}}],["cases",{"_index":328,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{}}}],["cat",{"_index":1390,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["cats",{"_index":1389,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["center",{"_index":1503,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["certain",{"_index":334,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["chain",{"_index":612,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["change",{"_index":339,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["changelog",{"_index":834,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":169,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["changing",{"_index":1406,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["character",{"_index":1459,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["check",{"_index":706,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["checking",{"_index":777,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["checks",{"_index":180,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["chess",{"_index":1049,"title":{"additional-documentation/chess-tutorial.html":{}},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["chessboard",{"_index":1540,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["child",{"_index":617,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["choose",{"_index":217,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["chrome",{"_index":61,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["circumstances",{"_index":660,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["class",{"_index":67,"title":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}},"body":{"coverage.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"index.html":{},"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["clean",{"_index":263,"title":{},"body":{"injectables/DndService.html":{}}}],["clearer",{"_index":1593,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["clearly",{"_index":1555,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["click",{"_index":1223,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["client",{"_index":429,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["closed",{"_index":83,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["code",{"_index":191,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["codebase",{"_index":1126,"title":{},"body":{"index.html":{}}}],["coll",{"_index":1737,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["collect",{"_index":1794,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["collect((props",{"_index":1814,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["collected",{"_index":192,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["color",{"_index":1482,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["colour",{"_index":1472,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["columns",{"_index":1528,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["combination",{"_index":1395,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["combine",{"_index":1820,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["comes",{"_index":1813,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["commence",{"_index":1202,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["commit",{"_index":841,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["commits",{"_index":840,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["common",{"_index":255,"title":{},"body":{"injectables/DndService.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["community",{"_index":1132,"title":{},"body":{"index.html":{}}}],["compared",{"_index":1764,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["compatibility",{"_index":12,"title":{},"body":{"interfaces/AddSubscription.html":{},"additional-documentation/quickstart.html":{}}}],["compatible",{"_index":771,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["complete",{"_index":1449,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["completions",{"_index":1285,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["complex",{"_index":988,"title":{},"body":{"index.html":{}}}],["component",{"_index":247,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["component's",{"_index":555,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["component.fireaction(monitor.getitem",{"_index":1772,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["component.source.gethandlerid",{"_index":1888,"title":{},"body":{"additional-documentation/testing.html":{}}}],["component.target.gethandlerid",{"_index":1889,"title":{},"body":{"additional-documentation/testing.html":{}}}],["componentfixture",{"_index":1870,"title":{},"body":{"additional-documentation/testing.html":{}}}],["components",{"_index":226,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["composing",{"_index":1798,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["comprehensive",{"_index":1030,"title":{},"body":{"index.html":{}}}],["comprehensively",{"_index":1276,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["compute",{"_index":1625,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["computed",{"_index":1685,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["concept",{"_index":1791,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["concepts",{"_index":1199,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["conceptually",{"_index":1667,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["concerned",{"_index":1495,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["configuration",{"_index":62,"title":{},"body":{"interfaces/BackendInput.html":{},"index.html":{}}}],["configure",{"_index":41,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/testing.html":{}}}],["confusing",{"_index":1664,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["confusion",{"_index":744,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["connect",{"_index":72,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["connect(fn",{"_index":96,"title":{},"body":{"classes/Connection.html":{}}}],["connect.connectdragsource",{"_index":1774,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connectdragpreview",{"_index":73,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["connectdragpreview(elementornode",{"_index":530,"title":{},"body":{"interfaces/DragSource.html":{}}}],["connectdragpreview(node",{"_index":101,"title":{},"body":{"classes/Connection.html":{}}}],["connectdragsource",{"_index":74,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["connectdragsource(elementornode",{"_index":546,"title":{},"body":{"interfaces/DragSource.html":{}}}],["connectdragsource(node",{"_index":104,"title":{},"body":{"classes/Connection.html":{}}}],["connectdroptarget",{"_index":75,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["connectdroptarget(elementornode",{"_index":739,"title":{},"body":{"interfaces/DropTarget.html":{}}}],["connectdroptarget(node",{"_index":106,"title":{},"body":{"classes/Connection.html":{}}}],["connected",{"_index":295,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["connecting",{"_index":1290,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["connection",{"_index":68,"title":{"classes/Connection.html":{}},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["connection's",{"_index":1291,"title":{},"body":{"additional-documentation/guide.html":{}}}],["connection.ts",{"_index":437,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["connection.unsubscribe",{"_index":250,"title":{},"body":{"injectables/DndService.html":{}}}],["connectionbase",{"_index":119,"title":{"interfaces/ConnectionBase.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["connectionbase.unsubscribe",{"_index":1805,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connections",{"_index":1288,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["connector",{"_index":97,"title":{"interfaces/Connector.html":{}},"body":{"classes/Connection.html":{},"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"coverage.html":{}}}],["connectors",{"_index":1832,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connects",{"_index":1828,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["consider",{"_index":1182,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["considered",{"_index":709,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["console.log('dropped",{"_index":1356,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["const",{"_index":536,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["constant",{"_index":1648,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["constants",{"_index":1657,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["constants.ts",{"_index":1650,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["construct",{"_index":1860,"title":{},"body":{"additional-documentation/testing.html":{}}}],["constructor",{"_index":84,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["constructor(backend",{"_index":820,"title":{},"body":{"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["constructor(backendconnector",{"_index":809,"title":{},"body":{"classes/Reconnector.html":{}}}],["constructor(factoryargs",{"_index":85,"title":{},"body":{"classes/Connection.html":{}}}],["constructor(manager",{"_index":442,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["constructor(private",{"_index":1302,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["constructor(spec",{"_index":815,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["constructors",{"_index":270,"title":{},"body":{"injectables/DndService.html":{}}}],["consumers",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":15,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["containercomponent",{"_index":1536,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["content",{"_index":600,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["context",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contributors",{"_index":1127,"title":{},"body":{"index.html":{}}}],["convenience",{"_index":1324,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["convenient",{"_index":134,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{}}}],["conventional",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["convert",{"_index":1546,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cookie",{"_index":1096,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1522,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coord",{"_index":1544,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coord.ts",{"_index":1545,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coordinate",{"_index":425,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/Offset.html":{}}}],["coordinates",{"_index":430,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["copy",{"_index":635,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["copying",{"_index":643,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["core",{"_index":53,"title":{},"body":{"interfaces/BackendInput.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["core's",{"_index":166,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["cormacrelf",{"_index":1112,"title":{},"body":{"index.html":{}}}],["corollary",{"_index":299,"title":{},"body":{"injectables/DndService.html":{}}}],["correctly",{"_index":1251,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["corresponds",{"_index":644,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["couples",{"_index":697,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["course",{"_index":1760,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["coverage",{"_index":884,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":256,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["createbackend",{"_index":1239,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["createconnector",{"_index":784,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["created",{"_index":1342,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["createhandler",{"_index":785,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["createmonitor",{"_index":786,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["creates",{"_index":287,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["createsourceconnector",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourceconnector(backend",{"_index":970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsourcefactory",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourcefactory(spec",{"_index":971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsourcemonitor",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourcemonitor(manager",{"_index":972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetconnector",{"_index":913,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetconnector(backend",{"_index":973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetfactory",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetfactory(spec",{"_index":974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetmonitor",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetmonitor(manager",{"_index":975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtestbackend",{"_index":1867,"title":{},"body":{"additional-documentation/testing.html":{}}}],["creating",{"_index":1287,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["css",{"_index":1003,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["current",{"_index":378,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["currently",{"_index":756,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["currentoptions",{"_index":968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["currentposition",{"_index":1603,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cursor",{"_index":521,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["custom",{"_index":343,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["customisations",{"_index":633,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["customise",{"_index":1353,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["customize",{"_index":1743,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cutter",{"_index":1097,"title":{},"body":{"index.html":{}}}],["d",{"_index":1865,"title":{},"body":{"additional-documentation/testing.html":{}}}],["d5aa05b",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["dan",{"_index":989,"title":{},"body":{"index.html":{}}}],["data",{"_index":309,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["data:image/png;base64",{"_index":1746,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dead",{"_index":1652,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["deadline",{"_index":1102,"title":{},"body":{"index.html":{}}}],["debug",{"_index":45,"title":{},"body":{"interfaces/BackendInput.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":55,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["decisions",{"_index":1422,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["declarations",{"_index":1470,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["declared",{"_index":1807,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decorating",{"_index":1793,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decorators",{"_index":1800,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decreased",{"_index":504,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["deep",{"_index":1490,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["default",{"_index":329,"title":{},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["defer",{"_index":1848,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["define",{"_index":672,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["defined",{"_index":590,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["definitions",{"_index":1252,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["degradation",{"_index":738,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["deleting",{"_index":1053,"title":{},"body":{"index.html":{}}}],["demo",{"_index":1275,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["demonstrations",{"_index":1083,"title":{},"body":{"index.html":{}}}],["demos",{"_index":1767,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["depend",{"_index":1843,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dependencies",{"_index":942,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":1869,"title":{},"body":{"additional-documentation/testing.html":{}}}],["depending",{"_index":380,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["depends",{"_index":1141,"title":{},"body":{"index.html":{}}}],["derive",{"_index":1402,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["describe",{"_index":1645,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["describe(mycomponent.name",{"_index":1874,"title":{},"body":{"additional-documentation/testing.html":{}}}],["described",{"_index":1852,"title":{},"body":{"additional-documentation/testing.html":{}}}],["describing",{"_index":686,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["description",{"_index":6,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"properties.html":{}}}],["designed",{"_index":365,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["desirable",{"_index":508,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["desktop",{"_index":1224,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["desktops",{"_index":1225,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["destroy",{"_index":258,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["destroy.unsubscribe",{"_index":261,"title":{},"body":{"injectables/DndService.html":{}}}],["destroyed",{"_index":158,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["destroying",{"_index":1313,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["destructive",{"_index":649,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["details",{"_index":707,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/testing.html":{}}}],["detection",{"_index":728,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/testing.html":{}}}],["determine",{"_index":700,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["devices",{"_index":1221,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["diagramming",{"_index":1069,"title":{},"body":{"index.html":{}}}],["diddrop",{"_index":587,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["difference",{"_index":1788,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["differences",{"_index":1761,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["different",{"_index":433,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["differently",{"_index":1876,"title":{},"body":{"additional-documentation/testing.html":{}}}],["difficult",{"_index":1705,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["directive",{"_index":298,"title":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}},"body":{"injectables/DndService.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["directives",{"_index":454,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"changelog.html":{},"overview.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["directives.ts",{"_index":455,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{}}}],["directly",{"_index":532,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["disappears",{"_index":1638,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["disconnect",{"_index":808,"title":{},"body":{"classes/Reconnector.html":{}}}],["discover",{"_index":1379,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["discussed",{"_index":1136,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["discussion",{"_index":768,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dispatched",{"_index":613,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["displacement",{"_index":793,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["display",{"_index":402,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["distinctuntilchanged",{"_index":179,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["div",{"_index":1500,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["divs",{"_index":1511,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dnd",{"_index":52,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"dependencies.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["dnd's",{"_index":300,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["dnd.dragsource('item",{"_index":1780,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dnd/core",{"_index":266,"title":{},"body":{"injectables/DndService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["dnd/multi",{"_index":420,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["dnd/ng",{"_index":1150,"title":{},"body":{"properties.html":{}}}],["dnd/sortable",{"_index":1001,"title":{},"body":{"index.html":{}}}],["dndmodule",{"_index":40,"title":{"modules/DndModule.html":{}},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"modules.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["dndmodule.forroot",{"_index":1187,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["dndservice",{"_index":129,"title":{"injectables/DndService.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["dndservice#draglayer",{"_index":1299,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice#dragsource",{"_index":1296,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice#droptarget",{"_index":1298,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice.draglayer",{"_index":366,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["dndservice.dragsource",{"_index":1765,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dndservice.droptarget(types",{"_index":152,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dndzone",{"_index":89,"title":{},"body":{"classes/Connection.html":{}}}],["dock",{"_index":485,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{}}}],["docs",{"_index":432,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/translating-react-code.html":{}}}],["documentation",{"_index":885,"title":{},"body":{"coverage.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["documented",{"_index":838,"title":{},"body":{"changelog.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["doesn't",{"_index":519,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["doing",{"_index":696,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dom",{"_index":124,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["don't",{"_index":220,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["done",{"_index":1318,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["down",{"_index":1063,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["drag",{"_index":167,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["drag/drop",{"_index":1045,"title":{},"body":{"index.html":{}}}],["drag/listen",{"_index":308,"title":{},"body":{"injectables/DndService.html":{}}}],["drag_drop_backend",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_debug_mode",{"_index":928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_factory",{"_index":929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_options",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_global_context",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_manager",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["dragdropmanager",{"_index":88,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["dragdropmonitor",{"_index":631,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["draggable",{"_index":419,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragged",{"_index":374,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragging",{"_index":210,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["draggingclassapplied",{"_index":1877,"title":{},"body":{"additional-documentation/testing.html":{}}}],["draglayer",{"_index":282,"title":{"interfaces/DragLayer.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["draglayer(subscription",{"_index":285,"title":{},"body":{"injectables/DndService.html":{}}}],["draglayer.listen",{"_index":369,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["draglayerconnectionclass",{"_index":435,"title":{"classes/DragLayerConnectionClass.html":{}},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["draglayermonitor",{"_index":371,"title":{"interfaces/DragLayerMonitor.html":{}},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["dragpreview",{"_index":463,"title":{},"body":{"directives/DragPreviewDirective.html":{},"classes/SourceConnector.html":{}}}],["dragpreview]=\"source",{"_index":1361,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragpreviewdirective",{"_index":453,"title":{"directives/DragPreviewDirective.html":{}},"body":{"directives/DragPreviewDirective.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragpreviewoptions",{"_index":103,"title":{"interfaces/DragPreviewOptions.html":{}},"body":{"classes/Connection.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsource",{"_index":283,"title":{"interfaces/DragSource.html":{}},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTarget.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource's",{"_index":585,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["dragsource('item",{"_index":1773,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dragsource(type",{"_index":290,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource.connectdragpreview",{"_index":1384,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsource.listen",{"_index":1670,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource.settype",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource]=\"itemsource",{"_index":1830,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dragsource]=\"source",{"_index":1374,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourceconnector",{"_index":821,"title":{},"body":{"classes/SourceConnector.html":{}}}],["dragsourcedecorator",{"_index":1153,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dragsourcedirective",{"_index":573,"title":{"directives/DragSourceDirective.html":{}},"body":{"directives/DragSourceDirective.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourcefactory",{"_index":1155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dragsourcemonitor",{"_index":583,"title":{"interfaces/DragSourceMonitor.html":{}},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["dragsourcemonitor.id",{"_index":711,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["dragsourcemonitor.isdragging",{"_index":1671,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dragsourcemonitorclass",{"_index":620,"title":{"classes/DragSourceMonitorClass.html":{}},"body":{"classes/DragSourceMonitorClass.html":{},"coverage.html":{}}}],["dragsourceoptions",{"_index":105,"title":{"interfaces/DragSourceOptions.html":{}},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"coverage.html":{}}}],["dragsourcespec",{"_index":291,"title":{"interfaces/DragSourceSpec.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourcespec.begindrag",{"_index":404,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["dragsourcetype",{"_index":574,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["dragula",{"_index":1101,"title":{},"body":{"index.html":{}}}],["draw",{"_index":1071,"title":{},"body":{"index.html":{}}}],["drill",{"_index":1062,"title":{},"body":{"index.html":{}}}],["drive",{"_index":1559,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["drop",{"_index":314,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["drop(monitor",{"_index":770,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["dropeffect",{"_index":634,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{}}}],["dropped",{"_index":682,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dropping",{"_index":138,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dropresult",{"_index":292,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["drops",{"_index":1630,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptarget",{"_index":284,"title":{"interfaces/DropTarget.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["droptarget's",{"_index":752,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["droptarget(types",{"_index":325,"title":{},"body":{"injectables/DndService.html":{}}}],["droptarget.listen",{"_index":1718,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptarget.settypes",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["droptargetconnector",{"_index":830,"title":{},"body":{"classes/TargetConnector.html":{}}}],["droptargetdecorator",{"_index":1156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["droptargetdirective",{"_index":740,"title":{"directives/DropTargetDirective.html":{}},"body":{"directives/DropTargetDirective.html":{},"coverage.html":{}}}],["droptargetfactory",{"_index":1157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["droptargetmonitor",{"_index":750,"title":{"interfaces/DropTargetMonitor.html":{}},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["droptargetmonitor.candrop",{"_index":1719,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptargetmonitor.isover",{"_index":1720,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptargetmonitorclass",{"_index":762,"title":{"classes/DropTargetMonitorClass.html":{}},"body":{"classes/DropTargetMonitorClass.html":{},"coverage.html":{}}}],["droptargetspec",{"_index":132,"title":{"interfaces/DropTargetSpec.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["droptargetspec.candrop",{"_index":1397,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["droptargetspec.drop",{"_index":1428,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["droptargettype",{"_index":741,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["droptargettypes",{"_index":742,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["dt",{"_index":151,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dt.add(subj.pipe",{"_index":160,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dumb",{"_index":395,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["duplication",{"_index":385,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["duration",{"_index":141,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["during",{"_index":669,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["dx",{"_index":1608,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dy",{"_index":1610,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dynamic",{"_index":319,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["dynamically",{"_index":549,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["e.g",{"_index":1368,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["each",{"_index":1200,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["earlier",{"_index":1717,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["easier",{"_index":567,"title":{},"body":{"interfaces/DragSource.html":{}}}],["easily",{"_index":533,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["easy",{"_index":249,"title":{},"body":{"injectables/DndService.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["editor",{"_index":1283,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["eee",{"_index":1392,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["effectively",{"_index":392,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["efficient",{"_index":1818,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["element",{"_index":296,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["element's",{"_index":1344,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["elementornode",{"_index":545,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["elementref",{"_index":1829,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["elementref.nativeelement",{"_index":535,"title":{},"body":{"interfaces/DragSource.html":{}}}],["elements",{"_index":354,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["elsewhere",{"_index":1558,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["emit",{"_index":1207,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["emits",{"_index":1653,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["empty",{"_index":518,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["emulate",{"_index":188,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["enable",{"_index":54,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["enabled",{"_index":1243,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["enabled/disabled",{"_index":595,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["encapsulation",{"_index":1488,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["encountered",{"_index":1256,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["enddrag",{"_index":604,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Source.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["enddrag(monitor",{"_index":702,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["ends",{"_index":313,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["enough",{"_index":1492,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["enters",{"_index":1019,"title":{},"body":{"index.html":{}}}],["entire",{"_index":1410,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["equality",{"_index":182,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["erasedto",{"_index":364,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["ergonomic",{"_index":1034,"title":{},"body":{"index.html":{}}}],["error",{"_index":1255,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["es6",{"_index":1840,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["eslint",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["especially",{"_index":1334,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["essentially",{"_index":172,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["etc",{"_index":1825,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["etcthen",{"_index":1351,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["even",{"_index":410,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["event",{"_index":602,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["events",{"_index":400,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["everything",{"_index":1328,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["exact",{"_index":1861,"title":{},"body":{"additional-documentation/testing.html":{}}}],["exactly",{"_index":1416,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["example",{"_index":48,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["examples",{"_index":387,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["except",{"_index":1642,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["execute",{"_index":1618,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["executing",{"_index":1615,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["exist",{"_index":228,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["existing",{"_index":336,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["exiting",{"_index":139,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["expect",{"_index":667,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["expect(draggingclassapplied()).tobefalsy",{"_index":1898,"title":{},"body":{"additional-documentation/testing.html":{}}}],["expect(draggingclassapplied()).tobetruthy",{"_index":1892,"title":{},"body":{"additional-documentation/testing.html":{}}}],["experience",{"_index":737,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["explicitly",{"_index":615,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["export",{"_index":1188,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["exported",{"_index":1235,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["exports",{"_index":239,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{}}}],["express",{"_index":1542,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["expresses",{"_index":1396,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["extended",{"_index":767,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["extends",{"_index":18,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/translating-react-code.html":{}}}],["extension",{"_index":60,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["extra",{"_index":671,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["f8fb0df",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["fact",{"_index":1110,"title":{},"body":{"index.html":{}}}],["factory.ts",{"_index":71,"title":{},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["factoryargs",{"_index":86,"title":{"interfaces/FactoryArgs.html":{}},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"coverage.html":{}}}],["fairly",{"_index":1758,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["false",{"_index":444,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/variables.html":{}}}],["familiar",{"_index":1447,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["famous",{"_index":1064,"title":{},"body":{"index.html":{}}}],["fancy",{"_index":1584,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["far",{"_index":1823,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["faster",{"_index":1103,"title":{},"body":{"index.html":{}}}],["feature",{"_index":640,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["features",{"_index":867,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["few",{"_index":1060,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["figure",{"_index":1710,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["find",{"_index":1106,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["finished",{"_index":1451,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["fire",{"_index":224,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["fireaction",{"_index":1777,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fireaction(item",{"_index":1783,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fired",{"_index":1343,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["fires",{"_index":219,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["first",{"_index":1301,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["fit",{"_index":1011,"title":{},"body":{"index.html":{}}}],["five",{"_index":1801,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fix",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":381,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["fixes",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["fixture",{"_index":1875,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.componentinstance",{"_index":1885,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.debugelement.query(by.css('.dragging",{"_index":1878,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.detectchanges",{"_index":1887,"title":{},"body":{"additional-documentation/testing.html":{}}}],["flag",{"_index":596,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["flight",{"_index":1013,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["floating",{"_index":1647,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["flow",{"_index":1009,"title":{},"body":{"index.html":{}}}],["flows",{"_index":358,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["fly",{"_index":564,"title":{},"body":{"interfaces/DragSource.html":{}}}],["fn",{"_index":99,"title":{},"body":{"classes/Connection.html":{},"classes/Source.html":{},"classes/Target.html":{}}}],["folder",{"_index":1059,"title":{},"body":{"index.html":{}}}],["follow",{"_index":355,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["following",{"_index":143,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["follows",{"_index":1359,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["font",{"_index":1461,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["foreground",{"_index":1473,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["forget",{"_index":254,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{}}}],["form",{"_index":1360,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["forroot",{"_index":241,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{}}}],["forroot(backendinput",{"_index":242,"title":{},"body":{"modules/DndModule.html":{}}}],["forrootto",{"_index":1195,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["found",{"_index":1124,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["four",{"_index":1450,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["free",{"_index":1819,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["frequently",{"_index":782,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["fresh",{"_index":1554,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["friendly",{"_index":1012,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["full",{"_index":1023,"title":{},"body":{"index.html":{}}}],["function",{"_index":100,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"interfaces/FactoryArgs.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["functioning",{"_index":1803,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["functions",{"_index":421,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DragLayer.html":{},"miscellaneous/functions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["funky",{"_index":1751,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["game",{"_index":1430,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice",{"_index":1561,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice.canmoveknight",{"_index":1626,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice.moveknight",{"_index":1594,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["general",{"_index":422,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide.html":{}}}],["getclientoffset",{"_index":624,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getclosed",{"_index":118,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["getdifferencefrominitialoffset",{"_index":625,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getdropresult",{"_index":588,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["gethandlerid",{"_index":76,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["getinitialclientoffset",{"_index":626,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getinitialsourceclientoffset",{"_index":627,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getitem",{"_index":628,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getitemtype",{"_index":629,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["gets",{"_index":725,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["getsourceclientoffset",{"_index":630,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getstyle",{"_index":1479,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["getting",{"_index":833,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gifs",{"_index":1084,"title":{},"body":{"index.html":{}}}],["github",{"_index":1137,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["give",{"_index":1588,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["given",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gives",{"_index":1816,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["glance",{"_index":1666,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["global",{"_index":351,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["globalmonitor",{"_index":817,"title":{},"body":{"classes/Source.html":{}}}],["gme",{"_index":1702,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["go",{"_index":1552,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["goals",{"_index":1016,"title":{},"body":{"index.html":{}}}],["going",{"_index":773,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["good",{"_index":277,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["grab",{"_index":1378,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["graphical",{"_index":1077,"title":{},"body":{"index.html":{}}}],["green",{"_index":1714,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["greenplus",{"_index":680,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["grid",{"_index":1520,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["grouping",{"_index":204,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["groupings",{"_index":563,"title":{},"body":{"interfaces/DragSource.html":{}}}],["guidance",{"_index":1703,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["guide",{"_index":1215,"title":{"additional-documentation/guide.html":{}},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["guidelines",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["habit",{"_index":278,"title":{},"body":{"injectables/DndService.html":{}}}],["handle",{"_index":418,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["handled",{"_index":534,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["handler",{"_index":1621,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["handlerid",{"_index":235,"title":{},"body":{"interfaces/Connector.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["handles",{"_index":1339,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["handlesquareclick",{"_index":1614,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["handlesquareclick(pos",{"_index":1596,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hanging",{"_index":222,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["happen",{"_index":1641,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["happens",{"_index":1046,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["happily",{"_index":187,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["hard",{"_index":694,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["having",{"_index":253,"title":{},"body":{"injectables/DndService.html":{}}}],["head",{"_index":1245,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["heavy",{"_index":1697,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["height",{"_index":1467,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["help",{"_index":1131,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["helpful",{"_index":1420,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["here",{"_index":733,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["here's",{"_index":1591,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["hide",{"_index":515,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["high",{"_index":1017,"title":{},"body":{"index.html":{}}}],["higher",{"_index":1789,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["highlighted",{"_index":1427,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["hinders",{"_index":1409,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["hint",{"_index":646,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["hoist",{"_index":310,"title":{},"body":{"injectables/DndService.html":{}}}],["hold",{"_index":1543,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hook",{"_index":322,"title":{},"body":{"injectables/DndService.html":{},"classes/Reconnector.html":{},"additional-documentation/chess-tutorial.html":{}}}],["hooks",{"_index":230,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["horizontal",{"_index":481,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["horse",{"_index":1752,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["host",{"_index":1499,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hover",{"_index":136,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["hover(monitor",{"_index":781,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["hovered",{"_index":760,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["hovering",{"_index":757,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["hovers",{"_index":783,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["html",{"_index":1476,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["html5",{"_index":331,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["html5backend",{"_index":49,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["html5dropresult",{"_index":674,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["https",{"_index":1748,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["https://github.com/ng",{"_index":1149,"title":{},"body":{"properties.html":{}}}],["icon",{"_index":681,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["id",{"_index":408,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["idea",{"_index":698,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["identical",{"_index":1716,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["identifier",{"_index":234,"title":{},"body":{"interfaces/Connector.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"coverage.html":{}}}],["ids",{"_index":1886,"title":{},"body":{"additional-documentation/testing.html":{}}}],["ie",{"_index":513,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["ie11",{"_index":581,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["illegal",{"_index":1619,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["illustrate",{"_index":1763,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["image",{"_index":338,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["imaginary",{"_index":1249,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["imagine",{"_index":1837,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["img",{"_index":537,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["img.onload",{"_index":538,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["img.src",{"_index":540,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["immediate",{"_index":544,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["immediately",{"_index":494,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["implement",{"_index":1041,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["implementation",{"_index":1413,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["implemented",{"_index":1222,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["implementing",{"_index":1436,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["implements",{"_index":438,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"directives/DropTargetDirective.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}}}],["import",{"_index":272,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["important",{"_index":412,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["importing",{"_index":1246,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["imports",{"_index":238,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["improvements",{"_index":1135,"title":{},"body":{"index.html":{}}}],["include",{"_index":1198,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["includes",{"_index":1234,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["including",{"_index":424,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["incorporate",{"_index":1696,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["independent",{"_index":1537,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicator",{"_index":1704,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["indices",{"_index":1548,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["inferring",{"_index":659,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{}}}],["information",{"_index":524,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["initial",{"_index":794,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["initialized",{"_index":1194,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["initialtype",{"_index":91,"title":{},"body":{"classes/Connection.html":{}}}],["initiated",{"_index":619,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{}}}],["inject",{"_index":1196,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["injectable",{"_index":244,"title":{"injectables/DndService.html":{}},"body":{"coverage.html":{},"overview.html":{},"additional-documentation/chess-tutorial.html":{}}}],["injectables",{"_index":245,"title":{},"body":{"injectables/DndService.html":{}}}],["injected",{"_index":1795,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["injection",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["injectiontoken",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('dnd",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inline",{"_index":1014,"title":{},"body":{"index.html":{}}}],["input",{"_index":398,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["inputs",{"_index":466,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["inside",{"_index":447,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["inspired",{"_index":1204,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["install",{"_index":1864,"title":{},"body":{"additional-documentation/testing.html":{}}}],["installation",{"_index":994,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["instance",{"_index":1197,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["instantiate",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instead",{"_index":496,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["instructions",{"_index":1260,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["interaction",{"_index":1233,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["interactions",{"_index":1042,"title":{},"body":{"index.html":{},"additional-documentation/testing.html":{}}}],["interactive",{"_index":1366,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["interactivity",{"_index":399,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["interest",{"_index":1755,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["interested",{"_index":1569,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["interesting",{"_index":1640,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{}},"body":{"interfaces/DragSourceSpec.html":{},"coverage.html":{},"additional-documentation/chess-tutorial.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"index.html":{},"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["internally",{"_index":130,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["internalmonitor",{"_index":622,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["internals",{"_index":306,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["interpolate",{"_index":487,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["introducing",{"_index":1582,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["invariant",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["invariant(assertion",{"_index":976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["investigate",{"_index":1352,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["isblack",{"_index":1553,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["iscallingcandrag",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscallingcandrop",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscallingisdragging",{"_index":912,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdragging",{"_index":194,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["isdragging(globalmonitor",{"_index":816,"title":{},"body":{"classes/Source.html":{}}}],["isdragging(monitor",{"_index":708,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["isdraggingobj",{"_index":1419,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["isdraggingplain",{"_index":1417,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["ish.ts",{"_index":801,"title":{},"body":{"interfaces/Offset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["isn't",{"_index":593,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["isolate",{"_index":1856,"title":{},"body":{"additional-documentation/testing.html":{}}}],["isolation",{"_index":1853,"title":{},"body":{"additional-documentation/testing.html":{}}}],["isover",{"_index":196,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["isover(options",{"_index":753,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["issue",{"_index":1130,"title":{},"body":{"index.html":{}}}],["issues",{"_index":1122,"title":{},"body":{"index.html":{}}}],["isticking",{"_index":439,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["it's",{"_index":687,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["it('should",{"_index":1890,"title":{},"body":{"additional-documentation/testing.html":{}}}],["item",{"_index":286,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["item's",{"_index":795,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["items",{"_index":317,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["itemsource",{"_index":1779,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["itemsourcespec",{"_index":1768,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["itemtypes",{"_index":1651,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["itemtypes.knight",{"_index":1654,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["itself",{"_index":1412,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["javascript",{"_index":685,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["jest",{"_index":1850,"title":{},"body":{"additional-documentation/testing.html":{}}}],["job",{"_index":1362,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["jones",{"_index":1349,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["js",{"_index":655,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["jsx",{"_index":1826,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["kanban",{"_index":719,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["keep",{"_index":597,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["key",{"_index":678,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["keys",{"_index":1415,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["keywords",{"_index":1146,"title":{},"body":{"properties.html":{}}}],["kinds",{"_index":1232,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["knight",{"_index":1431,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knight's",{"_index":1568,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightcomponent",{"_index":1437,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightposition",{"_index":1556,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightposition$|async",{"_index":1586,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knights",{"_index":1646,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightsource",{"_index":1659,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["know",{"_index":690,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["kp",{"_index":1606,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["laid",{"_index":1401,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["large",{"_index":1331,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["largely",{"_index":1026,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["last",{"_index":608,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["lastly",{"_index":1742,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["later",{"_index":714,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["layer",{"_index":348,"title":{},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["layers",{"_index":391,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/testing.html":{}}}],["lazy",{"_index":1191,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["leaked",{"_index":280,"title":{},"body":{"injectables/DndService.html":{}}}],["learn",{"_index":493,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["learnable",{"_index":1707,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["learning",{"_index":1104,"title":{},"body":{"index.html":{}}}],["leave",{"_index":221,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["left",{"_index":486,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["let's",{"_index":1514,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lets",{"_index":56,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["level",{"_index":1039,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":1633,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["library",{"_index":1094,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["license",{"_index":1138,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":321,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["lifetime",{"_index":324,"title":{},"body":{"injectables/DndService.html":{}}}],["lifting",{"_index":1698,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lightgoldenrodyellow",{"_index":1393,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["lightweight",{"_index":1564,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["limitations",{"_index":335,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/translating-react-code.html":{}}}],["limitedsupplyofpaper",{"_index":1269,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["line",{"_index":1466,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["linearly",{"_index":488,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["liners",{"_index":1272,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["lines",{"_index":1744,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["link",{"_index":637,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/translating-react-code.html":{}}}],["linked",{"_index":1498,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["links",{"_index":1072,"title":{},"body":{"index.html":{}}}],["list",{"_index":527,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["listen",{"_index":77,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["listen()/subscribe",{"_index":131,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["listen(m",{"_index":213,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["listen(mapfn",{"_index":107,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["listen(mapto",{"_index":163,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{}}}],["listens",{"_index":1857,"title":{},"body":{"additional-documentation/testing.html":{}}}],["lists",{"_index":718,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["literal",{"_index":754,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["little",{"_index":1662,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["live",{"_index":1454,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lives",{"_index":1007,"title":{},"body":{"index.html":{}}}],["load",{"_index":1381,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["loaded",{"_index":1192,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["log",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["logic",{"_index":598,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["long",{"_index":1745,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["longer",{"_index":227,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["look",{"_index":1212,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["looking",{"_index":1312,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["looks",{"_index":1668,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["loops",{"_index":1516,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lot",{"_index":1210,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["lots",{"_index":251,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["lower",{"_index":1038,"title":{},"body":{"index.html":{}}}],["luna",{"_index":1082,"title":{},"body":{"index.html":{}}}],["m.candrop",{"_index":1729,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["m.candrop());what",{"_index":1400,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["m.isdragging",{"_index":214,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["m.isover",{"_index":1399,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["macos",{"_index":1055,"title":{},"body":{"index.html":{}}}],["made",{"_index":543,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"index.html":{}}}],["maintain",{"_index":1321,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["maintaining",{"_index":1114,"title":{},"body":{"index.html":{}}}],["maintains",{"_index":165,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["make",{"_index":367,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["makes",{"_index":1680,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["making",{"_index":732,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["managed",{"_index":1804,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["manager",{"_index":87,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"miscellaneous/functions.html":{},"additional-documentation/testing.html":{}}}],["manager.getbackend",{"_index":1883,"title":{},"body":{"additional-documentation/testing.html":{}}}],["mandated",{"_index":1762,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["manually",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["many",{"_index":327,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["map",{"_index":1726,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["map(coll",{"_index":1736,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["mapfn",{"_index":111,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["mapto",{"_index":215,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{}}}],["marker",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":483,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["matching",{"_index":33,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["math.abs(dx",{"_index":1612,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["math.abs(dy",{"_index":1613,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["math.floor(i",{"_index":1551,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["maximally",{"_index":1033,"title":{},"body":{"index.html":{}}}],["maybe",{"_index":257,"title":{},"body":{"injectables/DndService.html":{}}}],["mcfly",{"_index":1350,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["mean",{"_index":1510,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["meaning",{"_index":1044,"title":{},"body":{"index.html":{}}}],["means",{"_index":484,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["meexample",{"_index":1347,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["merging",{"_index":1058,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":461,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["method",{"_index":17,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide.html":{}}}],["methods",{"_index":20,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["midflight",{"_index":340,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["minimal",{"_index":689,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["miscellaneous",{"_index":952,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1140,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mobile",{"_index":1220,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["mode",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":557,"title":{},"body":{"interfaces/DragSource.html":{}}}],["modern",{"_index":1523,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["modify",{"_index":705,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["module",{"_index":236,"title":{"modules/DndModule.html":{}},"body":{"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["module's",{"_index":1469,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["module.ts",{"_index":36,"title":{},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modulenamemapper",{"_index":1851,"title":{},"body":{"additional-documentation/testing.html":{}}}],["modules",{"_index":237,"title":{"modules.html":{}},"body":{"modules/DndModule.html":{},"modules.html":{},"additional-documentation/quickstart.html":{}}}],["modulewithproviders",{"_index":243,"title":{},"body":{"modules/DndModule.html":{}}}],["moment",{"_index":1622,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["monitor",{"_index":108,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/Target.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.candrop",{"_index":199,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["monitor.diddrop",{"_index":1274,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.getdropresult",{"_index":668,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["monitor.getitem",{"_index":656,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["monitor.isdragging",{"_index":195,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.isdragging());example",{"_index":1673,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["monitor.isover",{"_index":197,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["monitor.ts",{"_index":446,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"coverage.html":{}}}],["monitorbase",{"_index":448,"title":{"interfaces/MonitorBase.html":{}},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["monitoring",{"_index":1293,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["monitors",{"_index":1404,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["moot",{"_index":1809,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["more",{"_index":411,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["mounted",{"_index":726,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["mouse",{"_index":356,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["movable",{"_index":1050,"title":{},"body":{"index.html":{}}}],["move",{"_index":636,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["moved",{"_index":362,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["moveknight",{"_index":1632,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["moveknight(to",{"_index":1575,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["moves",{"_index":363,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["moving",{"_index":716,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["msg",{"_index":977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["much",{"_index":1592,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["multi",{"_index":10,"title":{},"body":{"interfaces/AddSubscription.html":{},"additional-documentation/quickstart.html":{}}}],["multibackend",{"_index":66,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["multibackend(html5totouch",{"_index":1240,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["multiple",{"_index":1799,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["mutable",{"_index":1089,"title":{},"body":{"index.html":{}}}],["mutate",{"_index":1002,"title":{},"body":{"index.html":{}}}],["mybackend",{"_index":1254,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["mycomponent",{"_index":1775,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["mydraggeditemtype",{"_index":664,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["mydropresult",{"_index":675,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["name",{"_index":27,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["neat",{"_index":1316,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["necessarily",{"_index":1092,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":345,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{}}}],["need",{"_index":514,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["nested",{"_index":614,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["never",{"_index":1411,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["new",{"_index":149,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["next",{"_index":497,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["nextoptions",{"_index":969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ng",{"_index":265,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ng2",{"_index":1100,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":1340,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngif",{"_index":203,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngif=\"aaa",{"_index":1589,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngmodule",{"_index":1186,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["ngonchanges",{"_index":465,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/translating-react-code.html":{}}}],["ngondestroy",{"_index":218,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ngoninit",{"_index":556,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngrx",{"_index":1565,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngrx/store",{"_index":780,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["ngstyle",{"_index":1484,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngswitch",{"_index":382,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["ngx",{"_index":1147,"title":{},"body":{"properties.html":{}}}],["ngzone.run",{"_index":736,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["noble",{"_index":1598,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["node",{"_index":102,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"classes/Reconnector.html":{},"additional-documentation/quickstart.html":{}}}],["node,options",{"_index":811,"title":{},"body":{"classes/Reconnector.html":{}}}],["nodes",{"_index":1073,"title":{},"body":{"index.html":{}}}],["nohtml5preview",{"_index":575,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["non",{"_index":746,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["none",{"_index":638,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notable",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["notation",{"_index":1811,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["note",{"_index":591,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["nothing",{"_index":772,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notice",{"_index":1508,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["noticed",{"_index":1231,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["notified",{"_index":170,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notifies",{"_index":703,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["notifying",{"_index":312,"title":{},"body":{"injectables/DndService.html":{}}}],["now",{"_index":376,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["null",{"_index":211,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["number",{"_index":473,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/Offset.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["o",{"_index":164,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/Reconnector.html":{}}}],["obja",{"_index":985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objb",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":288,"title":{},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["objects",{"_index":185,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["observable",{"_index":112,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["observable.combinelatest",{"_index":1821,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["observable.map",{"_index":173,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["observables",{"_index":1722,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["observe",{"_index":1721,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["obvious",{"_index":1706,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["occur",{"_index":500,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["offer",{"_index":1300,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["offers",{"_index":1209,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["offset",{"_index":478,"title":{"interfaces/Offset.html":{}},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["offsetx",{"_index":471,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["offsety",{"_index":472,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["once",{"_index":262,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["onchanges",{"_index":460,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["one",{"_index":174,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["ones",{"_index":1280,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["onload",{"_index":1382,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["onpush",{"_index":1025,"title":{},"body":{"index.html":{}}}],["op",{"_index":1863,"title":{},"body":{"additional-documentation/testing.html":{}}}],["opacity",{"_index":505,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["operation",{"_index":450,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["operations",{"_index":1203,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["opposed",{"_index":761,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["optimisation",{"_index":1403,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimise",{"_index":1407,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimises",{"_index":1414,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimization",{"_index":176,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["option",{"_index":645,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["optional",{"_index":29,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":610,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["options",{"_index":43,"title":{},"body":{"interfaces/BackendInput.html":{},"classes/Connection.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["optionshere",{"_index":1262,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["order",{"_index":1790,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["original",{"_index":516,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["others",{"_index":991,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":452,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["out",{"_index":993,"title":{},"body":{"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["output",{"_index":177,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"additional-documentation/translating-react-code.html":{}}}],["outside",{"_index":606,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["over",{"_index":386,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["overall",{"_index":1375,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["overlay",{"_index":1723,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["overlaystyle",{"_index":1734,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["override",{"_index":710,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["overrides",{"_index":616,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["overview",{"_index":1143,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":618,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["owner's",{"_index":589,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["p",{"_index":110,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["package",{"_index":848,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":1000,"title":{},"body":{"index.html":{}}}],["page",{"_index":388,"title":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["papercount",{"_index":1268,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["parameter",{"_index":269,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":560,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["parentid",{"_index":558,"title":{},"body":{"interfaces/DragSource.html":{}}}],["part",{"_index":1214,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["particular",{"_index":526,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["particularly",{"_index":1426,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["parts",{"_index":1695,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["pass",{"_index":320,"title":{},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["passed",{"_index":652,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["paste",{"_index":1786,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["pattern",{"_index":144,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{}}}],["patterns",{"_index":1833,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["paying",{"_index":1505,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["peer",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":383,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["perfectly",{"_index":1686,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["perform",{"_index":342,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{}}}],["performance",{"_index":729,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["pick",{"_index":688,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["picked",{"_index":1677,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["piece",{"_index":389,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["pieces",{"_index":1051,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["pipe",{"_index":1388,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["pipeline",{"_index":1081,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1421,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["place",{"_index":704,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["placed",{"_index":1538,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["places",{"_index":779,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["placing",{"_index":1541,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["plain",{"_index":47,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/Offset.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["planning",{"_index":413,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["play",{"_index":1453,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["players",{"_index":1678,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["plenty",{"_index":1095,"title":{},"body":{"index.html":{}}}],["plural",{"_index":747,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["point",{"_index":1504,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["pointer",{"_index":755,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["poor",{"_index":1337,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["populated",{"_index":1847,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["posing",{"_index":1363,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["position",{"_index":379,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["possibile",{"_index":434,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["possible",{"_index":1027,"title":{},"body":{"index.html":{}}}],["potential",{"_index":1134,"title":{},"body":{"index.html":{}}}],["power",{"_index":1108,"title":{},"body":{"index.html":{}}}],["powered",{"_index":992,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":1099,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["practice",{"_index":409,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["precisely",{"_index":1021,"title":{},"body":{"index.html":{}}}],["presents",{"_index":1757,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["preserves",{"_index":1690,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["pressed",{"_index":679,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["prevent",{"_index":658,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["preview",{"_index":333,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["previews",{"_index":417,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["previously",{"_index":551,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{}}}],["primary",{"_index":1792,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["private",{"_index":1701,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["probably",{"_index":201,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["problem",{"_index":1129,"title":{},"body":{"index.html":{}}}],["problems",{"_index":1228,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["procedure",{"_index":1715,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["process",{"_index":1684,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["produced",{"_index":318,"title":{},"body":{"injectables/DndService.html":{}}}],["product",{"_index":1452,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["program",{"_index":1076,"title":{},"body":{"index.html":{}}}],["progress",{"_index":451,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["project",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["projected",{"_index":798,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["properties",{"_index":44,"title":{"properties.html":{}},"body":{"interfaces/BackendInput.html":{},"interfaces/Connector.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/FactoryArgs.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["property",{"_index":553,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["props",{"_index":1769,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["props.someproperty",{"_index":1771,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["props.type",{"_index":1836,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["prospective",{"_index":1602,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["provide",{"_index":133,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["providednd",{"_index":898,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providednd(backendinput",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provider",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":415,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["providing",{"_index":38,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["public",{"_index":281,"title":{},"body":{"injectables/DndService.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["pulls",{"_index":406,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["purely",{"_index":396,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["put",{"_index":692,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["queries",{"_index":303,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["query",{"_index":1078,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["quick",{"_index":1766,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["quickstart",{"_index":997,"title":{"additional-documentation/quickstart.html":{}},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["quite",{"_index":1098,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["rapidly",{"_index":1405,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["rare",{"_index":510,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["rarely",{"_index":507,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["re",{"_index":1018,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["react",{"_index":189,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["react.component",{"_index":1776,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["react/react",{"_index":1785,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["read",{"_index":431,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["reading",{"_index":1435,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["real",{"_index":1289,"title":{},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["really",{"_index":1509,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rears",{"_index":1244,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["reasons",{"_index":730,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["received",{"_index":775,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["receivehandlerid",{"_index":231,"title":{},"body":{"interfaces/Connector.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["receivehandlerid(handlerid",{"_index":233,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["receivehandlerid(sourceid",{"_index":632,"title":{},"body":{"classes/DragSourceMonitorClass.html":{}}}],["receivehandlerid(targetid",{"_index":765,"title":{},"body":{"classes/DropTargetMonitorClass.html":{}}}],["receivemonitor",{"_index":826,"title":{},"body":{"classes/Target.html":{}}}],["receivemonitor(monitor",{"_index":827,"title":{},"body":{"classes/Target.html":{}}}],["receivetype",{"_index":78,"title":{},"body":{"classes/Connection.html":{}}}],["receivetype(type",{"_index":113,"title":{},"body":{"classes/Connection.html":{}}}],["recent",{"_index":1573,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["recently",{"_index":1894,"title":{},"body":{"additional-documentation/testing.html":{}}}],["recognises",{"_index":673,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["recommended",{"_index":1330,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["reconnect",{"_index":232,"title":{},"body":{"interfaces/Connector.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["reconnector",{"_index":806,"title":{"classes/Reconnector.html":{}},"body":{"classes/Reconnector.html":{},"coverage.html":{}}}],["recorded",{"_index":609,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["rectangle",{"_index":1346,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["red",{"_index":1713,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["reduce",{"_index":384,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["redundant",{"_index":1583,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["redux",{"_index":59,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["refer",{"_index":529,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["reference",{"_index":181,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"changelog.html":{},"additional-documentation/translating-react-code.html":{}}}],["refers",{"_index":1277,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["reflected",{"_index":506,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["registered",{"_index":316,"title":{},"body":{"injectables/DndService.html":{}}}],["registerhandler",{"_index":787,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["registers",{"_index":1201,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["registersource",{"_index":921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["registersource(type",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["registertarget",{"_index":923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["registertarget(type",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["regular",{"_index":1279,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["related",{"_index":525,"title":{},"body":{"interfaces/DragSource.html":{},"index.html":{}}}],["relative",{"_index":479,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["released",{"_index":1139,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":458,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["remember",{"_index":1294,"title":{},"body":{"additional-documentation/guide.html":{}}}],["reminded",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":869,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["renamed",{"_index":1824,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["renaming",{"_index":1247,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["render",{"_index":353,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["rendered",{"_index":360,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/testing.html":{}}}],["rendering",{"_index":330,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["renders",{"_index":1515,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["repeat(8",{"_index":1529,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replace",{"_index":1693,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replacing",{"_index":1620,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replay",{"_index":1572,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replicate",{"_index":599,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["repository",{"_index":1148,"title":{},"body":{"properties.html":{}}}],["represent",{"_index":123,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["representing",{"_index":607,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["represents",{"_index":7,"title":{},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{}}}],["require",{"_index":142,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/testing.html":{}}}],["required",{"_index":684,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{}}}],["requires",{"_index":1237,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resolve",{"_index":1286,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resolving",{"_index":1257,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resorting",{"_index":517,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["respectively",{"_index":1206,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["respond",{"_index":1292,"title":{},"body":{"additional-documentation/guide.html":{}}}],["responsible",{"_index":1438,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rest",{"_index":1845,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["result",{"_index":603,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["result.dropeffect",{"_index":676,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["resulting",{"_index":1386,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["results",{"_index":32,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["resurrected",{"_index":715,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["retain",{"_index":721,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{}}}],["return",{"_index":162,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["returned",{"_index":157,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["returning",{"_index":611,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["reusable",{"_index":802,"title":{},"body":{"interfaces/Offset.html":{}}}],["reuse",{"_index":401,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["rgba(0,0,0,0",{"_index":1739,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["right",{"_index":489,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["root",{"_index":799,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{}}}],["rows",{"_index":1531,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ruin",{"_index":1687,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rules",{"_index":1052,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["run",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["runs",{"_index":155,"title":{},"body":{"interfaces/ConnectionBase.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["rxjs",{"_index":8,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"dependencies.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["rxjs/operators",{"_index":1727,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sake",{"_index":1533,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["same",{"_index":23,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["sane",{"_index":1205,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["save",{"_index":1385,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["scalars",{"_index":183,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["scope",{"_index":1581,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["screen",{"_index":1369,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["screenshot",{"_index":337,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["screenshotting",{"_index":499,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["seamlessly",{"_index":1229,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["seconds",{"_index":1061,"title":{},"body":{"index.html":{}}}],["section",{"_index":1471,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["see",{"_index":57,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["seem",{"_index":1634,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["seen",{"_index":1709,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["selecting",{"_index":1371,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["selector",{"_index":462,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sense",{"_index":1512,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sensible",{"_index":509,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["separate",{"_index":393,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["separated",{"_index":1623,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["serves",{"_index":1649,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["service",{"_index":1577,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["set",{"_index":302,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["setdroptargettype(t",{"_index":748,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["setting",{"_index":577,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["settype",{"_index":79,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["settype(type",{"_index":114,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{}}}],["settype/settypes",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settypes",{"_index":80,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["settypes(type",{"_index":117,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["shallow",{"_index":758,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["shallowequal",{"_index":184,"title":{},"body":{"interfaces/ConnectionBase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["shallowequal(obja",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shortcut",{"_index":576,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["shorthand",{"_index":1271,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["shouldn't",{"_index":731,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{}}}],["show",{"_index":1284,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["showoverlay",{"_index":1730,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["shows",{"_index":642,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["sick",{"_index":1113,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":1216,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["similar",{"_index":712,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["simple",{"_index":246,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["simpler",{"_index":776,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["simply",{"_index":271,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["simulate",{"_index":547,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["simulation",{"_index":1858,"title":{},"body":{"additional-documentation/testing.html":{}}}],["single",{"_index":1333,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["situations",{"_index":1320,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["sixtyfour",{"_index":1517,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["size",{"_index":1464,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sized",{"_index":1336,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["sizes",{"_index":482,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["slash",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["slightly",{"_index":1663,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["small",{"_index":175,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["smaller",{"_index":1365,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["smart",{"_index":394,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["solid",{"_index":1527,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["solution",{"_index":1580,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["solutions",{"_index":1035,"title":{},"body":{"index.html":{}}}],["solve",{"_index":1227,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["somebackend",{"_index":1261,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["somedragsourceconnection.connectdragpreview(img",{"_index":1383,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["someimaginarybackendwithnamedexports",{"_index":1248,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["someone",{"_index":1708,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["someproperty",{"_index":1770,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["something",{"_index":372,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sometimes",{"_index":341,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["somewhere",{"_index":407,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sortable",{"_index":1088,"title":{},"body":{"index.html":{}}}],["source",{"_index":293,"title":{"classes/Source.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["source's",{"_index":778,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["source.ts",{"_index":920,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sourceconnection",{"_index":903,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceconnector",{"_index":819,"title":{"classes/SourceConnector.html":{}},"body":{"classes/SourceConnector.html":{},"coverage.html":{}}}],["sourceconstructor",{"_index":824,"title":{"interfaces/SourceConstructor.html":{}},"body":{"interfaces/SourceConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceid",{"_index":623,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/Source.html":{}}}],["sources",{"_index":326,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["space",{"_index":1493,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["span",{"_index":1457,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["spec",{"_index":147,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Source.html":{},"classes/Target.html":{},"miscellaneous/functions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["spec.hover?.(monitor",{"_index":154,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["special",{"_index":349,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["specific",{"_index":1043,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["specification.ts",{"_index":651,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"coverage.html":{}}}],["specifics",{"_index":1217,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["specified",{"_index":140,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["specifies",{"_index":477,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["specify",{"_index":457,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{}}}],["specifying",{"_index":641,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["specs",{"_index":1267,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["spirit",{"_index":1711,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["spot",{"_index":361,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["square",{"_index":1442,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squarecomponent",{"_index":1439,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squarecomponents",{"_index":1624,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squares",{"_index":1445,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["src/.../arecollectsequal.ts",{"_index":953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../areoptionsequal.ts",{"_index":954,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../connection",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../createsourceconnector.ts",{"_index":955,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createsourcefactory.ts",{"_index":956,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createsourcemonitor.ts",{"_index":957,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../createtargetconnector.ts",{"_index":958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createtargetfactory.ts",{"_index":959,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createtargetmonitor.ts",{"_index":960,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../dnd",{"_index":962,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../invariant.ts",{"_index":961,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../register",{"_index":963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../shallowequal.ts",{"_index":964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tokens.ts",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../type",{"_index":1158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../wrappers.ts",{"_index":1154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/connection",{"_index":120,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{}}}],["src/connector.ts",{"_index":5,"title":{},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"coverage.html":{}}}],["src/connectors.ts",{"_index":467,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"coverage.html":{}}}],["src/dnd",{"_index":35,"title":{},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/drag",{"_index":650,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"coverage.html":{}}}],["src/drop",{"_index":766,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"coverage.html":{}}}],["src/internal/connection",{"_index":70,"title":{},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/internal/createsourceconnector.ts",{"_index":229,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createsourcefactory.ts",{"_index":813,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createsourcemonitor.ts",{"_index":621,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/internal/createtargetconnector.ts",{"_index":829,"title":{},"body":{"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createtargetfactory.ts",{"_index":825,"title":{},"body":{"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createtargetmonitor.ts",{"_index":763,"title":{},"body":{"classes/DropTargetMonitorClass.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/internal/drag",{"_index":436,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["src/internal/invariant.ts",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/reconnector.ts",{"_index":807,"title":{},"body":{"classes/Reconnector.html":{},"coverage.html":{}}}],["src/internal/register",{"_index":919,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/layer",{"_index":445,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"coverage.html":{}}}],["src/monitor",{"_index":788,"title":{},"body":{"interfaces/MonitorBase.html":{},"coverage.html":{}}}],["src/source",{"_index":584,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"coverage.html":{}}}],["src/target",{"_index":751,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"coverage.html":{}}}],["src/tokens.ts",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/type",{"_index":800,"title":{},"body":{"interfaces/Offset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/arecollectsequal.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/areoptionsequal.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/shallowequal.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/wrappers.ts",{"_index":1159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stage",{"_index":1683,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["stamping",{"_index":1056,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":464,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["standard",{"_index":13,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["start",{"_index":359,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["started",{"_index":375,"title":{"changelog.html":{},"index.html":{}},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{}}}],["starts",{"_index":495,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["state",{"_index":168,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["statements",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":240,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["statically",{"_index":1258,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["stationary",{"_index":1669,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["step",{"_index":1639,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["steps",{"_index":1211,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["still",{"_index":1539,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["store",{"_index":1303,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["strange",{"_index":1314,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["strategy",{"_index":1627,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["strictly",{"_index":759,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"index.html":{}}}],["string",{"_index":115,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/MonitorBase.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["strings",{"_index":1839,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["string|symbol",{"_index":1842,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["strong",{"_index":662,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["structure",{"_index":1338,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["struggle",{"_index":1117,"title":{},"body":{"index.html":{}}}],["style",{"_index":190,"title":{},"body":{"interfaces/ConnectionBase.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["styles",{"_index":1460,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["styling",{"_index":503,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["sub",{"_index":999,"title":{},"body":{"index.html":{}}}],["subj",{"_index":148,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subj.next",{"_index":153,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subject",{"_index":150,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["subs",{"_index":1325,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["subscribe",{"_index":212,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscribe(callback",{"_index":161,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subscriber",{"_index":350,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["subscribers",{"_index":1574,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["subscribes",{"_index":1817,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["subscribing",{"_index":523,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscription",{"_index":9,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscription#add",{"_index":24,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["subscription.add",{"_index":125,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subscription.add(conn",{"_index":1323,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["subscriptionlike",{"_index":14,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{}}}],["subscriptions",{"_index":205,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["successful",{"_index":1631,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["such",{"_index":511,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["suffice",{"_index":332,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["sufficient",{"_index":701,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["sufficiently",{"_index":1281,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["superpowers",{"_index":1093,"title":{},"body":{"index.html":{}}}],["supplied",{"_index":405,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"miscellaneous/variables.html":{}}}],["supplies",{"_index":1815,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["supply",{"_index":1835,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["supplying",{"_index":1854,"title":{},"body":{"additional-documentation/testing.html":{}}}],["support",{"_index":520,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["supports",{"_index":267,"title":{},"body":{"injectables/DndService.html":{}}}],["sure",{"_index":368,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["switch",{"_index":1230,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["symbol",{"_index":116,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/MonitorBase.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["symbols",{"_index":1841,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["syntax",{"_index":1266,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["t",{"_index":749,"title":{},"body":{"directives/DropTargetDirective.html":{},"classes/Source.html":{},"classes/Target.html":{}}}],["table",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1475,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["take",{"_index":1022,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["target",{"_index":273,"title":{"classes/Target.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["target(s",{"_index":1895,"title":{},"body":{"additional-documentation/testing.html":{}}}],["target.ts",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["targetconnection",{"_index":904,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetconnector",{"_index":828,"title":{"classes/TargetConnector.html":{}},"body":{"classes/TargetConnector.html":{},"coverage.html":{}}}],["targetconstructor",{"_index":832,"title":{"interfaces/TargetConstructor.html":{}},"body":{"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetid",{"_index":764,"title":{},"body":{"classes/DropTargetMonitorClass.html":{}}}],["targets",{"_index":315,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["taste",{"_index":1109,"title":{},"body":{"index.html":{}}}],["tconnector",{"_index":98,"title":{},"body":{"classes/Connection.html":{},"interfaces/Connector.html":{}}}],["tear",{"_index":1304,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["teardown",{"_index":95,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["teardownlogic",{"_index":22,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["technically",{"_index":724,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["tedious",{"_index":252,"title":{},"body":{"injectables/DndService.html":{}}}],["tell",{"_index":1665,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["template",{"_index":207,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"directives/DropTargetDirective.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["template's",{"_index":1827,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["template:example",{"_index":1728,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["templates",{"_index":1005,"title":{},"body":{"index.html":{}}}],["tempted",{"_index":691,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["ten",{"_index":1319,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["terms",{"_index":1822,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["test",{"_index":605,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/testing.html":{}}}],["testable",{"_index":1855,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbackend",{"_index":1868,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed",{"_index":1871,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.configuretestingmodule",{"_index":1880,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.createcomponent(mycomponent",{"_index":1884,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.get(drag_drop_manager",{"_index":1882,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testing",{"_index":548,"title":{"additional-documentation/testing.html":{}},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/testing.html":{}}}],["tests",{"_index":1862,"title":{},"body":{"additional-documentation/testing.html":{}}}],["text",{"_index":1372,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["that's",{"_index":528,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/quickstart.html":{}}}],["there's",{"_index":1120,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1808,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["thing",{"_index":1119,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["things",{"_index":1037,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["think",{"_index":1123,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["this.black",{"_index":1480,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.cat.id",{"_index":1306,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.collected$.pipe",{"_index":1735,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.collected$.pipe(map(c",{"_index":1731,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.currentposition",{"_index":1605,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.destroy",{"_index":275,"title":{},"body":{"injectables/DndService.html":{}}}],["this.destroy.add(xxx.subscribe",{"_index":259,"title":{},"body":{"injectables/DndService.html":{}}}],["this.destroy.unsubscribe",{"_index":276,"title":{},"body":{"injectables/DndService.html":{}}}],["this.dnd.dragsource",{"_index":665,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.dragsource(\"cat",{"_index":1305,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.dragsource('dragme",{"_index":1348,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["this.dnd.dragsource('paper",{"_index":1270,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.dnd.dragsource('test",{"_index":1899,"title":{},"body":{"additional-documentation/testing.html":{}}}],["this.dnd.dragsource(itemtypes.knight",{"_index":1660,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.dnd.dragsource(null",{"_index":559,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.dnd.droptarget",{"_index":274,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{}}}],["this.dnd.droptarget('cat",{"_index":1394,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["this.dnd.droptarget('dragme",{"_index":1355,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["this.dnd.droptarget('test",{"_index":1900,"title":{},"body":{"additional-documentation/testing.html":{}}}],["this.dnd.droptarget([\"cat",{"_index":1307,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.droptarget(itemtypes.knight",{"_index":1694,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.dragpreview.hook",{"_index":823,"title":{},"body":{"classes/SourceConnector.html":{}}}],["this.dragsource.hook",{"_index":822,"title":{},"body":{"classes/SourceConnector.html":{}}}],["this.droptarget.hook",{"_index":831,"title":{},"body":{"classes/TargetConnector.html":{}}}],["this.fireaction(monitor.getitem",{"_index":1781,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.game.canmoveknight(pos",{"_index":1616,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.canmoveknight(this.position",{"_index":1699,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.knightposition",{"_index":1578,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.moveknight(pos",{"_index":1597,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.moveknight(this.position",{"_index":1700,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.id",{"_index":666,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["this.itemsource.destroy",{"_index":1784,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.itemsource.listen(monitor",{"_index":1782,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.knightposition$.next(to",{"_index":1576,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightposition$.subscribe(kp",{"_index":1604,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.connectdragpreview(img",{"_index":1750,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.listen(monitor",{"_index":1672,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.unsubscribe",{"_index":1661,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.layer.unsubscribe",{"_index":1315,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.method",{"_index":1264,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.model.parentid.tostring",{"_index":566,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.notation",{"_index":1812,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.papercount",{"_index":1273,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.position",{"_index":1692,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.props",{"_index":1778,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.someproperty",{"_index":601,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/translating-react-code.html":{}}}],["this.source.connectdragpreview(img",{"_index":539,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.source.listen(m",{"_index":1418,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/testing.html":{}}}],["this.source.settype(t",{"_index":571,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.source.unsubscribe",{"_index":1309,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["this.subs",{"_index":1326,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.subs.add(myservice.subscribe",{"_index":1327,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.subs.unsubscribe",{"_index":1329,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.target.listen(m",{"_index":1398,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["this.target.listen(monitor",{"_index":193,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["this.target.settype(\"parent_",{"_index":565,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.target.settype(this.type",{"_index":562,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.target.unsubscribe",{"_index":1310,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["those",{"_index":171,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["though",{"_index":723,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["three",{"_index":1295,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["through",{"_index":178,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["throw",{"_index":1595,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tick",{"_index":498,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["tie",{"_index":323,"title":{},"body":{"injectables/DndService.html":{}}}],["time",{"_index":423,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["timely",{"_index":426,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["times",{"_index":305,"title":{},"body":{"injectables/DndService.html":{},"index.html":{}}}],["tiny",{"_index":1429,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tmonitor",{"_index":109,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{}}}],["to.x",{"_index":1609,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["to.y",{"_index":1611,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["token",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["told",{"_index":561,"title":{},"body":{"interfaces/DragSource.html":{}}}],["tons",{"_index":1031,"title":{},"body":{"index.html":{}}}],["tool",{"_index":1070,"title":{},"body":{"index.html":{}}}],["toolkit",{"_index":986,"title":{},"body":{"index.html":{}}}],["top",{"_index":491,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["touch",{"_index":1184,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["touchbackend",{"_index":65,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["touching",{"_index":1370,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["traditional",{"_index":1048,"title":{},"body":{"index.html":{}}}],["transit",{"_index":797,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["translate",{"_index":1028,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["translated",{"_index":480,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["translating",{"_index":1029,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["translation",{"_index":1432,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["transparent",{"_index":1675,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["trapped",{"_index":1560,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["trash",{"_index":1054,"title":{},"body":{"index.html":{}}}],["trello.com",{"_index":1066,"title":{},"body":{"index.html":{}}}],["trick",{"_index":1585,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["triple",{"_index":859,"title":{},"body":{"changelog.html":{}}}],["troubleshooting",{"_index":1241,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["true",{"_index":449,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["truth",{"_index":1006,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["truthy",{"_index":1587,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["try",{"_index":693,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["trying",{"_index":1859,"title":{},"body":{"additional-documentation/testing.html":{}}}],["tslib",{"_index":865,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["tslint",{"_index":870,"title":{},"body":{"changelog.html":{}}}],["turn",{"_index":1628,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["turning",{"_index":1491,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tutorial",{"_index":998,"title":{"additional-documentation/chess-tutorial.html":{}},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["two",{"_index":653,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["type",{"_index":28,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["type(s",{"_index":1838,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["type(t",{"_index":570,"title":{},"body":{"interfaces/DragSource.html":{}}}],["type_dynamic",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1151,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":550,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["typeerror",{"_index":1242,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["typeortypearray",{"_index":92,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":146,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["types.ts",{"_index":121,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{}}}],["typescript",{"_index":657,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["typical",{"_index":1796,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["typically",{"_index":352,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["typing",{"_index":663,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["typo",{"_index":743,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["ui",{"_index":1367,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ultra",{"_index":1563,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["undefined",{"_index":93,"title":{},"body":{"classes/Connection.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"additional-documentation/quickstart.html":{}}}],["under",{"_index":377,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{}}}],["underlying",{"_index":1691,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["understand",{"_index":568,"title":{},"body":{"interfaces/DragSource.html":{}}}],["understandable",{"_index":1756,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["unicode",{"_index":1458,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["unidirectional",{"_index":1008,"title":{},"body":{"index.html":{}}}],["unique",{"_index":1357,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["unlike",{"_index":1571,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["unmounted",{"_index":713,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["unsubscribe",{"_index":81,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"classes/Reconnector.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["unsubscribed",{"_index":542,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["unsubscribefromoffsetchange",{"_index":440,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["unsubscribefromstatechange",{"_index":441,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["unsubscribing",{"_index":248,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["until",{"_index":156,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["unwanted",{"_index":1373,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["up",{"_index":264,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["update",{"_index":552,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["updated",{"_index":427,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["updates",{"_index":1408,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["url",{"_index":1747,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["urls",{"_index":1749,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["usable",{"_index":1425,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["usage",{"_index":1849,"title":{},"body":{"additional-documentation/testing.html":{}}}],["use",{"_index":64,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["used",{"_index":37,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["useful",{"_index":126,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["user",{"_index":647,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{}}}],["users",{"_index":1116,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["uses",{"_index":1068,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["using",{"_index":268,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["usually",{"_index":531,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["valid",{"_index":1712,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["value",{"_index":443,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["values",{"_index":1091,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["vanish",{"_index":1643,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["variable",{"_index":208,"title":{},"body":{"interfaces/ConnectionBase.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["variables",{"_index":1160,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variably",{"_index":1335,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["vector",{"_index":792,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["version",{"_index":11,"title":{},"body":{"interfaces/AddSubscription.html":{},"directives/DropTargetDirective.html":{},"changelog.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["vertical",{"_index":490,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["very",{"_index":594,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["via",{"_index":159,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["view",{"_index":1487,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["viewport",{"_index":791,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["visible",{"_index":1004,"title":{},"body":{"index.html":{}}}],["visual",{"_index":1080,"title":{},"body":{"index.html":{}}}],["visuals",{"_index":397,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["void",{"_index":31,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}}}],["voil",{"_index":1617,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["vs",{"_index":1278,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["vue",{"_index":1121,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1380,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["want",{"_index":202,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wanting",{"_index":1107,"title":{},"body":{"index.html":{}}}],["warned",{"_index":1105,"title":{},"body":{"index.html":{}}}],["watching",{"_index":1115,"title":{},"body":{"index.html":{}}}],["way",{"_index":1193,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ways",{"_index":1322,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["we'll",{"_index":1456,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["we're",{"_index":1317,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["wealth",{"_index":1128,"title":{},"body":{"index.html":{}}}],["web",{"_index":1753,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["weight",{"_index":1462,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["weird",{"_index":1636,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["well",{"_index":1185,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["what's",{"_index":1655,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whatever",{"_index":1474,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whether",{"_index":51,"title":{},"body":{"interfaces/BackendInput.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["white",{"_index":1441,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whole",{"_index":1341,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["width",{"_index":1501,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["wish",{"_index":554,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["withchangedetection",{"_index":814,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["withchangedetection(fn",{"_index":818,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["within",{"_index":1354,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["without",{"_index":137,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["won't",{"_index":522,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["work",{"_index":512,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["works",{"_index":1015,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["worth",{"_index":1434,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["wrap",{"_index":1521,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wrapper",{"_index":1689,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wrapper(dndservice",{"_index":145,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["wrappers",{"_index":128,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["wrapping",{"_index":1524,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["write",{"_index":569,"title":{},"body":{"interfaces/DragSource.html":{}}}],["writing",{"_index":127,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["written",{"_index":1032,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["x",{"_index":804,"title":{},"body":{"interfaces/Offset.html":{},"additional-documentation/chess-tutorial.html":{}}}],["x,y",{"_index":790,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["xy",{"_index":803,"title":{},"body":{"interfaces/Offset.html":{}}}],["xy(i",{"_index":1549,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["y",{"_index":805,"title":{},"body":{"interfaces/Offset.html":{},"additional-documentation/chess-tutorial.html":{}}}],["yarn",{"_index":995,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["yellow",{"_index":1740,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["yes",{"_index":289,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTargetMonitor.html":{}}}],["you'd",{"_index":1656,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["you'll",{"_index":1507,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["you're",{"_index":346,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["you've",{"_index":1676,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["yourself",{"_index":347,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["zebra",{"_index":1308,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["zindex",{"_index":1741,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["zone",{"_index":90,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/Source.html":{},"classes/Target.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["zone.js",{"_index":950,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AddSubscription.html":{"url":"interfaces/AddSubscription.html","title":"interface - AddSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AddSubscription\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connector.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an RxJS Subscription, with multi-version compatibility.\nThe standard SubscriptionLike does not contain an add() method.\n\n            \n\n            \n                Extends\n            \n            \n                        SubscriptionLike\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardownLogic: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n                        Same as RxJS Subscription#add\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardownLogic\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BackendInput.html":{"url":"interfaces/BackendInput.html","title":"interface - BackendInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BackendInput\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-module.ts\n        \n\n\n            \n                Description\n            \n            \n                Used for providing backends to DndModule.\nYou can configure your backend with options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backend\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            debug\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backend:     BackendFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BackendFactory\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A plain backend, for example the HTML5Backend.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether dnd-core should enable debugging, which lets you see dnd-core actions\nin the Redux extension for Chrome.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any configuration your backend accepts. Use this with the TouchBackend or the MultiBackend,\nfor example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Connection.html":{"url":"classes/Connection.html","title":"class - Connection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Connection\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                connect\n                            \n                            \n                                connectDragPreview\n                            \n                            \n                                connectDragSource\n                            \n                            \n                                connectDropTarget\n                            \n                            \n                                getHandlerId\n                            \n                            \n                                listen\n                            \n                            \n                                receiveType\n                            \n                            \n                                setType\n                            \n                            \n                                setTypes\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(factoryArgs: FactoryArgs, manager: DragDropManager, dndZone: Zone, initialType: TypeOrTypeArray | undefined)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        factoryArgs\n                                                  \n                                                        \n                                                                    FactoryArgs\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    DragDropManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dndZone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialType\n                                                  \n                                                        \n                                                                        TypeOrTypeArray | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardown\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect(fn: (connector: TConnector) => void)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragPreview\n                        \n                    \n                \n            \n            \n                \nconnectDragPreview(node: Node, options: DragPreviewOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragPreviewOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragSource\n                        \n                    \n                \n            \n            \n                \nconnectDragSource(node: Node, options: DragSourceOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragSourceOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDropTarget\n                        \n                    \n                \n            \n            \n                \nconnectDropTarget(node: Node)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapFn: (monitor: TMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveType\n                        \n                    \n                \n            \n            \n                \nreceiveType(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            TypeOrTypeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: string | symbol)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        string | symbol\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTypes\n                        \n                    \n                \n            \n            \n                \nsetTypes(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            TypeOrTypeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        closed\n                    \n                \n\n                \n                    \n                        getclosed()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConnectionBase.html":{"url":"interfaces/ConnectionBase.html","title":"interface - ConnectionBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConnectionBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                A base type to represent a DOM connection.\n\n            \n\n            \n                Extends\n            \n            \n                        SubscriptionLike\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                                \n                                    \n                                        unsubscribe\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n                        Same as RxJS Subscription.add().\nUseful, for example, for writing wrappers for the DndService methods,\nwhich might internally listen()/subscribe to DropTargetSpec and provide\na convenient callback after you hover without dropping or exiting for a specified\nduration. That would require the following pattern:\nExample :function wrapper(dndService, types, spec, callback) {\n  let subj = new Subject();\n  let dt = dndService.dropTarget(types, {\n      ...spec,\n      hover: monitor => {\n      subj.next();\n      spec.hover?.(monitor);\n    }\n  });\n  // runs the callback until the returned connection\n  // is destroyed via unsubscribe()\n  dt.add(subj.pipe( ... ).subscribe(callback))\n  return dt;\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardown\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapTo: (monitor: TMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n                        A connection maintains a subscription to dnd-core's drag state\nchanges. This function is how you are notified of those changes.\nThis function is essentially RxJS Observable.map with one small\noptimization: it runs the output of\nthe function you provide through distinctUntilChanged, and checks\nreference equality (===) for scalars and shallowEqual for Objects.\nBecause of #2, you can happily emulate react-dnd-style code like:\nExample :collected$ = this.target.listen(monitor => ({\n  isDragging: monitor.isDragging(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop()\n}));... in which case you probably want to use the *ngIf as pattern for\n grouping subscriptions into one bound template variable:\nExample :\n  {{c.isDragging ? 'dragging': null}}\n  ...\nYou can also subscribe one-by-one, with isDragging$ = listen(m => m.isDragging()).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapTo\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n                        This method MUST be called, however you choose to, when ngOnDestroy() fires.\nIf you don't, you will leave subscriptions hanging around that will fire\ncallbacks on components that no longer exist.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Connector.html":{"url":"interfaces/Connector.html","title":"interface - Connector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Connector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceConnector.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hooks\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        receiveHandlerId\n                                    \n                                \n                                \n                                    \n                                        reconnect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                handlerId\n                                            \n                                                        Identifier | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reconnect\n                        \n                    \n                \n            \n            \n                \nreconnect()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hooks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hooks:         TConnector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TConnector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DndModule.html":{"url":"modules/DndModule.html","title":"module - DndModule","body":"\n                   \n\n\n\n\n    Modules\n    DndModule\n\n\n\n\n    \n        Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dnd-module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            EXPORTS\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EXPORTS\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(backendInput: BackendInput)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backendInput\n                                            \n                                                            BackendInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DndService.html":{"url":"injectables/DndService.html","title":"injectable - DndService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DndService\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connector.ts\n        \n\n\n            \n                Description\n            \n            \n                For a simple component, unsubscribing is as easy as connection.unsubscribe() in ngOnDestroy()\nIf your components have lots of subscriptions, it can get tedious having to\nunsubscribe from all of them, and you might forget. A common pattern is to create an RxJS Subscription\n(maybe called destroy), to use this.destroy.add(xxx.subscribe(...))\nand to call destroy.unsubscribe() once to clean up all of them. @ng-dnd/core\nsupports this pattern with by using the subscription parameter on the\nconstructors. Simply:\nExample :import { Subscription } from 'rxjs';\n// ...\ndestroy = new Subscription();\ntarget = this.dnd.dropTarget({\n  // ...\n}, this.destroy);\nngOnDestroy() { this.destroy.unsubscribe(); }It is a good habit for avoiding leaked subscriptions, because .\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dragLayer\n                            \n                            \n                                    Public\n                                dragSource\n                            \n                            \n                                    Public\n                                dropTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dragLayer\n                        \n                    \n                \n            \n            \n                \n                        \n                    dragLayer(subscription?: AddSubscription)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    Item\n                            \n                        \n                    \n\n            \n                \n                        This method creates a DragLayer object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subscription\n                                            \n                                                            AddSubscription\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DragLayer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dragSource\n                        \n                    \n                \n            \n            \n                \n                        \n                    dragSource(type: string | symbol | null, spec: DragSourceSpec, subscription?: AddSubscription)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    Item\n                                    DropResult\n                            \n                        \n                    \n\n            \n                \n                        This method creates a DragSource object. It represents a drag\nsource and its behaviour, and can be connected to a DOM element by\nassigning it to the [dragSource] directive on that element in your\ntemplate.\nIt is the corollary of react-dnd's\nDragSource.\nThe spec argument (DragSourceSpec) is a set of queries and\ncallbacks that are called at appropriate times by the internals. The\nqueries are for asking your component whether to drag/listen and what\nitem data to hoist up; the callback (just 1) is for notifying you when\nthe drag ends.\nOnly the drop targets registered for the same type will\nreact to the items produced by this drag source. If you want a dynamic\ntype, pass null as the type; and call DragSource in\na lifecycle hook.\nconnection to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        string | symbol | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                spec\n                                            \n                                                            DragSourceSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                subscription\n                                            \n                                                            AddSubscription\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    An RxJS Subscription to tie the lifetime of the\nconnection to.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DragSource\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dropTarget\n                        \n                    \n                \n            \n            \n                \n                        \n                    dropTarget(types: TypeOrTypeArray | null, spec: DropTargetSpec, subscription?: AddSubscription)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    Item\n                                    DropResult\n                            \n                        \n                    \n\n            \n                \n                        This drop target will only react to the items produced by the drag sources\nof the specified type or types.\nIf you want a dynamic type, pass null as the type; and call\nDropTarget in a lifecycle hook.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                types\n                                            \n                                                            TypeOrTypeArray | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                spec\n                                            \n                                                            DropTargetSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subscription\n                                            \n                                                            AddSubscription\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DropTarget\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragLayer.html":{"url":"interfaces/DragLayer.html","title":"interface - DragLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragLayer\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                For many use cases, the default rendering of the HTML5 backend should suffice.\nHowever, its drag preview has certain limitations. For example, it has to be an\nexisting node screenshot or an image, and it cannot change midflight.\nSometimes you might want to perform the custom rendering. This also becomes\nnecessary if you're using a custom backend. DragLayer lets you perform the\nrendering of the drag preview yourself.\nA drag layer is a special subscriber to the global drag state. It is called\na 'layer', not just a subscriber, because it is typically used to render custom\nelements that follow the mouse, above all other elements. The data flows like\nso:\nExample :drag start => global state => drag source => no preview\n                           => drag layer  => preview rendered on the spot\ndrag moved => global state => drag layer  => preview moves\ndrag ends  => global state => drag layer  => preview erasedTo use a drag layer as designed:\n\nCreate a drag layer: DndService.dragLayer. Make sure to unsubscribe from\nit in ngOnDestroy().\n\nListen to global drag state changes with DragLayer.listen. These are all available on DragLayerMonitor:\nwhether something is being dragged, what type it is, where the drag started, where the dragged element is now.\n\nIf dragging, render a custom preview under the current mouse position,\ndepending on the item type, in a position: fixed 'layer'. You may like to\nuse an *ngSwitch on the type, rather than one drag layer per type, simply\nto reduce code duplication.\n\n\nYou can see an example of a drag layer over on the Examples page.\nOne piece of advice for using drag layers effectively is to separate 'smart' and\n'dumb' components. If you have one component purely for visuals, which does all\ninput through @Input() and all interactivity through @Output() events, then\nyou can reuse it to display a drag preview based on either data in the item from\nDragSourceSpec.beginDrag, or supplied by a 'smart' component which pulls\ndata from somewhere else using only an id. This practice is even more\nimportant if you are using, or planning on using, anything other than the HTML5\nbackend, because no other backend provides automatic previews. In those cases\nyou must handle every draggable type in a drag layer to have any previews at\nall.\nOr, you could just use @ng-dnd/multi-backend.\n\n            \n\n            \n                Extends\n            \n            \n                            ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        listen\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapTo: (monitor: DragLayerMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n                        For listen functions in general, see ConnectionBase.\nThis listen function is called any time the global drag state\nchanges, including the coordinate changes, so that your component can\nprovide a timely updated custom drag preview. You can ask the monitor for\nthe client coordinates of the dragged item. Read the DragLayerMonitor\ndocs to see all the different possibile coordinates you might subscribe to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapTo\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DragLayerConnectionClass.html":{"url":"classes/DragLayerConnectionClass.html","title":"class - DragLayerConnectionClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DragLayerConnectionClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/drag-layer-connection.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragLayer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTicking\n                            \n                            \n                                unsubscribeFromOffsetChange\n                            \n                            \n                                unsubscribeFromStateChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                listen\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: DragDropManager, zone: Zone)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    DragDropManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTicking\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribeFromOffsetChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribeFromStateChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardown\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapFn: (monitor: DragLayerMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        closed\n                    \n                \n\n                \n                    \n                        getclosed()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragLayerMonitor.html":{"url":"interfaces/DragLayerMonitor.html","title":"interface - DragLayerMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragLayerMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available inside DragLayer.\n\n            \n\n            \n                Extends\n            \n            \n                            MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n                        true if there is a drag operation in progress, false otherwise.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragPreviewDirective.html":{"url":"directives/DragPreviewDirective.html","title":"directive - DragPreviewDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragPreviewDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-directives.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to specify which element a DragSource should screenshot\nas an HTML5 drag preview.\nOnly relevant when using the HTML5 backend.\n\n            \n\n            \n                Extends\n            \n            \n                        AbstractDndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragPreview]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragPreview\n                            \n                            \n                                dragPreviewOptions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragPreview\n                    \n                \n                \n                    \n                        Type :         DragSource\n\n                    \n                \n                \n                    \n                        The drag source for which this element will be the preview.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPreviewOptions\n                    \n                \n                \n                    \n                        Type :         DragPreviewOptions\n\n                    \n                \n                \n                    \n                        Pass an options object as you would to DragSource.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPreviewOptions.html":{"url":"interfaces/DragPreviewOptions.html","title":"interface - DragPreviewOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragPreviewOptions\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide options for how to render a drag preview. See DragSource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            anchorX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            anchorY\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            captureDraggingState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offsetX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offsetY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        anchorX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchorX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A number between 0 and 1. By default, 0.5. Specifies how the\noffset relative to the drag source node is translated into the the\nhorizontal offset of the drag preview when their sizes don't match.\n0 means \"dock the preview to the left\", 0.5 means \"interpolate linearly\"\nand 1 means \"dock the preview to the right\".\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        anchorY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchorY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A number between 0 and 1. By default, 0.5. Specifies how the\noffset relative to the drag source node is translated into the the\nvertical offset of the drag preview when their sizes don't match. 0 means\n\"dock the preview to the top, 0.5 means \"interpolate linearly\" and\n1 means \"dock the preview to the bottom.\"\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        captureDraggingState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        captureDraggingState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, false. If true, the component will learn that it is being\ndragged immediately as the drag starts instead of the next tick. This\nmeans that the screenshotting would occur with monitor.isDragging()\nalready being true, and if you apply any styling like a decreased opacity\nto the dragged element, this styling will also be reflected on the\nscreenshot. This is rarely desirable, so false is a sensible default.\nHowever, you might want to set it to true in rare cases, such as if you\nwant to make the custom drag layers work in IE and you need to hide the\noriginal element without resorting to an empty drag preview which IE\ndoesn't support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offsetX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offsetX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, null. Specifies the vertical offset between the cursor and\nthe drag preview element. If offsetX has a value, anchorX won't be\nused.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offsetY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offsetY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, null. Specifies the vertical offset between the cursor and\nthe drag preview element. If offsetY has a value, anchorY won't be\nused.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSource.html":{"url":"interfaces/DragSource.html","title":"interface - DragSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSource\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Like DropTarget, it can be used just for subscribing to\ndrag state information related to a particular item type or list of types.\nYou do not have to connect it to a DOM element if that's all you want.\nTo create one, refer to DndService.\n\n            \n\n            \n                Extends\n            \n            \n                            ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connectDragPreview\n                                    \n                                \n                                \n                                    \n                                        connectDragSource\n                                    \n                                \n                                \n                                    \n                                        getHandlerId\n                                    \n                                \n                                \n                                    \n                                        setType\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragPreview\n                        \n                    \n                \n            \n            \n                \nconnectDragPreview(elementOrNode: Node, options?: DragPreviewOptions)\n                \n            \n\n\n\n\n            \n                \n                        This function allows you to connect a DOM node to your DragSource as a preview.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nYou might use an ElementRef.nativeElement, or even an\nImage.\nExample :const img = new Image();\nimg.onload = this.source.connectDragPreview(img);\nimg.src = '...';The subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DragSource already has a type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementOrNode\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragPreviewOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subscription\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragSource\n                        \n                    \n                \n            \n            \n                \nconnectDragSource(elementOrNode: Node, options?: DragSourceOptions)\n                \n            \n\n\n\n\n            \n                \n                        This function allows you to connect a DOM node to your DragSource.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nThe subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DragSource already has a type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementOrNode\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragSourceOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subscription\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n                        Returns the drag source ID that can be used to simulate the drag and drop events\nwith the testing backend.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: string | symbol)\n                \n            \n\n\n\n\n            \n                \n                        Use this method to have a dynamically typed source. If no type has\npreviously been set, it creates the subscription and allows the\n[dragSource] DOM element to be connected. If you do not need to\ndynamically update the type, you can set it once via the\nDragSourceSpec property.\nIf you wish to have a dynamic type based on an @Input() property, for\nexample, you must call setType() in either of your component's\nngOnInit or ngOnChanges methods:\nExample :@Input() type: string;\n@Input() model: { parentId: number; name: string; };\ntarget = this.dnd.dragSource(null, {\n  // ...\n});\nngOnChanges() {\n  // use what your parent component told you to\n  this.target.setType(this.type);\n  // or create groupings on the fly\n  this.target.setType(\"PARENT_\" + this.model.parentId.toString());\n}It may be more convenient or easier to understand if you write:\nExample :@Input() set type(t) {\n  this.source.setType(t);\n}\nsource = this.dnd.dragSource(null, {\n  beginDrag: () => ({ ... })\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        string | symbol\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragSourceDirective.html":{"url":"directives/DragSourceDirective.html","title":"directive - DragSourceDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragSourceDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-directives.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to connect a DragSource to an element in a component template.\n\n            \n\n            \n                Extends\n            \n            \n                        AbstractDndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragSource]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragSource\n                            \n                            \n                                dragSourceOptions\n                            \n                            \n                                dragSourceType\n                            \n                            \n                                noHTML5Preview\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragSource\n                    \n                \n                \n                    \n                        Type :         DragSource\n\n                    \n                \n                \n                    \n                        Which source to connect the DOM to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSourceOptions\n                    \n                \n                \n                    \n                        Type :         DragSourceOptions\n\n                    \n                \n                \n                    \n                        Pass an options object as you would to DragSource.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSourceType\n                    \n                \n                \n                    \n                        Type :     string | symbol\n\n                    \n                \n                \n                    \n                        Shortcut for setting a type on the connection.\nLets you use Angular binding to do it. Runs DragSource.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        noHTML5Preview\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Do not render an HTML5 preview. Only applies when using the HTML5 backend.\nIt does not use { captureDraggingState: true } for IE11 support; that is broken.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceMonitor.html":{"url":"interfaces/DragSourceMonitor.html","title":"interface - DragSourceMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available in DragSource's listen method.\n\n            \n\n            \n                Extends\n            \n            \n                            MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        canDrag\n                                    \n                                \n                                \n                                    \n                                        didDrop\n                                    \n                                \n                                \n                                    \n                                        getDropResult\n                                    \n                                \n                                \n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if NO drag operation is in progress, and the owner's\ncanDrag() returns true or is not defined.\nNote that canDrag doesn't blindly return what you supplied in\nDragSourceSpec, so it isn't very useful as a general\nsource-is-enabled/disabled flag.\nInstead, keep your canDrag logic simple, and replicate it in your template.\nExample : content Example :{\n  canDrag: () => this.someProperty\n}\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if some drop target handled the drop event; false\notherwise. Even if a target did not return a drop result, didDrop()\nreturns true. Use it inside endDrag() to test whether any drop target\nhas handled the drop. Returns false if called outside endDrag().\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n                        Returns a plain object representing the last recorded drop result. The\ndrop targets may optionally specify it by returning an object from their\ndrop() methods. When a chain of drop() is dispatched for the nested\ntargets, bottom up, any parent that explicitly returns its own result from\ndrop() overrides the child drop result previously set by the child.\nReturns null if called outside endDrag().\n\n\n                        \n                            Returns :     DropResult\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if a drag operation is in progress, and either the owner\ninitiated the drag, or its isDragging() is defined and returns true.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DragSourceMonitorClass.html":{"url":"classes/DragSourceMonitorClass.html","title":"class - DragSourceMonitorClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DragSourceMonitorClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceMonitor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragSourceMonitor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                internalMonitor\n                            \n                            \n                                sourceId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrag\n                            \n                            \n                                didDrop\n                            \n                            \n                                getClientOffset\n                            \n                            \n                                getDifferenceFromInitialOffset\n                            \n                            \n                                getDropResult\n                            \n                            \n                                getInitialClientOffset\n                            \n                            \n                                getInitialSourceClientOffset\n                            \n                            \n                                getItem\n                            \n                            \n                                getItemType\n                            \n                            \n                                getSourceClientOffset\n                            \n                            \n                                isDragging\n                            \n                            \n                                receiveHandlerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: any)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        internalMonitor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragDropMonitor\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Identifier | undefined\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(sourceId: Identifier | undefined)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceId\n                                            \n                                                        Identifier | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceOptions.html":{"url":"interfaces/DragSourceOptions.html","title":"interface - DragSourceOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceOptions\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide customisations for how a backend should handle a DragSource and\ndisplay items dragged from it. See DragSource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dropEffect\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropEffect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dropEffect:     \"copy\" | \"move\" | \"link\" | \"none\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"copy\" | \"move\" | \"link\" | \"none\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A string. By default, 'move'. In the browsers that support this\nfeature, specifying 'copy' shows a special \"copying\" cursor, while 'move'\ncorresponds to the \"move\" cursor. You might want to use this option to\nprovide a hint to the user about whether an action is destructive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceSpec.html":{"url":"interfaces/DragSourceSpec.html","title":"interface - DragSourceSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceSpec\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/drag-source-specification.ts\n        \n\n\n            \n                Description\n            \n            \n                The spec passed to DndService.\nNote the two type parameters. Both must represent plain JS objects.\nItem is the type you return from beginDrag(), and available in monitor.getItem().\nLimitations in TypeScript may prevent inferring this in many circumstances,\nand it will default to {}. It is best if you are strong-typing to pass a\ntype parameter like so:\nExample :interface MyDraggedItemType { id: number; }\n// ...\nsource = this.dnd.dragSource(..., {\n    beginDrag: monitor => ({ id: this.id })\n})DropResult is the type you expect a drop target to return from drop().\nIt is the type of the object returned by monitor.getDropResult() during endDrag().\nNote that your backend may assign some extra properties. You should define a\nDropResult type that recognises these, such as:\nExample :interface HTML5DropResult { dropEffect: string; }\ninterface MyDropResult extends HTML5DropResult { id: number; }\ntarget = this.dnd.dropTarget(..., {\n    drop: monitor => ({ id: this.id })\n});\n\nsource = this.dnd.dragSource(..., {\n    endDrag: monitor => {\n        const result = monitor.getDropResult();\n        if (result.dropEffect === 'copy') {\n            // user had alt key pressed + the GreenPlus icon when they dropped,\n            // so copy instead of move\n        }\n    }\n});\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        beginDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        canDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        endDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beginDrag\n                        \n                    \n                \n            \n            \n                \nbeginDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Required. When the dragging starts, beginDrag is called. You must return\na plain JavaScript object describing the data being dragged. What you\nreturn is the only information available to the drop targets about the\ndrag source so it's important to pick the minimal data they need to know.\nYou may be tempted to put a reference to the component into it, but you\nshould try very hard to avoid doing this because it couples the drag\nsources and drop targets. It's a good idea to return something like { id: this.id } from this method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Item\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Optional. Queries your component to determine whether this source can be\ndragged. Default returns true; this is often sufficient.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        endDrag\n                        \n                    \n                \n            \n            \n                \nendDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Optional. Notifies your component when dragging ends.\nThis is a good place to fire actions or modify a component. You will often\nwant to check DragSourceMonitor and DragSourceMonitor for more\ndetails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        By default, only the drag source that initiated the drag operation is\n considered to be dragging. You might override this by matching on the\n DragSourceMonitor.id and your component's id, or similar. Do this if the\n original component may be unmounted during the dragging and later\n \"resurrected\" with a different parent. For example, when moving a card\n across the lists in a Kanban board, you want it to retain the dragged\n appearance—even though technically, the component gets unmounted and\n a different one gets mounted every time you hover over another list.\n Note: You may not call DragSourceMonitor inside this method.\nNOTE: runs outside Angular change detection. This is for performance\nreasons. You shouldn't be making changes to your component here anyway. If\nyou do change your component inside this callback, it may not appear\nimmediately, and if you use NgZone.run() then you may experience\nperformance degradation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTarget.html":{"url":"interfaces/DropTarget.html","title":"interface - DropTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTarget\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents one drop target and its behaviour, that can listen to the state\nand connect to a DOM element.\nTo create one, refer to DndService.\n\n            \n\n            \n                Extends\n            \n            \n                            ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connectDropTarget\n                                    \n                                \n                                \n                                    \n                                        getHandlerId\n                                    \n                                \n                                \n                                    \n                                        setTypes\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connectDropTarget\n                        \n                    \n                \n            \n            \n                \nconnectDropTarget(elementOrNode: Node)\n                \n            \n\n\n\n\n            \n                \n                        This function allows you to connect a DOM node to your DropTarget.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nThe subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DropTarget already has a type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementOrNode\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subscription\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n                        Returns the drop target ID that can be used to simulate the drag and drop events\nwith the testing backend.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTypes\n                        \n                    \n                \n            \n            \n                \nsetTypes(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n                        Use this method to have a dynamically typed target. If no type has\npreviously been set, it creates the subscription and allows the\n[dragSource] DOM element to be connected. If you do not need to\ndynamically update the type, you can set it once via the\nDropTargetSpec property.\nSee DragSource for an example of how to set\na dynamic type, for it is very similar here.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            TypeOrTypeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DropTargetDirective.html":{"url":"directives/DropTargetDirective.html","title":"directive - DropTargetDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DropTargetDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-directives.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to connect a DropTarget to an element in a component template.\n\n            \n\n            \n                Extends\n            \n            \n                        AbstractDndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dropTarget]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dropTarget\n                            \n                            \n                                dropTargetType\n                            \n                            \n                                dropTargetTypes\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    dropTargetType\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dropTarget\n                    \n                \n                \n                    \n                        Type :         DropTarget\n\n                    \n                \n                \n                    \n                        Which target to connect the DOM to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropTargetType\n                    \n                \n                \n                    \n                        Type :         TypeOrTypeArray\n\n                    \n                \n                \n                    \n                        Reduce typo confusion by allowing non-plural version of dropTargetTypes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropTargetTypes\n                    \n                \n                \n                    \n                        Type :         TypeOrTypeArray\n\n                    \n                \n                \n                    \n                        Shortcut for setting a type on the connection.\nLets you use Angular binding to do it. Runs DropTarget.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        dropTargetType\n                    \n                \n\n\n                \n                    \n                        setdropTargetType(t: TypeOrTypeArray)\n                    \n                \n                    \n                        \n                                Reduce typo confusion by allowing non-plural version of dropTargetTypes\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            t\n                                                    \n                                                            \n                                                                            TypeOrTypeArray\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTargetMonitor.html":{"url":"interfaces/DropTargetMonitor.html","title":"interface - DropTargetMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTargetMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/target-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available in DropTarget's listen method.\n\n            \n\n            \n                Extends\n            \n            \n                            MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        canDrop\n                                    \n                                \n                                \n                                    \n                                        didDrop\n                                    \n                                \n                                \n                                    \n                                        getDropResult\n                                    \n                                \n                                \n                                    \n                                        isOver\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if there is a drag operation in progress, and the owner's\ncanDrop() returns true or is not defined.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if some drop target has handled the drop event, false\notherwise. Even if a target did not return a drop result, didDrop()\nreturns true. Use it inside drop() to test whether any nested drop\ntarget has already handled the drop. Returns false if called outside\ndrop().\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n                        Returns a plain object representing the last recorded drop result. The\ndrop targets may optionally specify it by returning an object from their\ndrop() methods. When a chain of drop() is dispatched for the nested\ntargets, bottom up, any parent that explicitly returns its own result\nfrom drop() overrides the drop result previously set by the child.\nReturns null if called outside drop().\n\n\n                        \n                            Returns :     DropResult\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOver\n                        \n                    \n                \n            \n            \n                \nisOver(options?: literal type)\n                \n            \n\n\n\n\n            \n                \n                        Returns true if there is a drag operation in progress, and the pointer\nis currently hovering over the owner. You may optionally pass\n{ shallow: true } to strictly check whether only the owner is being\nhovered, as opposed to a nested target.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DropTargetMonitorClass.html":{"url":"classes/DropTargetMonitorClass.html","title":"class - DropTargetMonitorClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DropTargetMonitorClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetMonitor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DropTargetMonitor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                internalMonitor\n                            \n                            \n                                targetId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrop\n                            \n                            \n                                didDrop\n                            \n                            \n                                getClientOffset\n                            \n                            \n                                getDifferenceFromInitialOffset\n                            \n                            \n                                getDropResult\n                            \n                            \n                                getInitialClientOffset\n                            \n                            \n                                getInitialSourceClientOffset\n                            \n                            \n                                getItem\n                            \n                            \n                                getItemType\n                            \n                            \n                                getSourceClientOffset\n                            \n                            \n                                isOver\n                            \n                            \n                                receiveHandlerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: any)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        internalMonitor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragDropMonitor\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Identifier | undefined\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOver\n                        \n                    \n                \n            \n            \n                \nisOver(options: object)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    { shallow: false }\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(targetId: Identifier | undefined)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                        Identifier | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTargetSpec.html":{"url":"interfaces/DropTargetSpec.html","title":"interface - DropTargetSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTargetSpec\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/drop-target-specification.ts\n        \n\n\n            \n                Description\n            \n            \n                The spec passed to DndService.\nNote the two type parameters. Both must represent plain JS objects. See the extended\ndiscussion of these type parameters at DragSourceSpec.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        canDrop\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        drop\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        hover\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Queries your component to determine whether an item can be dropped on this target.\nNOTE: runs outside Angular change detection. This is for performance\nreasons. You shouldn't be making changes to your component here anyway. If\nyou do change your component inside this callback, it may not appear\nimmediately, and if you use NgZone.run() then you may experience\nperformance degradation.\nDefault, when not specified, is true.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DropTargetMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        drop\n                        \n                    \n                \n            \n            \n                \ndrop(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Called when a compatible item is dropped on the target. You may either\nreturn nothing, or a plain object.\nIf you return an object, it is going to become the drop result and will be\navailable to the drag source in its DragSourceSpec method as\nDropTargetMonitor. This is useful in case you want the\nsource to perform different actions depending on which target received the\ndrop. Otherwise, it is simpler to handle the dropped item here.\nIf you have nested drop targets, you can test whether a nested target has\nalready handled drop by checking DropTargetMonitor. Both this\nmethod and the source's endDrag() method are good places to fire\n@ngrx/store actions.\nThis method will not be called if canDrop() is defined and returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DropTargetMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DropResult | void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        hover\n                        \n                    \n                \n            \n            \n                \nhover(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Called frequently while the mouse hovers over the owner drop target while\ndragging a relevant item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DropTargetMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactoryArgs.html":{"url":"interfaces/FactoryArgs.html","title":"interface - FactoryArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactoryArgs\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createConnector\n                                        \n                                \n                                \n                                        \n                                            createHandler\n                                        \n                                \n                                \n                                        \n                                            createMonitor\n                                        \n                                \n                                \n                                        \n                                            registerHandler\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createConnector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createConnector:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createMonitor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createMonitor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        registerHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        registerHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MonitorBase.html":{"url":"interfaces/MonitorBase.html","title":"interface - MonitorBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MonitorBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/monitor-base.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods common to all monitor classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getClientOffset\n                                    \n                                \n                                \n                                    \n                                        getDifferenceFromInitialOffset\n                                    \n                                \n                                \n                                    \n                                        getInitialClientOffset\n                                    \n                                \n                                \n                                    \n                                        getInitialSourceClientOffset\n                                    \n                                \n                                \n                                    \n                                        getItem\n                                    \n                                \n                                \n                                    \n                                        getItemType\n                                    \n                                \n                                \n                                    \n                                        getSourceClientOffset\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        The current mouse x,y position relative to the viewport. Returns null\nif no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n                        A vector x,y of the displacement of the dragged item from its initial\nposition. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        The initial mouse x,y position relative to the viewport, when the current\ndrag operation started. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        x,y relative to viewport of the item's DOM element before it was dragged.\nReturns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n                        The item in transit, if any. This is what you returned from\nDragSourceSpec. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :     Item | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n                        The type of the item in transit. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :     string | symbol | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        The projected x,y position relative to viewport of the root DOM element of the drag source\n= its initial position + displacement. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Offset.html":{"url":"interfaces/Offset.html","title":"interface - Offset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Offset\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/type-ish.ts\n        \n\n\n            \n                Description\n            \n            \n                Just a plain, reusable xy coordinate type.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    x coordinate\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    y coordinate\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reconnector.html":{"url":"classes/Reconnector.html","title":"class - Reconnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reconnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/Reconnector.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                disconnect\n                            \n                            \n                                handlerId\n                            \n                            \n                                hook\n                            \n                            \n                                    Optional\n                                node\n                            \n                            \n                                    Optional\n                                options\n                            \n                            \n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backendConnector: (handlerId: any,node: Node,options: O) => void)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backendConnector\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        disconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe | null\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hook\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Node\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     O\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reconnect\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceFactory.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragSource\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beginDrag\n                            \n                            \n                                canDrag\n                            \n                            \n                                endDrag\n                            \n                            \n                                isDragging\n                            \n                            \n                                withChangeDetection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spec: DragSourceSpec, zone: Zone, monitor: DragSourceMonitor)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spec\n                                                  \n                                                        \n                                                                        DragSourceSpec\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        monitor\n                                                  \n                                                        \n                                                                        DragSourceMonitor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beginDrag\n                        \n                    \n                \n            \n            \n                \nbeginDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDrag\n                        \n                    \n                \n            \n            \n                \nendDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging(globalMonitor: any, sourceId: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                globalMonitor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sourceId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        withChangeDetection\n                        \n                    \n                \n            \n            \n                \nwithChangeDetection(fn: () => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceConnector.html":{"url":"classes/SourceConnector.html","title":"class - SourceConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceConnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceConnector.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Connector\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hooks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                receiveHandlerId\n                            \n                            \n                                    Public\n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backend: Backend)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backend\n                                                  \n                                                        \n                                                                    Backend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragSourceConnector\n\n                    \n                \n                \n                    \n                        Default value : {\n    dragSource: this.dragSource.hook,\n    dragPreview: this.dragPreview.hook,\n  }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    receiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                handlerId\n                                            \n                                                        Identifier | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    reconnect()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SourceConstructor.html":{"url":"interfaces/SourceConstructor.html","title":"interface - SourceConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SourceConstructor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Target.html":{"url":"classes/Target.html","title":"class - Target","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Target\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetFactory.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DropTarget\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrop\n                            \n                            \n                                drop\n                            \n                            \n                                hover\n                            \n                            \n                                receiveMonitor\n                            \n                            \n                                withChangeDetection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spec: DropTargetSpec, zone: Zone, monitor: DropTargetMonitor)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spec\n                                                  \n                                                        \n                                                                        DropTargetSpec\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        monitor\n                                                  \n                                                        \n                                                                        DropTargetMonitor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drop\n                        \n                    \n                \n            \n            \n                \ndrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hover\n                        \n                    \n                \n            \n            \n                \nhover()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveMonitor\n                        \n                    \n                \n            \n            \n                \nreceiveMonitor(monitor: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        withChangeDetection\n                        \n                    \n                \n            \n            \n                \nwithChangeDetection(fn: () => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TargetConnector.html":{"url":"classes/TargetConnector.html","title":"class - TargetConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TargetConnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetConnector.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Connector\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hooks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                receiveHandlerId\n                            \n                            \n                                    Public\n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backend: Backend)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backend\n                                                  \n                                                        \n                                                                    Backend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DropTargetConnector\n\n                    \n                \n                \n                    \n                        Default value : {\n    dropTarget: this.dropTarget.hook,\n  }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    receiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                handlerId\n                                            \n                                                        Identifier | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    reconnect()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TargetConstructor.html":{"url":"interfaces/TargetConstructor.html","title":"interface - TargetConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TargetConstructor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n3.0.0 (2024-04-25)\nNote: Version bump only for package @ng-dnd/core\n2.0.2 (2022-08-06)\nNote: Version bump only for package @ng-dnd/core\n2.0.1 (2022-05-03)\nBug Fixes\n\nfix reference types of triple-slash directives (#7) (2c0127e)\n\n2.0.0 (2022-05-03)\nBug Fixes\n\nbuild: fix tslib version (d5aa05b)\n\nFeatures\n\nadd eslint and remove tslint (f8fb0df)\n\n1.0.3 (2022-05-02)\nNote: Version bump only for package @ng-dnd/core\n1.0.2 (2022-05-02)\nNote: Version bump only for package @ng-dnd/core\n1.0.1 (2022-02-19)\nNote: Version bump only for package @ng-dnd/core\n1.0.0 (2021-08-14)\nNote: Version bump only for package @ng-dnd/core\n0.1.2 (2021-08-09)\nNote: Version bump only for package @ng-dnd/core\n0.1.1 (2021-08-07)\nNote: Version bump only for package @ng-dnd/core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            ConnectionBase\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DragLayer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DragSource\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DropTarget\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connector.ts\n            \n            injectable\n            DndService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connector.ts\n            \n            interface\n            AddSubscription\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/connectors.ts\n            \n            interface\n            DragPreviewOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/connectors.ts\n            \n            interface\n            DragSourceOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/dnd-directives.ts\n            \n            directive\n            DragPreviewDirective\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/dnd-directives.ts\n            \n            directive\n            DragSourceDirective\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/dnd-directives.ts\n            \n            directive\n            DropTargetDirective\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/dnd-module.ts\n            \n            interface\n            BackendInput\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/dnd-module.ts\n            \n            function\n            provideDnd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/drag-source-specification.ts\n            \n            interface\n            DragSourceSpec\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/drop-target-specification.ts\n            \n            interface\n            DropTargetSpec\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/internal/Reconnector.ts\n            \n            class\n            Reconnector\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            class\n            Connection\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            FactoryArgs\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            SourceConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            TargetConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            variable\n            SourceConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            variable\n            TargetConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            class\n            SourceConnector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            interface\n            Connector\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            function\n            createSourceConnector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceFactory.ts\n            \n            class\n            Source\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/internal/createSourceFactory.ts\n            \n            function\n            createSourceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            class\n            DragSourceMonitorClass\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            function\n            createSourceMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            variable\n            isCallingCanDrag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            variable\n            isCallingIsDragging\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetConnector.ts\n            \n            class\n            TargetConnector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/createTargetConnector.ts\n            \n            function\n            createTargetConnector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetFactory.ts\n            \n            class\n            Target\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/internal/createTargetFactory.ts\n            \n            function\n            createTargetFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            class\n            DropTargetMonitorClass\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            function\n            createTargetMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            variable\n            isCallingCanDrop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/drag-layer-connection.ts\n            \n            class\n            DragLayerConnectionClass\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/internal/invariant.ts\n            \n            function\n            invariant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/register-source.ts\n            \n            function\n            registerSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/register-target.ts\n            \n            function\n            registerTarget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/layer-monitor.ts\n            \n            interface\n            DragLayerMonitor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/monitor-base.ts\n            \n            interface\n            MonitorBase\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/source-monitor.ts\n            \n            interface\n            DragSourceMonitor\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/target-monitor.ts\n            \n            interface\n            DropTargetMonitor\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_DEBUG_MODE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_FACTORY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_GLOBAL_CONTEXT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_MANAGER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            TYPE_DYNAMIC\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/type-ish.ts\n            \n            interface\n            Offset\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/areCollectsEqual.ts\n            \n            function\n            areCollectsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/areOptionsEqual.ts\n            \n            function\n            areOptionsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/shallowEqual.ts\n            \n            function\n            shallowEqual\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            dnd-core : ^16.0.0\n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=17.0.0\n        \n            @angular/core : >=17.0.0\n        \n            rxjs : >=7.0.0\n        \n            zone.js : >=0.14.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            areCollectsEqual   (src/.../areCollectsEqual.ts)\n                        \n                        \n                            areOptionsEqual   (src/.../areOptionsEqual.ts)\n                        \n                        \n                            createSourceConnector   (src/.../createSourceConnector.ts)\n                        \n                        \n                            createSourceFactory   (src/.../createSourceFactory.ts)\n                        \n                        \n                            createSourceMonitor   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            createTargetConnector   (src/.../createTargetConnector.ts)\n                        \n                        \n                            createTargetFactory   (src/.../createTargetFactory.ts)\n                        \n                        \n                            createTargetMonitor   (src/.../createTargetMonitor.ts)\n                        \n                        \n                            invariant   (src/.../invariant.ts)\n                        \n                        \n                            provideDnd   (src/.../dnd-module.ts)\n                        \n                        \n                            registerSource   (src/.../register-source.ts)\n                        \n                        \n                            registerTarget   (src/.../register-target.ts)\n                        \n                        \n                            shallowEqual   (src/.../shallowEqual.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/areCollectsEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        areCollectsEqual\n                        \n                    \n                \n            \n            \n                \nareCollectsEqual(a: any, b: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                a\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                b\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/areOptionsEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        areOptionsEqual\n                        \n                    \n                \n            \n            \n                \nareOptionsEqual(nextOptions: any, currentOptions: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nextOptions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentOptions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createSourceConnector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceConnector\n                        \n                    \n                \n            \n            \n                \ncreateSourceConnector(backend: Backend)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backend\n                                            \n                                                        Backend\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createSourceFactory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceFactory\n                        \n                    \n                \n            \n            \n                \ncreateSourceFactory(spec: DragSourceSpec, zone: Zone)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                spec\n                                            \n                                                            DragSourceSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                zone\n                                            \n                                                        Zone\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createSourceMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceMonitor\n                        \n                    \n                \n            \n            \n                \ncreateSourceMonitor(manager: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                manager\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DragSourceMonitor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/internal/createTargetConnector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetConnector\n                        \n                    \n                \n            \n            \n                \ncreateTargetConnector(backend: Backend)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backend\n                                            \n                                                        Backend\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createTargetFactory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetFactory\n                        \n                    \n                \n            \n            \n                \ncreateTargetFactory(spec: DropTargetSpec, zone: Zone)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                spec\n                                            \n                                                            DropTargetSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                zone\n                                            \n                                                        Zone\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createTargetMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetMonitor\n                        \n                    \n                \n            \n            \n                \ncreateTargetMonitor(manager: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                manager\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DropTargetMonitor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/internal/invariant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        invariant\n                        \n                    \n                \n            \n            \n                \ninvariant(assertion: boolean, msg: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assertion\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                msg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/dnd-module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        provideDnd\n                        \n                    \n                \n            \n            \n                \nprovideDnd(backendInput: BackendInput)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backendInput\n                                            \n                                                            BackendInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Provider[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/internal/register-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerSource\n                        \n                    \n                \n            \n            \n                \nregisterSource(type: any, source: DragSource, manager: DragDropManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                            DragSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        DragDropManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/register-target.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerTarget\n                        \n                    \n                \n            \n            \n                \nregisterTarget(type: any, target: DropTarget, manager: DragDropManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                target\n                                            \n                                                            DropTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        DragDropManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/shallowEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        shallowEqual\n                        \n                    \n                \n            \n            \n                \nshallowEqual(objA: any, objB: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objA\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objB\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ng-dnd/core\n\n\n\nNg-DnD is a toolkit for building complex drag and drop interfaces in Angular. It is based on, and very similar to react-dnd by Dan Abramov and others, and is also powered by dnd-core. It is compatible with all backends.\nCheck out the examples here.\nInstallation\nExample :yarn add @ng-dnd/core react-dnd-html5-backendNext, follow the Quickstart and check out the Tutorial.\nSub-packages\n\n@ng-dnd/multi-backend\n@ng-dnd/sortable\n\nFeatures\n\nMake any component draggable, or into a drop target.\nDoesn't mutate the DOM, and doesn't use classes and CSS to do 'callbacks'.\nEvery visible change is made through Angular templates.\nThe truth lives in JavaScript, with unidirectional data flow (like\n@ngrx/store)\nObservable APIs, designed to fit in Angular.\nTypeScript friendly, with strong typing for in-flight objects, and inline\ndocumentation.\nWorks with HTML5 drag and drop, and all other react-dnd backends.\n\nGoals\n\nHigh performance. All code runs outside the Angular zone, and re-enters in batches only where strictly necessary, such that change detection runs precisely as many times as you need it to, with no extra configuration. You should also be able to take full advantage of OnPush change detection.\n\nLargely possible to translate react-dnd code and examples into Angular (see Translating React Code).\n\nComprehensive documentation and tons of example code, written in Angular style.\n\n\nWhat can you do with it?\nInstead of building maximally-ergonomic solutions to simple use cases, react-dnd and ng-dnd provide an abstraction over most things you could want to do with drag and drop. They are lower-level building blocks that make it easy to implement some very complex interactions. They assign no specific meaning to a drag/drop operation. You get to define what happens when a drag starts or ends or hovers. Here are some ambitious examples:\n\nThe traditional react-dnd tutorial, a chess board with movable pieces and rules\nDeleting items by dragging them to a 'trash can', like in the macOS dock.\nStamping out a template by dragging the template into a work area\nMerging two items by dragging one on top of the other\nHover over a 'folder' for a few seconds to 'drill down' into it\nThe famous lists and cards on trello.com, which actually uses react-dnd\nA diagramming tool where you can draw links between nodes\nA 2D CAD program\nA graphical query builder, or visual data pipeline like Luna\nMany other demonstrations of react-dnd (most with GIFs) in use\n\nAlternatives\nIt is important to note that for bare-bones sortable lists, where you have a mutable array of simple values, you don't necessarily need the superpowers in this library. There are plenty of cookie-cutter solutions out there, like the quite powerful ng2-dnd or ng2-dragula, which may get you to your deadline faster than learning and using ng-dnd. But be warned; you may find yourself wanting more dragging power once you get a taste. In fact, this package was born when @cormacrelf got sick of maintaining ng2-dragula and watching users struggle to implement what react-dnd was born for.\nIf Angular and React aren't your thing, there's also vue-react-dnd.\nIssues\nNot all issues are ng-dnd-related. If you think you found a bug in dnd-core or with the HTML5 backend, those issues belong on that codebase with their many contributors and wealth of experience. If there is a problem with another backend you are using, file an issue with that backend so you can get more specific help and so that the community can benefit.\nIssues and potential improvements to ng-dnd are discussed on GitHub.\nLicense\nThis library is released under the MIT license. It depends on dnd-core, which is (now) also under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DndModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    19 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.0.0\n        \n            Description : Drag and Drop for Angular\n        \n            Keywords : drag-and-drop, react-dnd, angular-dnd, ng-dnd, ngx-dnd\n        \n            License : MIT\n        \n            Repository : https://github.com/ng-dnd/ng-dnd\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DragSourceDecorator   (src/.../wrappers.ts)\n                        \n                        \n                            DragSourceFactory   (src/.../wrappers.ts)\n                        \n                        \n                            DropTargetDecorator   (src/.../wrappers.ts)\n                        \n                        \n                            DropTargetFactory   (src/.../wrappers.ts)\n                        \n                        \n                            TypeOrTypeArray   (src/.../type-ish.ts)\n                        \n                        \n                            Types   (src/.../wrappers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/wrappers.ts\n    \n    \n        \n            \n                \n                    \n                    DragSourceDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DragSourceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DropTargetDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DropTargetFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Types\n                \n            \n            \n                \n                        string | symbol | (string | symbol)[]\n\n                \n            \n        \n    \n    src/type-ish.ts\n    \n    \n        \n            \n                \n                    \n                    TypeOrTypeArray\n                \n            \n            \n                \n                    String, symbol, or an array of either. Used on drop targets.\n\n                \n            \n            \n                \n                        string | symbol | Array\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DRAG_DROP_BACKEND   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_DEBUG_MODE   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_FACTORY   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_OPTIONS   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_GLOBAL_CONTEXT   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_MANAGER   (src/.../tokens.ts)\n                        \n                        \n                            isCallingCanDrag   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            isCallingCanDrop   (src/.../createTargetMonitor.ts)\n                        \n                        \n                            isCallingIsDragging   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            SourceConnection   (src/.../connection-factory.ts)\n                        \n                        \n                            TargetConnection   (src/.../connection-factory.ts)\n                        \n                        \n                            TYPE_DYNAMIC   (src/.../tokens.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tokens.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core compatible backend')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_DEBUG_MODE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'should dnd-core run in debug mode?'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_FACTORY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'dnd-core compatible backend'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core BackendFactory used to instantiate dnd-core.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'options for dnd-core compatible backend'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend's options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_GLOBAL_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core context')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_MANAGER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core DragDropManager')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core DragDropManager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPE_DYNAMIC\n                        \n                    \n                \n            \n                \n                    \n                        Type :     symbol\n\n                    \n                \n                \n                    \n                        Default value : Symbol(\n  'no type specified, you must provide one with setType/setTypes'\n)\n                    \n                \n\n            \n                \n                    The type a source or target is given as a marker for 'you supplied null as a type',\nso that library consumers can be reminded to use setType/setTypes manually.\nSee DragSource.setType, DropTarget.setTypes.\n\n                \n            \n\n        \n    \n\n    src/internal/createSourceMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCallingCanDrag\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCallingIsDragging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n\n    src/internal/createTargetMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCallingCanDrop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n\n    src/internal/connection-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Connection as SourceConstructor\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TargetConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Connection as TargetConstructor\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/quickstart.html":{"url":"additional-documentation/quickstart.html","title":"additional-page - Quickstart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\nExample :yarn add @ng-dnd/core react-dnd-html5-backendYou might consider @ng-dnd/multi-backend instead of the HTML5\nbackend, because it allows adding touch support as well.\nThen import DndModule and provide the backend:\nExample :import { DndModule } from '@ng-dnd/core';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\n@NgModule({\n  imports: [\n    // Don't forget the forRoot()\n    DndModule.forRoot({ backend: HTML5Backend }),\n  ],\n})\nexport class AppModule {}If you need it again on a child module, like a lazy-loaded module, you only need\nto import DndModule there. That way the backend and global drag state is only\ninitialized once. But you may use forRootto inject a new instance or to\ninclude drag and drop on only some child modules.\nConcepts\nThese pieces make up the library:\n\nAn item (JS Object, not a DOM node) is the source of truth for each drag\noperation\nA drag source registers a DOM node to commence drag operations\nA drop target registers a DOM node for hover and drop events\nwhile dragging\nA way for each to provide, listen for and query changes in the drag state:\na monitor and appropriate callbacks\nHooks to provide some other DOM element as the drag preview.\n\nreact-dnd defined one more thing, inspired by HTML5, to make using this sane:\neach item has a type, and drag sources and drop targets will\nrespectively emit and accept only items with matching types.\nThat's it. This library offers all those concepts in an Angular-friendly way,\nthat is also largely compatible with a lot of react-dnd code and examples.\nNext steps\n\nHave a look at the Examples, and browse their source code in the\nexamples app on GitHub.\n\nRead and follow the Tutorial\n\nRead the 3-part guide in the sidebar. Any specifics are available by browsing the interfaces and\nclasses.\n\n\nTouch support and alternate backends\nMobile devices have not implemented HTML5 drag and drop. You will need:\n\nA different backend using click or touch events, without dropping desktop support\nA way to render drag previews. Where on desktops you\ncan let the browser render drag previews, when using a backend based on click\nor touch events, on mobile you have to render them yourself.\n\nA good way to solve both problems at once is using\n@ng-dnd/multi-backend. It is based on the original\ndnd-multi-backend, which was designed to seamlessly switch\nbetween an HTML5 and a touch backend when it noticed different\nkinds of interaction. The @ng-dnd version includes a preview component.\nNote also that you will need to use an exported function\nto provide the backend, to retain AOT compatibility, if it requires assembly.\nMultiBackend, for example, can be used like so:\nExample :export function createBackend() {\n    return MultiBackend(HTML5ToTouch);\n}\n@NgModule({\n  imports: [\n    DndModule.forRoot({ backendFactory: createBackend })\n  ]\n}\n// ...Troubleshooting\nI get TypeError: backend is null, only when AOT is enabled\nAlso rears its head as No such property 'default' of undefined.\nTroubleshooting steps\n\nCheck you are importing the backend and renaming any default exports.\nExample :import { HTML5Backend } from 'react-dnd-html5-backend';\nimport { SomeImaginaryBackendWithNamedExports } from 'some-imaginary-backend';Generally, make sure you are importing the backend correctly. If it does not\nprovide Typescript definitions, you might have to read the documentation or\nbrowse the source code.\n\nMake sure in your root Angular module (usually app.module.ts) you import\nDndModule.forRoot({ backend: MyBackend }) instead of plain DndModule.\n\n\nI get Error encountered resolving symbol values statically. Calling function 'default' with AOT enabled.\nMake sure you are following the special instructions for assembly-required backends\nlike MultiBackend or any backend that allows SomeBackend({ optionsHere: true }),\nlike TouchBackend. See above.\nIn the spec callbacks, my component doesn't have any properties, and it can't call this.method()!\nMake sure you use the arrow function syntax (() =>) in your specs so this will refer to your component. Example:\nExample :paperCount = 3;\nlimitedSupplyOfPaper = this.dnd.dragSource('PAPER', {\n  // use shorthand for one-liners that return a value\n  canDrag: () => this.paperCount > 0,\n  endDrag: monitor => {\n    if (monitor.didDrop()) {\n      this.paperCount--;\n    }\n  },\n});This demo shows comprehensively what this refers to\nin arrow functions vs regular ones. A sufficiently advanced editor shouldn't\nshow any completions at this.| in a regular function, as it will resolve the\ntype of this to be any.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide.html":{"url":"additional-documentation/guide.html","title":"additional-page - Guide","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen using @ng-dnd, you follow this general pattern:\n\nCreate a connection and specify its behaviour: Creating Connections\nUse directives or methods to connect it to real DOM elements:\nConnecting to DOM\nUse the connection's listen method to listen for relevant state changes, and respond to them:\nMonitoring State\nRemember to destroy the connection in ngOnDestroy(). Refer to part 1\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/1.-creating-connections.html":{"url":"additional-documentation/guide/1.-creating-connections.html","title":"additional-page - 1. Creating connections","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating connections\nThere are three types of connection.\n\nDragSource\nis for allowing components to be dragged. Create one with\nDndService#dragSource\nusing a\nDragSourceSpec\nand attach it to the DOM\nwith [dragSource]=\"...\".\n\nDropTarget\nis for allowing components to be dragged. Create one with\nDndService#dropTarget\nusing a\nDropTargetSpec\nand attach it to the DOM\nwith [dropTarget]=\"...\".\n\nDragLayer\nis an advanced feature that allows you to implement your own\ncustom drag previews. Create one with\nDndService#dragLayer,\nbut you don't attach them to the DOM, you simply listen for changes.\n\n\nAll three of them have the same lifecycle, and all three of them offer a\n.listen() function, which allows you to listen to changes. See\nConnectionBase for what they have in\ncommon.\nUsing the DndService to create connections\nFirst, inject\nDndService,\ninto your component.\nExample :constructor(private dnd: DndService) { ... }Then, use one of the methods\nDndService#dragSource,\nDndService#dropTarget\nto create one and store it as an instance variable, and make sure to tear down\nthe connection in ngOnDestroy.\nExample :source = this.dnd.dragSource(\"CAT\", {\n  beginDrag: (monitor) => ({ id: this.cat.id })\n  // ...\n});\n// or\ntarget = this.dnd.dropTarget([\"CAT\", \"ZEBRA\"], {\n  // ...\n});\nconstructor(private dnd: DndService) { ... }\n\nngOnDestroy() {\n  this.source.unsubscribe();\n  // or\n  this.target.unsubscribe();\n}Then, you will want to add some behaviour beyond the default by looking into the\nSpec input for your connection type.\nDestroying Connections\nAll three types of connection need to be destroyed when your component is\ndestroyed. If you don't, you will have strange problems.\nThe easy way is to call\n.unsubscribe() on the\nconnection object in ngOnDestroy.\nExample :ngOnDestroy() {\n    this.source.unsubscribe();\n    this.target.unsubscribe();\n    this.layer.unsubscribe();\n    // neat. we're done.\n}\nBut I have ten other subscriptions!\nIn situations where your component has a lot of subscription logic to\nmaintain, there are more powerful ways of unsubscribing to many things at once.\nYou can create an RxJS Subscription object in your component, and call\nSubscription.add(conn) with your connection. There is a convenience parameter\non each of the DndService methods which will do this for you.\nExample :import { Subscription } from 'rxjs';\n\n// ...\n\nsubs = new Subscription();\n\nsource = this.dnd.dragSource({\n  // ...\n}, this.subs);\n\ntarget = this.dnd.dragSource({\n  // ...\n}, this.subs);\n\n// ...\n\nngOnInit() {\n    // subscribe to lots of things here\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n}\nngOnDestroy() {\n  // This will unsubscribe everything, including source and target\n  this.subs.unsubscribe();\n}(It is not recommended to have a large number of drag sources and drop targets\nattached to a single component, especially not in a variably-sized array,\nsimply because that is poor component structure. Instead, consider creating a\ncomponent that handles a single piece of dragging logic, and use an *ngFor over\nthe whole component.)\nNext: Connecting to DOM.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/2.-connecting-to-dom.html":{"url":"additional-documentation/guide/2.-connecting-to-dom.html","title":"additional-page - 2. Connecting to DOM","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnecting sources and targets to real DOM elements\nOnce you have created a connection, it is most useful when connected to a real\nDOM element.\nMaking a DOM element draggable\nThis means that events fired inside the element's bounding rectangle will start\na drag. Use DragSourceDirective to do this. It's as simple as:\nExample :drag meExample :source = this.dnd.dragSource('DRAGME', {\n  beginDrag: () => ({ name: 'Jones McFly' }),\n  // other DragSourceSpec methods\n});\n// constructor, unsubscribe, etcThen, investigate using\nDragSourceSpec\nto customise the behaviour.\nMaking a DOM element into a drop target\nThis means your element will react to items being hovered or dropped within its\nbounding rectangle.\nExample :drop on meExample :target = this.dnd.dropTarget('DRAGME', {\n  drop: monitor => {\n    console.log('dropped an item:', monitor.getItem()); // => { name: 'Jones McFly' }\n  },\n});\n// constructor, unsubscribe, etcThen, investigate using\nDropTargetSpec\nto customise the behaviour.\nDrag previews\nThis is a feature unique to the HTML5 backend. If you are using another\nbackend, you will need a Drag Layer (see below) to render anything that follows\nthe mouse.\nBy default, a static screenshot of the original [dragSource] element will form\na drag preview and follow the mouse around.\nUsing a different element as the preview source\nIf you want another element to be the source of the preview, you can use the\n[dragPreview]=\"source\" directive.\nIf you place a DragPreviewDirective on a different element than the\n[dragSource], and pass the same DragSource connection to it, the\npreview element will take over the job of posing for the preview screenshot.\nUsing a 'drag handle'\nThis is a common use of custom drag previews, where a box with a smaller handle\nwithin it is only draggable from the handle. This is useful for moving\ninteractive blocks of UI (e.g.  elements) around the screen, without\ntouching the inputs / selecting text / making unwanted changes.\n\nAttach [dragSource]=\"source\" to the handle.\nAttach [dragPreview]=\"source\" to the overall box being dragged.\nAs always, you may consider applying CSS cursor: move or cursor: grab or\nsimilar to the handle, to make sure users can discover what the handle is\nfor.\n\nUsing an image preview\n\nCreate an image element with const img = new Image(); img.src = \"...\";\nUse img.onload = () => { ... } to wait for it to load. Inside the onload\ncallback, run someDragSourceConnection.connectDragPreview(img).\n\nSee DragSource.connectDragPreview and DragPreviewOptions for options.\nNext: Monitoring State.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/3.-monitoring-state.html":{"url":"additional-documentation/guide/3.-monitoring-state.html","title":"additional-page - 3. Monitoring State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonitoring State\nHow to change your template depending on the drag state\n\nTake any connection object, like DropTarget\nCall .listen() with a function that returns what information you want to\nmonitor\nSave the resulting Observable to an instance variable in your component\nUse the observable via the | async pipe to render alternate content in\nyour template.\n\nFor example:\nExample :\n  drop cats here\nExample :.cat-target {\n  background: #eee;\n}\n.cat-target--hovering {\n  background: lightgoldenrodyellow;\n}Example :target = this.dnd.dropTarget('CAT', {\n  drop: monitor => {\n    console.log('dropped a cat');\n  },\n});\n\n// this is a very useful combination on a drop target,\n// which expresses 'hovering over' + ('same type' + 'DropTargetSpec.canDrop returned true')\n// you almost always want to use the combination rather than isOver on its own\nhovering$ = this.target.listen(m => m.isOver() && m.canDrop());What can you listen to?\nEach type of connection gets a different set of information available on the\nmonitor. They are laid out in these interfaces:\n\nDragSourceMonitor\nDropTargetMonitor\nDragLayerMonitor\nAll three derive from MonitorBase\n\nOptimisation\nNote that all three monitors have very rapidly-changing information available on\nthem, such as the current viewport-mouse offset. The .listen() functions will\noptimise component updates for you. You don't want to:\n\nSubscribe to more properties than you need. This hinders performance.\nSubscribe to the entire monitor object. It will only fire once, and then\nnever again, because the monitor object itself is the same each time.\n\nThe implementation of listen() includes an implementation of RxJS'\ndistinctUntilChanged that also optimises for JS Objects with the same keys\nbut different values. The following two examples fire exactly as often:\nExample :isDraggingPlain$ = this.source.listen(m => m.isDragging());\nisDraggingObj$ = this.source.listen(m => ({ isDragging: m.isDragging() }));This is helpful if you have a lot of properties to listen to and wish to\nreduce the number of | async pipes in your code, or if you want to copy\nsome react-dnd code.\nMaking decisions in the Spec based on current drag state\nThe other place you get access to a monitor is in the callbacks in each Spec.\nMonitors carry some information only relevant and usable inside these callbacks.\nThose methods are documented in the monitor interfaces, and particularly useful\nmethods are highlighted in each of the Spec callbacks, such as\nDropTargetSpec.drop.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chess-tutorial.html":{"url":"additional-documentation/chess-tutorial.html","title":"additional-page - Chess Tutorial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChess Tutorial\nIn this tutorial, we're building a tiny chess game, with one knight on the\nboard. It's an Angular-specific translation of the original react-dnd\ntutorial. The discussion about how to break down this game into\ncomponents is worth reading the original for. We will carry on implementing the\nthree components:\n\nKnightComponent, responsible for rendering one knight piece\nSquareComponent, just one black or white square on the board\nBoardComponent, 64 squares.\n\nThis tutorial assumes you are familiar with the basics of Angular (version 2+).\nIt also assumes you have read the Quickstart guide, and have attached the\nDndModule and the HTML5 backend. Complete source code is available on\nGitHub, in four commits: one, two,\nthree, four, the last of which is the finished\nproduct. You can play with a live demo.\nBasic chess visuals\nWe'll build the KnightComponent first. It is very simple, just a span with a Unicode\nknight character in it.\nExample :import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-knight',\n  template: `♘`,\n  styles: [\n    `\n      span {\n        font-weight: 400;\n        font-size: 54px;\n        line-height: 70px;\n      }\n    `,\n  ],\n})\nexport class KnightComponent {}Add this component to your module's declarations section, and put\n somewhere on your page.\n\nNext, we will implement SquareComponent. It is responsible only for changing the colour\nof the background and foreground depending on a black input, and rendering\nwhatever was passed to it inside its tags. Make a SquareComponent, add it to\nyour module, and include the following very simple HTML template:\nExample :\n  \nIn the body of the component class, add an input for whether the square should\nbe black or not:\nExample :@Input() black: boolean;Then implement getStyle() by reading this property.\nExample :getStyle() {\n    return this.black\n        ? { backgroundColor: 'black', color: 'white' }\n        : { backgroundColor: 'white', color: 'black' }\n}Note that by attaching these styles directly via [ngStyle], they are not\naffected by Angular's view encapsulation, so color will apply to any child\ncomponents as well. You could achieve the same by using classes and CSS and\n::ng-deep or turning view encapsulation off, but [ngStyle] is good enough\nfor us.\nThen, we want SquareComponent to take up all the space available to it. This\nway, Square can be arbitrarily large, and we don't have to be concerned with how\nbig the whole board is going to be. Include the following in a styles block,\nor a linked CSS file.\nExample ::host,\ndiv {\n  display: block;\n  height: 100%;\n  width: 100%;\n  text-align: center;\n}At this point, you can render one square with a knight in it, like so:\nExample :\n  \n\nIf you're paying attention, you'll notice that height: 100% doesn't really\nmean anything as none of the parent divs have a height to be 100% of, but it\nwill make sense later when we put the Square in a div that has an absolute\nheight.\nThen, let's build the board. Start by building out a component that just renders\none square.\nExample :import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-board',\n  template: `\n    \n      \n        \n      \n    \n  `,\n})\nexport class BoardComponent {}Now, we need to render 64 of them. We will need an *ngFor, but Angular isn't\nvery good at for loops, so we have to make an array of 64 items.\nExample :\n  \n    \n  \nExample :// ...\nexport class BoardComponent {\n  sixtyFour = new Array(64).fill(0).map((_, i) => i);\n}\nThen, you just have a lot of black squares in a vertical list. Not very chess-y.\nTo make it an 8x8 grid, we are going to wrap them all in a , and use the cool new CSS feature, CSS Grid. Make sure you are\nusing a modern browser. Apply this style to the wrapping .board:\nExample :.board {\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  display: grid;\n  grid-template-columns: repeat(8, 12.5%);\n  grid-template-rows: repeat(8, 12.5%);\n}For brevity's sake you could just set .board to a fixed width and height\nof 560px. I added a ContainerComponent, just to specify that size, to keep\nthe board independent of where it will be placed. At this point, you will have\nan 8x8 board, but it still doesn't quite look like chess.\n\nMaking the chessboard pattern and placing one knight on the board\nWe're going to need a way to express coordinates on the board. Define a new\ninterface, to hold x and y coordinates.\nExample :export interface Coord {\n  x: number;\n  y: number;\n}Save it in a new file, coord.ts, and import it into your Board component file.\nThen, we need to convert [0..63] (the indices of the *ngFor) to Coord\nobjects.\nExample :export class Board {\n    // ...\n    xy(i): Coord {\n      return {\n          x: i % 8,\n          y: Math.floor(i / 8)\n      }\n    }\n}\nYou can then quite easily go from Coord to whether the square is black or not:\nExample :    // ...\n    isBlack({ x, y }: Coord) {\n        return (x + y) % 2 === 1;\n    }Then, pass the result to each SquareComponent, and render only one KnightComponent in the top\nleft:\nExample :\n  \n    \n  \nAnd look at that, we have a chess board with one knight.\n\nMaking the knight move around\n\nAt this point, your code should look like this commit. You can\nstart fresh from there if you want.\n\nWe can clearly represent the position of a knight in one Coord object. You\ncould store this on the BoardComponent itself:\nExample : Example :knightPosition: Coord = { x: 2, y: 5 };But we're going to want to read this elsewhere and drive the game logic from it,\nand we don't want all the game logic to be trapped inside the BoardComponent.\nSo, create a GameService, and represent the changing position of the knight\nwith an RxJS BehaviorSubject. This is an ultra-lightweight way of\nbuilding an @ngrx-style Store without any boilerplate. It allows us to\n'broadcast' updates to the knight's position to any interested components.\nLike any Subject, BehaviourSubject can be used as an Observable, and\ncomponents can subscribe to it with the | async pipe. But unlike a regular\nSubject, it can also have an initial value, and will replay the most recent\nvalue to any new subscribers. This is exactly what we want.\nExample :import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Coord } from './coord';\n\n@Injectable()\nexport class GameService {\n  knightPosition$ = new BehaviorSubject({ x: 2, y: 5 });\n\n  moveKnight(to: Coord) {\n    this.knightPosition$.next(to);\n  }\n}As you can see, this is a very simple service. Inject it into your\nBoardComponent, and let's put the Knight where the GameService\nsays it should go.\nExample :\nExample :knightPosition$ = this.game.knightPosition$;\nconstructor(private game: GameService) { }This works, but it's very hard to read. A better solution would be to put the\nentire *ngFor section in the scope of one subscription. You can do that\nwithout introducing a redundant , by using  and a fancy\ntrick: since knightPosition$|async is always truthy, you can put it in an\n*ngIf and give the result a name using the *ngIf=\"AAA as BBB\" syntax. Here's\nthe entire template:\nExample :\n  \n    \n      \n         \n      \n    \n  \nThe resulting template is much clearer.\nNow that we have a knightPosition$ and even a GameService.moveKnight()\nfunction, we can hook up a click event on each  to move the knight\naround the board. We're going to remove it later, so just throw it in the\nBoardComponent:\nExample :Example :handleSquareClick(pos: Coord) {\n  this.game.moveKnight(pos);\n}Click around, and your noble KnightComponent will follow, even though he is breaking\nthe rules. So, let's add the rules. Amend the GameService to include\na canMoveKnight function, based on the current position and a prospective\nposition. You can store the currentPosition by subscribing internally to\nknightPosition$ and writing out each new value into an instance variable.\nExample :import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Coord } from './coord';\n\n@Injectable()\nexport class GameService {\n  knightPosition$ = new BehaviorSubject({ x: 2, y: 5 });\n  currentPosition: Coord;\n\n  constructor() {\n    this.knightPosition$.subscribe(kp => {\n      this.currentPosition = kp;\n    });\n  }\n\n  moveKnight(to: Coord) {\n    this.knightPosition$.next(to);\n  }\n\n  canMoveKnight(to: Coord) {\n    const { x, y } = this.currentPosition;\n    const dx = to.x - x;\n    const dy = to.y - y;\n\n    return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n  }\n}Amend handleSquareClick to check the rules before executing the move:\nExample :handleSquareClick(pos: Coord) {\n  if (this.game.canMoveKnight(pos)) {\n    this.game.moveKnight(pos);\n  }\n}And voilà, your knight won't execute an illegal move. We will be replacing this\nclick handler in just a moment, but we have separated the game logic out, so we\ncan reuse those two functions.\nImplementing drag and drop\n\nAt this point, your code should be look like this commit.\n\nTake a moment to think about what we have to work with. We have:\n\nA KnightComponent which we want to be able to drag,\nMany SquareComponents on which he could be dropped,\nA way to express that state change (GameService.moveKnight),\nAnd a way to compute where we can drop him (GameService.canMoveKnight).\n\nOur strategy for implementing drag and drop is this:\n\nMake the knight draggable\nTurn all the squares into drop targets\nOnly allow drops into squares where canMoveKnight returns true\nOn each successful drop, call moveKnight, and Angular will re-render with\nthe new state.\nAdd some extra visuals to guide the interaction\n\nIf you have used other drag and drop libraries, this may seem a bit weird --\nwhat happens to the Knight that we're dragging after we drop him? The answer is,\nhe disappears. After step 1, we will have a knight you can pick up, but nothing\ninteresting will happen when we let go, except that the preview will vanish. We\nare going to do steps 3 and 4 on the drop targets, which are notified when you\ndrop something on them.\nPart 1. Make the knight draggable\nFirst, we need a type to describe what we're dragging, so that the squares can\nlisten for knights floating above them. Store a constant string \"KNIGHT\" in\na new file. This is better than typing the same string over and over, and serves\nas a single place where all your different chess piece types are defined.\nExample :// constants.ts\nexport const ItemTypes = {\n  KNIGHT: 'KNIGHT',\n};Then, make your KnightComponent into a drag source.\n\nInject DndService into your KnightComponent\nCreate a dead simple drag source which emits ItemTypes.KNIGHT, and a simple\n{} to represent what's being dragged. We don't need any more information\nthan that, but if you were doing >1 piece, you would have to specify which\nknight was being dragged. This is where you'd do it.\nAttach the drag source to the Knight's DOM element.\nIn ngOnDestroy, unsubscribe the drag source.\n\nHere's all four in one go:\nExample :import { Component } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\nimport { ItemTypes } from './constants';\n\n@Component({\n  selector: 'app-knight',\n                   // step 3\n  template: `♘`,\n  styles: [\n    `\n      span {\n        font-weight: 700;\n        font-size: 54px;\n      }\n    `,\n  ],\n})\nexport class KnightComponent {\n  // step 2\n  knightSource = this.dnd.dragSource(ItemTypes.KNIGHT, {\n    beginDrag: () => ({}),\n  });\n\n  // step 1\n  constructor(private dnd: DndService) {}\n\n  // step 4\n  ngOnDestroy() {\n    this.knightSource.unsubscribe();\n  }\n}Try dragging your little knight, and you'll find that you can. But the\ninteraction is slightly confusing - you can't tell at a glance that the knight\nis conceptually in-flight, it just looks like there are two knights. So let's\nlisten to whether we are dragging the knight, and make the stationary one look\ndifferent while we are.\n\nUse the DragSource.listen and DragSourceMonitor.isDragging methods to\nget an observable isDragging$ on your KnightComponent.\nUse that observable in your template to change styles\n\nExample :// component\n// (this is an Observable)\nisDragging$ = this.knightSource.listen(monitor => monitor.isDragging());Example :\n♘Example :/* in the style block */\n.dragging {\n  opacity: 0.25;\n}Now, the knight on the board will be a bit transparent when you've picked it up.\nYou could set it to opacity: 0, but in chess, players like to know where the\npiece came from. @ng-dnd makes no assumptions about how to render\nany elements, so you can always customise their appearance at any stage of the\ndrag and drop process.\nPart 2: Make the squares into drop targets\nBecause canMoveKnight has to be computed once per square, each square is going\nto have to know where it is on the board. However, the SquareComponent is\nperfectly good at what it does. We don't want to ruin a good thing. Let's wrap\nit with another component, BoardSquareComponent, that will handle the drag and drop,\nand leave the black and white rendering to SquareComponent. This is a basic wrapper\nwhich preserves the size of the underlying squares:\nExample :import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-board-square',\n  template: `\n    \n      \n        \n      \n    \n  `,\n  styles: [\n    `\n      :host,\n      .wrapper {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class BoardSquareComponent {\n  @Input() position: Coord;\n  get black() {\n    const { x, y } = this.position;\n    return (x + y) % 2 === 1;\n  }\n}Add it to your module, and replace the  in the BoardComponent\ntemplate with this:\nExample :\n  \nThen, we're going to add a drop target to BoardSquareComponent and attach it\nto that wrapper div. It's very similar to the drag source.\n\nInject DndService\nCreate a drop target\nAttach it to the DOM\nUnsubscribe it in ngOnDestroy.\n\nExample :import { Component, Input } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\nimport { ItemTypes } from './constants';\n\n@Component({\n  selector: 'app-board-square',\n  template: `\n                         \n    \n      \n        \n      \n    \n  `,\n  styles: [\n    `\n      :host,\n      .wrapper {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class BoardSquareComponent {\n  @Input() position: Coord;\n  get black() {\n    const { x, y } = this.position;\n    return (x + y) % 2 === 1;\n  }\n\n  // step 2\n  target = this.dnd.dropTarget(ItemTypes.KNIGHT, {});\n\n  // step 1\n  constructor(private dnd: DndService) {}\n\n  // step 4\n  ngOnDestroy() {\n    this.target.unsubscribe();\n  }\n}Parts 3 and 4: make the knight move around on drop\nNext up is to incorporate the game logic, and to actually move the knight. We're\ngoing to use two hooks in the drop target: DropTargetSpec.canDrop and\nDropTargetSpec.drop. We have already done the heavy lifting for both in\nGameService. Inject GameService in the constructor, and incorporate its\nmethods.\nExample :target = this.dnd.dropTarget(ItemTypes.KNIGHT, {\n    canDrop: monitor => {\n        return this.game.canMoveKnight(this.position);\n    },\n    drop: monitor => {\n        this.game.moveKnight(this.position);\n    }\n});\n\nconstructor(private dnd: DndService, private gme: GameService) {}Now you should be able to drag your knight around the board!\nPart 5: Extra visuals\nWe have some guidance already about where you can drop a knight. The mouse\ncursor gets a different icon depending on whether you can or not. But usually,\nthis is not enough of an indicator. Good UI means making difficult things\nobvious and learnable. Someone who has never seen a knight should be able to\nfigure out where one can go.\nIn that spirit, we will change the colour of the squares while dragging,\ndepending on whether they represent a valid move, and colour the square you're\nhovering over either red or green depending on whether dropping would result in\na move.\nThe procedure is almost identical to what we did for the Knight earlier on.\n\nUse the DropTarget.listen, DropTargetMonitor.canDrop and\nDropTargetMonitor.isOver methods to observe changes in drag state\nUse observables in your template to change styles on an overlay div.\n\nExample :// We are assuming RxJS 5.5+ here, but you can use plain Observable.map\nimport { map } from 'rxjs/operators';\n\n// template:Example :\n  \n    \n  \n  \nExample :export class BoardSquareComponent {\n  // ...\n  target = this.dnd.dropTarget(ItemTypes.KNIGHT, {\n    // ...\n  });\n\n  collected$ = this.target.listen(m => ({\n    canDrop: m.canDrop(),\n    isOver: m.isOver(),\n  }));\n\n  showOverlay$ = this.collected$.pipe(map(c => c.isOver || c.canDrop));\n\n  overlayStyle$ = this.collected$.pipe(\n    map(coll => {\n      let { canDrop, isOver } = coll;\n      let bg: string = 'rgba(0,0,0,0)';\n      if (canDrop && isOver) {\n        bg = 'green';\n      } else if (canDrop && !isOver) {\n        bg = 'yellow';\n      } else if (!canDrop && isOver) {\n        bg = 'red';\n      }\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: bg,\n      };\n    })\n  );\n\n  // ...\n}Here's what it looks like:\n\nLastly, we're going to customize the drag preview (that little knight that\nfollows the mouse around). @ng-dnd has some very powerful ways to\ncustomize this, but we're going to use a simple image. It's quite simple:\n\nCreate an Image\nWait for it to load\nConnect it to the knightSource as a drag preview\n\nWe can do this in just a few lines.\nExample :// ...\nexport class KnightComponent {\n  // ...\n\n  ngOnInit() {\n    const img = new Image();\n    img.src = // ... long 'data:image/png;base64' url\n      // regular 'https://' URLs work here too\n      img.onload = () => this.knightSource.connectDragPreview(img);\n  }\n}For that long URL, see this file.\nThen we get a funky horse as our preview.\n\nHave a go with the live demo here.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/translating-react-code.html":{"url":"additional-documentation/translating-react-code.html","title":"additional-page - Translating React Code","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTranslating React Code\nThere are many code examples and libraries on the web written for react-dnd,\nthe most important of which is the actual react-dnd\ndocumentation. In the\ninterest of making them useful or at least understandable, this library presents\na fairly similar API to the original. There are, of course, some differences\nmandated by the style and limitations of React and Angular. We will illustrate\nthis with the react-dnd DragSource compared to @ng-dnd's\nDndService.dragSource(). Here are the original API\ndocs on\nDragSource; the following is a small but complete example for a quick\nreference. If you know how to use react-dnd already, then this should show you\nmost of it. If you don't know react-dnd, this will help you read the example code demos in the react-dnd documentation.\nHere's a basic example in React:\nExample :let itemSourceSpec = {\n  beginDrag: (props, monitor) => {\n    return { someProperty: props.someProperty };\n  },\n  endDrag: (props, monitor, component) => {\n    if (monitor.didDrop()) {\n      component.fireAction(monitor.getItem());\n    }\n  },\n};\n@DragSource('ITEM', itemSourceSpec, (connect, monitor) => ({\n  connectDragSource: connect.connectDragSource(),\n  isDragging: monitor.isDragging(),\n}))\nexport class MyComponent extends React.Component {\n  fireAction() {\n    /* ... */\n  }\n  render() {\n    const { someProperty, isDragging } = this.props;\n    return connectDragSource(\n      \n        {someProperty}\n        {isDragging ? 'I am being dragged now' : null}\n      \n    );\n  }\n}And here's the Angular translation:\nExample :@Component({\n  template: `\n    \n      {{ someProperty }}\n       I am being dragged now \n    \n  `,\n})\nexport class MyComponent {\n  @Input() someProperty: string;\n  itemSource = dnd.dragSource('ITEM', {\n    beginDrag: monitor => {\n      return { someProperty: this.someProperty };\n    },\n    endDrag: monitor => {\n      if (monitor.didDrop()) {\n        this.fireAction(monitor.getItem());\n      }\n    },\n  });\n  collected$ = this.itemSource.listen(monitor => ({\n    isDragging: monitor.isDragging(),\n  }));\n  constructor(private dnd: DndService) {}\n  fireAction(item) {\n    /* ... */\n  }\n  ngOnDestroy() {\n    this.itemSource.destroy();\n  }\n}As you can see, the two are very similar. You should be able to take most\nReact/react-dnd examples and translate them quite directly into Angular. You\ncan almost copy and paste some parts.\n1. Biggest difference: Connections instead of Higher-Order Components\nThere is a React concept of 'props', similar to Input() in Angular. The\nprimary difference relevant to us is that in React you can create a 'wrapper' or\n'higher-order' component that will pass all of its props to the one it is\n'wrapping' or 'decorating', with extra behaviour or new props added. This is how\nreact-dnd works: wrap your component with @DragSource(type, spec, collect: (connect, monitor) => Object), and the output of the collect function is\ninjected into your component's props.\nIn Angular, we run everything inside your component, using methods on an\ninjected DndService to create connections. Connections are a go-between\nfor subscribing to the global drag state and can be connected to DOM\nelements. This difference is typical of the React Way and the Angular Way. You\ncan create more than one connection for a component, to accomplish the same\nthing as composing multiple decorators in react-dnd.\nThere are five other ways this approach makes for slightly different-looking but\nvery similar-functioning code.\n2. You must destroy the connection object when you are done with it.\nIn React, this is managed by the wrapper component. In Angular, you have to do\nit yourself. See ConnectionBase.unsubscribe.\n3. No props or component arguments in the spec callbacks\nThere are no props in Angular, as discussed above. Instead, all inputs to a component\nor properties relevant to the template are declared on the component class.\nTherefore, using this is appropriate instead. That also makes component\nmoot, since it would also refer to this. Therefore, all of the callbacks on the\ntwo *Spec interfaces have only monitor as an argument.\nOne thing to be aware of is that to access this in an function you pass\nelsewhere, you must use Arrow notation: (arrow) => this.notation; for your\nspec callbacks.\n4. Information about current drag state comes through an Observable\nIn react-dnd the collect((props, monitor) => {}) function supplies the\ncomponent props 'from above'. In Angular (here, DragSource.listen), the\nlibrary gives you an Observable you can subscribe to in your template. The\nexample above creates an Object { ... } and subscribes to it all in one go\n(the internals make this efficient), but you are free to do listen(m => m.isDragging()), with one subscription for each interesting value. You might\ncombine information from two different connections using\nObservable.combineLatest, for example.\nI found the terms connect and collect far too similar and confusing, so\nI renamed collect to listen.\n5. connectDragSource() (etc.) functions vs Angular directives\nIn the example above, connect.connectDragSource() returns a function that will\nlink up a particular part of the JSX template's DOM to the wrapper component. To\naccomplish the same thing in Angular we must connect some DOM from the template\nto a Connection object. The Angular Way to do this is with a directive,\nwhich connects to the DOM via its injected ElementRef. The Angular translation\nabove uses [dragSource]=\"itemSource\" on the same part of the template as the\nReact code does.\nSome React examples will have two different drag sources + associated connectors\n(on different DOM elements), or one source and one connectDragPreview. Angular\ncan do both patterns with directives, because each directive is linked to one Connection.\n6. Can't supply a dynamic type via a (props) => props.type callback, use setType instead\nImagine you want to make a component draggable based on type(s) specified on the\ncomponent inputs.\nreact-dnd allows strings and ES6 Symbols in the type argument. But you can\nalso pass a function of (props) => string|symbol; in this way, your item\ntypes can depend on the inputs to your component, and even change over time when\nthe props change. It's not a plain asynchronous callback like the rest of the\nspec, it is called when the props change on the decorating component, before any\nasynchronous drag operations start. Angular doesn't have a way for arbitrary\nobjects to listen to ngOnChanges(), so we have to do it manually.\nYou can supply a default type, or null, and update it in later as the\n@Input() property is populated. If you supply null, @ng-dnd will\ndefer connecting the DOM and the subscription to the monitor until this is\ndone. See DragSource.setType for more information.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/testing.html":{"url":"additional-documentation/testing.html","title":"additional-page - Testing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTesting\nUsage with Jest\nSee The React DnD testing\nguide for details about\nhow to use dnd-core and react-dnd-test-backend with Jest. In particular, you\nwill need to configure the moduleNameMapper as described there.\nTesting Components in Isolation\nThe Angular way of supplying drag state to components is not as easily testable\nas the React way. Currently it is not easy to isolate a component's rendering\nfrom the drag sources, drop targets and drag layers it listens to.\nThe Test Backend\nReact DnD offers a test backend that does not require the DOM, and offers an\nAPI for easy simulation of drag and drop events. This is useful for testing an\nentire drag and drop interaction. (Imagine trying to construct the exact mouse\nevents that represent a drag, just to do basic tests!) It is also useful as a\nlightweight no-op backend if you do not need to test the drag and drop\ninteraction.\nInstall it with:\nExample :yarn add -D react-dnd-test-backendExample usage (example component defined below):\nExample :// Import the test backend\nimport { createTestBackend, TestBackend } from 'react-dnd-test-backend';\n// We will need to find the DragDropManager to access the backend through\n// dependency injection\nimport { DndModule, DRAG_DROP_MANAGER } from '@ng-dnd/core';\n\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\ndescribe(MyComponent.name, () => {\n  let component: MyComponent;\n  let fixture: ComponentFixture;\n\n  // Use this backend to drive drag and drop interactions\n  let backend: TestBackend;\n\n  // We will store the handler ID for each, to pass to the test backend.\n  let source: any;\n  let target: any;\n\n  // MyComponent should render differently while dragging\n  const draggingClassApplied = () => {\n    return fixture.debugElement.query(By.css('.dragging')) != null;\n  };\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // supply the test backend when creating the testing module\n        DndModule.forRoot({ backend: createTestBackend }),\n      ],\n      declarations: [MyComponent],\n    });\n  }));\n\n  beforeEach(() => {\n    // grab the manager\n    const manager = TestBed.get(DRAG_DROP_MANAGER);\n    // grab the backend off the manager\n    backend = manager.getBackend();\n    fixture = TestBed.createComponent(MyComponent);\n    component = fixture.componentInstance;\n    // the source and target handler IDs are available after change\n    // detection\n    fixture.detectChanges();\n    source = component.source.getHandlerId();\n    target = component.target.getHandlerId();\n  });\n\n  it('should drag and then drop', () => {\n    // pick up the drag source\n    backend.simulateBeginDrag([source]);\n\n    // check that it rendered differently\n    fixture.detectChanges();\n    expect(draggingClassApplied()).toBeTruthy();\n\n    // hover over the target\n    backend.simulateHover([target]);\n    // drop over the most recently hovered target(s)\n    backend.simulateDrop();\n    // complete the interaction\n    backend.simulateEndDrag();\n\n    fixture.detectChanges();\n    expect(draggingClassApplied()).toBeFalsy();\n  });\n});Example :import { Component } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\n@Component({\n  template: `\n    \n    \n  `,\n})\nclass MyComponent {\n  source = this.dnd.dragSource('TEST', {\n    beginDrag: () => ({}),\n  });\n  target = this.dnd.dropTarget('TEST', {});\n  isDragging$ = this.source.listen(m => m.isDragging());\n  constructor(private dnd: DndService) {}\n  ngOnDestroy() {\n    this.source.unsubscribe();\n    this.target.unsubscribe();\n  }\n}\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
