var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AddSubscription.html",[0,0.909,1,2.654]],["body/interfaces/AddSubscription.html",[1,3.553,2,1.093,3,0.638,4,0.475,5,3.918,6,1.352,7,3.918,8,3.387,9,2.63,10,4.407,11,3.019,12,4.407,13,5.149,14,5.309,15,5.149,16,3.004,17,2.323,18,1.958,19,0.596,20,0.877,21,5.149,22,4.595,23,2.63,24,5.149,25,1.216,26,0.019,27,1.093,28,0.436,29,1.035,30,0.823,31,1.352,32,0.017,33,0.017]],["title/interfaces/BackendInput.html",[0,0.909,34,2.436]],["body/interfaces/BackendInput.html",[2,1.013,3,0.592,4,0.44,6,1.253,19,0.552,26,0.019,28,0.546,29,1.353,32,0.016,33,0.016,34,3.023,35,2.606,36,3.294,37,2.288,38,4.772,39,3.632,40,2.606,41,4.085,42,2.167,43,2.865,44,1.726,45,5.511,46,4.507,47,2.288,48,1.917,49,4.085,50,2.839,51,2.288,52,2.252,53,3.752,54,4.772,55,4.772,56,3.294,57,1.629,58,3.632,59,4.772,60,4.772,61,4.772,62,4.085,63,4.772,64,1.069,65,4.085,66,4.085]],["title/classes/Connection.html",[67,1.385,68,1.313]],["body/classes/Connection.html",[3,0.429,4,0.319,16,2.162,19,0.4,20,0.677,22,3.307,25,1.654,26,0.02,27,1.471,28,0.607,29,1.393,30,1.119,31,1.693,32,0.013,33,0.013,43,2.526,68,1.18,69,1.245,70,2.028,71,2.028,72,2.447,73,3.646,74,3.646,75,4.101,76,4.185,77,1.822,78,4.791,79,3.646,80,4.101,81,2.636,82,3.646,83,4.101,84,1.471,85,3.458,86,3.795,87,2.81,88,3.036,89,4.791,90,2.81,91,4.791,92,4.087,93,3.307,94,2.631,95,2.631,96,3.458,97,2.028,98,2.959,99,2.631,100,1.472,101,3.458,102,3.738,103,2.617,104,3.458,105,2.81,106,3.458,107,2.959,108,1.008,109,2.959,110,2.959,111,2.959,112,1.766,113,3.458,114,2.959,115,2.039,116,2.447,117,2.959,118,2.959]],["title/interfaces/ConnectionBase.html",[0,0.909,119,2.1]],["body/interfaces/ConnectionBase.html",[2,0.701,3,0.41,4,0.305,6,0.867,8,2.535,9,1.687,14,2.828,16,2.094,17,1.491,18,1.256,19,0.382,20,0.759,22,3.203,23,1.687,25,1.268,26,0.02,27,0.985,28,0.493,29,0.933,30,0.858,31,1.409,32,0.013,33,0.013,48,1.884,52,1.765,64,0.74,68,1.832,77,1.765,81,2.79,94,2.514,95,2.514,100,1.883,108,1.353,109,2.828,112,1.687,119,1.804,120,2.093,121,2.093,122,3.304,123,2.093,124,1.069,125,3.304,126,1.804,127,2.828,128,3.304,129,1.328,130,2.828,131,3.304,132,1.491,133,2.535,134,2.828,135,3.147,136,2.535,137,2.093,138,2.514,139,3.304,140,2.093,141,3.304,142,2.828,143,2.093,144,3.203,145,3.304,146,1.584,147,1.975,148,3.304,149,1.491,150,2.828,151,4.641,152,3.304,153,3.304,154,3.304,155,2.722,156,2.828,157,1.937,158,2.828,159,1.937,160,3.304,161,3.304,162,1.584,163,2.828,164,2.514,165,3.304,166,3.304,167,0.78,168,1.328,169,2.094,170,2.828,171,1.937,172,3.304,173,2.828,174,2.477,175,2.828,176,3.304,177,2.514,178,2.093,179,2.828,180,3.304,181,2.28,182,3.304,183,3.304,184,2.514,185,1.804,186,2.28,187,3.304,188,3.304,189,1.406,190,2.28,191,1.687,192,2.514,193,3.304,194,2.094,195,2.514,196,2.093,197,3.304,198,1.937,199,3.304,200,2.828,201,3.304,202,1.19,203,2.828,204,3.304,205,3.532,206,3.304,207,1.491,208,2.093,209,3.304,210,1.584,211,1.19,212,1.937,213,2.828,214,2.28,215,2.828,216,1.687,217,3.304,218,1.687,219,3.304,220,1.687,221,2.828,222,3.304,223,2.514,224,2.28,225,1.937,226,1.804,227,3.304,228,3.304]],["title/interfaces/Connector.html",[0,0.909,97,2.255]],["body/interfaces/Connector.html",[2,1.086,3,0.634,4,0.472,19,0.592,20,0.874,25,1.209,26,0.02,27,1.086,28,0.524,29,1.028,30,0.988,31,1.622,32,0.017,33,0.017,44,1.801,97,3,98,5.289,211,2.226,229,3.531,230,4.207,231,3.915,232,4.582,233,3.894,234,3.624,235,3.531]],["title/modules/DndModule.html",[40,2.1,236,2.436]],["body/modules/DndModule.html",[3,0.668,4,0.497,20,0.761,25,1.273,26,0.019,27,1.143,28,0.457,29,1.082,30,0.861,32,0.017,33,0.017,34,4.3,35,2.942,36,3.718,40,2.942,237,3.718,238,4.099,239,5.809,240,4.61,241,4.61,242,5.386,243,5.386]],["title/injectables/DndService.html",[129,1.546,244,2.654]],["body/injectables/DndService.html",[1,4.261,3,0.375,4,0.279,5,2.3,6,1.144,7,2.3,8,2.79,9,3.441,17,1.966,19,0.35,20,0.616,23,1.544,25,1.459,26,0.02,27,1.084,28,0.59,29,1.027,30,0.817,32,0.012,33,0.012,48,0.978,51,1.449,64,0.677,68,1.487,81,1.449,92,2.76,115,1.854,116,2.225,124,0.978,129,1.215,132,1.966,135,1.772,140,1.915,144,3.007,146,2.089,147,2.522,149,1.364,167,1.321,189,2.174,202,1.569,205,3.315,207,1.364,211,2.224,216,2.225,218,2.225,225,1.772,226,1.65,245,3.022,246,1.915,247,1.487,248,2.587,249,2.086,250,3.022,251,2.587,252,3.022,253,3.022,254,2.587,255,2.086,256,1.449,257,3.022,258,3.315,259,3.022,260,2.609,261,3.022,262,1.449,263,3.022,264,2.379,265,1.364,266,1.772,267,3.022,268,1.286,269,2.3,270,3.022,271,2.3,272,1.915,273,1.144,274,2.587,275,3.022,276,3.022,277,1.915,278,3.022,279,3.022,280,3.022,281,4.698,282,3.053,283,2.172,284,2.379,285,3.022,286,2.68,287,3.007,288,1.657,289,3.888,290,2.587,291,2.054,292,2.76,293,1.085,294,1.772,295,1.915,296,1.751,297,3.022,298,1.65,299,3.022,300,2.587,301,2.587,302,1.544,303,3.315,304,2.3,305,2.587,306,2.587,307,3.022,308,3.022,309,2.086,310,3.022,311,1.65,312,3.022,313,2.086,314,1.338,315,1.286,316,3.022,317,2.555,318,4.356,319,3.007,320,2.089,321,3.729,322,3.315,323,3.022,324,3.022,325,3.022,326,1.65]],["title/interfaces/DragLayer.html",[0,0.909,282,2.1]],["body/interfaces/DragLayer.html",[2,0.604,3,0.353,4,0.263,6,0.748,18,1.083,19,0.33,20,0.59,25,0.986,26,0.019,27,0.604,28,0.53,29,0.572,30,0.455,31,0.748,32,0.011,33,0.011,37,1.365,42,1.778,48,1.599,51,1.365,56,1.966,57,1.686,64,1.218,77,2.201,81,1.365,100,1.282,102,1.555,108,1.216,112,1.455,119,2.279,120,1.804,121,1.804,133,1.555,163,2.438,164,2.167,167,1.708,168,2.431,169,2.228,171,1.67,174,2.101,177,2.167,178,2.644,191,1.455,202,1.026,210,1.365,212,1.67,215,2.438,216,2.131,218,1.455,226,1.555,247,1.686,256,1.365,265,1.285,268,2.463,271,2.167,282,2.279,286,2.368,293,0.709,296,1.145,309,3.408,313,1.966,327,1.67,328,3.176,329,0.922,330,3.758,331,2.279,332,2.848,333,3.339,334,2.848,335,2.167,336,2.848,337,1.966,338,1.966,339,1.365,340,2.848,341,2.848,342,3.571,343,3.994,344,2.848,345,2.438,346,2.438,347,1.966,348,4.649,349,2.167,350,4.173,351,4.603,352,2.848,353,2,354,2.644,355,1.67,356,2.279,357,1.966,358,2.848,359,1.966,360,2.438,361,2.848,362,2.848,363,2.848,364,2.848,365,2.167,366,2.848,367,1.455,368,1.804,369,2.848,370,1.285,371,2.896,372,2.167,373,1.455,374,2.368,375,1.966,376,1.966,377,2.438,378,1.804,379,3.176,380,1.966,381,2.438,382,2.848,383,2.438,384,2.167,385,2.848,386,1.212,387,1.804,388,1.285,389,2.167,390,2.848,391,2.167,392,2.848,393,2.848,394,4.173,395,2.848,396,2.848,397,2.438,398,2.644,399,2.848,400,1.67,401,2.438,402,2.167,403,1.555,404,2.848,405,2.167,406,2.848,407,2.438,408,1.67,409,2.848,410,1.67,411,1.285,412,1.966,413,2.848,414,2.167,415,2.848,416,2.848,417,2.88,418,1.804,419,1.804,420,2.167,421,1.555,422,2.167,423,1.966,424,2.438,425,2.438,426,2.848,427,2.848,428,2.848,429,2.848,430,3.571,431,1.966,432,2.438,433,1.455,434,2.848]],["title/classes/DragLayerConnectionClass.html",[67,1.385,435,2.927]],["body/classes/DragLayerConnectionClass.html",[3,0.551,4,0.41,16,2.556,19,0.515,20,0.801,22,3.91,25,1.551,26,0.02,27,1.323,28,0.587,29,1.253,30,0.997,31,1.487,32,0.015,33,0.015,44,1.651,69,1.602,77,2.154,81,3.25,82,4.311,83,4.849,84,1.892,87,2.608,88,3.589,90,3.849,94,3.384,95,3.384,100,1.366,107,3.806,108,1.296,110,3.806,111,3.806,112,2.271,118,3.806,282,2.428,329,1.44,348,3.069,371,2.608,435,3.384,436,3.806,437,3.806,438,2.006,439,5.665,440,5.665,441,5.665,442,3.384,443,1.892,444,2.132]],["title/interfaces/DragLayerMonitor.html",[0,0.909,371,2.255]],["body/interfaces/DragLayerMonitor.html",[2,1.132,3,0.661,4,0.492,6,1.4,18,2.029,19,0.617,20,0.896,26,0.018,30,0.853,32,0.017,33,0.017,50,2.557,108,1.555,167,1.26,194,3.05,282,2.913,370,2.407,371,3.128,444,2.557,445,4.565,446,3.681,447,2.557,448,2.913,449,2.144,450,2.913,451,4.059,452,3.681]],["title/directives/DragPreviewDirective.html",[298,2.1,453,2.654]],["body/directives/DragPreviewDirective.html",[3,0.604,4,0.449,6,1.279,18,1.853,19,0.564,20,0.848,26,0.019,28,0.508,30,0.779,31,1.279,32,0.016,33,0.016,35,2.66,42,1.496,43,2.073,103,3.549,167,1.417,268,2.073,283,2.218,288,1.853,293,1.213,296,2.411,320,2.336,331,3.275,333,3.064,337,3.362,438,2.198,449,1.959,453,3.362,454,2.336,455,3.362,456,2.336,457,3.087,458,3.087,459,3.708,460,3.708,461,3.708,462,3.362,463,5.562,464,3.708,465,4.117,466,3.8]],["title/interfaces/DragPreviewOptions.html",[0,0.909,103,2.1]],["body/interfaces/DragPreviewOptions.html",[2,0.698,3,0.408,4,0.303,6,0.864,19,0.381,26,0.018,28,0.519,29,1.379,32,0.013,33,0.013,37,2.219,43,1.4,44,1.349,50,2.219,57,1.123,102,2.527,103,1.797,133,1.797,137,2.085,167,1.621,195,2.504,202,1.667,211,1.667,220,2.364,247,1.123,283,1.123,293,1.153,296,2.336,302,1.681,311,3.173,328,2.504,329,2.056,333,3.504,337,2.271,343,2.271,353,1.577,367,1.681,373,2.364,374,2.219,391,2.504,443,1.97,444,2.219,449,2.153,467,2.504,468,5.81,469,5.81,470,4.583,471,5.81,472,5.81,473,3.746,474,4.01,475,4.01,476,4.973,477,5.81,478,3.724,479,3.522,480,4.628,481,3.29,482,4.628,483,4.628,484,4.964,485,4.973,486,2.816,487,4.628,488,4.628,489,3.29,490,4.583,491,2.504,492,2.504,493,3.29,494,2.504,495,2.504,496,1.797,497,2.085,498,3.29,499,3.29,500,3.29,501,1.797,502,2.816,503,4.628,504,3.29,505,2.816,506,3.29,507,3.29,508,3.29,509,3.29,510,3.29,511,2.085,512,2.504,513,4.628,514,1.4,515,3.29,516,1.93,517,3.29,518,3.29,519,1.93,520,2.271,521,3.194,522,3.962]],["title/interfaces/DragSource.html",[0,0.909,283,1.313]],["body/interfaces/DragSource.html",[2,0.64,3,0.374,4,0.278,6,0.792,9,3.025,17,1.361,18,1.147,19,0.349,20,0.721,25,1.206,26,0.02,27,1.186,28,0.578,29,1.025,30,0.947,31,0.792,32,0.012,33,0.012,37,2.086,42,0.926,43,2.377,48,1.808,64,1.143,68,1.485,72,2.607,73,3.311,74,3.311,76,3.884,79,3.884,100,1.336,102,3.369,103,2.376,105,2.551,114,2.582,115,2.377,116,2.222,119,1.647,120,1.911,121,1.911,124,1.808,129,1.213,134,2.582,146,1.446,149,1.361,157,2.551,159,1.769,167,1.206,168,1.213,174,1.284,202,1.086,247,1.03,256,2.086,260,2.607,262,1.446,273,0.792,283,2.106,284,1.284,286,1.446,287,2.082,289,3.311,291,1.213,293,1.271,295,1.911,296,1.749,302,2.607,314,0.926,319,2.082,333,1.541,338,3.003,398,3.539,400,1.769,403,1.647,408,1.769,410,1.769,411,2.302,454,2.086,456,2.446,465,2.756,473,1.647,501,2.376,514,2.172,523,2.296,524,1.911,525,2.582,526,2.296,527,2.296,528,2.582,529,1.911,530,3.016,531,3.003,532,3.003,533,3.003,534,2.756,535,3.016,536,1.769,537,2.296,538,2.296,539,3.016,540,2.296,541,3.724,542,3.724,543,3.311,544,3.724,545,3.724,546,3.016,547,2.582,548,2.082,549,3.724,550,2.582,551,2.082,552,2.296,553,2.756,554,2.582,555,2.082,556,2.296,557,3.016,558,3.016,559,4.351,560,1.911,561,3.016,562,3.016,563,3.016,564,3.016,565,3.016,566,3.016,567,3.016,568,3.016,569,3.016,570,3.016,571,3.016,572,1.541]],["title/directives/DragSourceDirective.html",[298,2.1,573,2.654]],["body/directives/DragSourceDirective.html",[3,0.548,4,0.408,6,1.161,18,1.682,19,0.512,20,0.798,26,0.02,28,0.574,30,0.707,31,1.161,32,0.015,33,0.015,35,2.415,42,1.358,43,1.882,50,2.12,56,3.052,64,1.264,68,1.51,72,2.883,105,3.646,115,1.882,116,2.259,124,1.432,155,2.594,207,1.996,247,1.51,268,1.882,283,2.401,288,1.682,293,1.102,296,1.778,320,2.12,329,1.432,331,3.083,333,2.259,353,2.12,438,1.996,443,1.882,444,2.12,449,2.269,454,2.12,455,3.052,456,2.12,459,3.366,460,3.366,461,3.366,462,3.052,464,3.366,465,3.939,466,3.577,470,3.786,520,3.052,573,3.052,574,5.645,575,5.645,576,3.786,577,3.786,578,1.996,579,3.786,580,4.423,581,4.423,582,4.423]],["title/interfaces/DragSourceMonitor.html",[0,0.909,583,1.964]],["body/interfaces/DragSourceMonitor.html",[2,0.782,3,0.457,4,0.34,6,0.967,17,1.662,18,1.401,19,0.426,20,0.803,26,0.019,30,1.155,32,0.014,33,0.014,47,1.766,48,1.62,50,2.725,51,1.766,64,0.825,77,1.401,108,1.074,126,2.012,162,2.399,167,1.343,194,2.751,207,1.662,211,1.327,216,2.556,246,2.334,264,2.012,273,1.492,288,1.903,291,1.481,292,2.334,293,0.918,302,1.882,314,2.175,315,2.13,370,1.662,405,2.804,410,2.16,422,2.804,444,2.399,446,2.543,447,1.766,448,2.012,449,2.644,450,2.733,451,3.809,452,2.543,457,2.334,492,2.804,496,2.012,519,2.16,534,3.171,551,2.543,560,2.334,583,1.882,584,3.153,585,3.684,586,4.262,587,4.208,588,3.923,589,3.153,590,2.935,591,1.882,592,3.684,593,3.153,594,2.012,595,3.684,596,3.684,597,3.153,598,2.804,599,3.684,600,3.153,601,3.153,602,2.804,603,3.863,604,3.333,605,2.543,606,3.171,607,3.153,608,2.804,609,3.153,610,3.153,611,3.153,612,3.153,613,3.153,614,2.804,615,3.153,616,3.153,617,3.454,618,2.804,619,3.153]],["title/classes/DragSourceMonitorClass.html",[67,1.385,620,2.927]],["body/classes/DragSourceMonitorClass.html",[3,0.528,4,0.393,19,0.493,20,0.779,25,1.302,26,0.02,27,1.17,28,0.548,29,1.108,30,1.166,31,1.119,32,0.015,33,0.015,44,1.606,69,1.535,84,1.813,87,2.499,93,4.216,194,2.756,231,3.492,234,3.583,438,1.923,442,3.243,583,2.177,586,3.871,587,4.216,588,4.216,620,3.243,621,2.941,622,4.718,623,5.229,624,4.649,625,4.649,626,4.649,627,4.649,628,4.649,629,4.649,630,4.649,631,3.647,632,4.261]],["title/interfaces/DragSourceOptions.html",[0,0.909,105,2.255]],["body/interfaces/DragSourceOptions.html",[2,1.01,3,0.59,4,0.439,6,1.249,19,0.551,26,0.02,28,0.403,29,1.188,32,0.016,33,0.016,42,1.461,44,1.723,51,2.281,57,1.624,64,1.066,105,2.79,115,2.025,133,3.228,202,1.714,283,2.018,317,2.79,329,1.54,349,3.621,374,2.281,402,3.621,418,3.015,467,3.621,520,3.284,521,4.079,633,4.758,634,5.504,635,4.438,636,4.773,637,5.059,638,5.059,639,4.758,640,3.284,641,4.758,642,4.073,643,4.758,644,4.758,645,4.758,646,4.758,647,4.073,648,4.758,649,4.758]],["title/interfaces/DragSourceSpec.html",[0,0.909,291,1.546]],["body/interfaces/DragSourceSpec.html",[0,1.092,2,0.54,3,0.316,4,0.235,6,0.668,17,1.732,18,0.968,19,0.295,20,0.543,25,1.304,26,0.02,27,1.092,28,0.548,29,1.338,30,0.883,31,0.668,32,0.01,33,0.013,42,0.782,44,0.742,47,1.84,48,1.496,50,1.84,51,1.221,58,1.937,64,0.57,108,1.756,115,1.083,123,1.613,129,1.024,135,1.493,136,1.39,147,1.083,155,1.493,157,1.493,162,2.647,167,1.216,169,1.149,174,1.083,181,1.757,185,1.39,194,1.732,202,1.383,210,2.467,216,1.3,224,1.757,247,2.117,260,1.3,269,1.937,273,1.008,274,2.179,277,2.432,286,1.84,288,1.46,291,1.024,292,2.432,293,1.446,303,1.937,309,2.649,313,1.757,314,1.696,315,1.634,320,1.221,326,1.39,327,1.493,329,1.496,335,1.937,339,1.84,370,1.732,372,1.937,373,1.3,374,2.216,386,1.083,408,3.404,411,1.149,412,1.757,423,1.757,433,1.961,447,1.84,449,1.024,450,1.39,473,2.096,494,1.937,495,1.937,496,1.39,511,1.613,514,1.083,516,1.493,524,1.613,527,1.937,536,1.493,555,1.757,560,1.613,572,2.82,578,1.149,583,3.355,586,2.432,591,2.628,594,1.39,603,1.613,604,3.018,606,1.613,619,2.179,634,2.179,635,2.649,636,1.757,647,2.179,650,2.179,651,1.937,652,1.937,653,1.493,654,1.613,655,1.757,656,2.179,657,1.937,658,2.546,659,2.546,660,2.546,661,2.546,662,2.179,663,1.937,664,2.546,665,3.286,666,4.621,667,2.546,668,3.839,669,3.839,670,2.179,671,1.757,672,1.937,673,2.546,674,3.839,675,2.546,676,2.546,677,2.546,678,2.546,679,2.546,680,2.546,681,2.179,682,1.757,683,2.546,684,2.179,685,2.179,686,2.546,687,2.649,688,1.937,689,2.546,690,1.937,691,2.546,692,2.179,693,2.179,694,2.179,695,2.546,696,2.179,697,2.546,698,2.546,699,2.546,700,2.179,701,2.546,702,2.546,703,2.546,704,1.757,705,2.546,706,1.493,707,2.179,708,2.546,709,2.546,710,2.546,711,2.546,712,1.493,713,3.839,714,1.937,715,2.546,716,2.179,717,2.546,718,2.179,719,2.546,720,1.937,721,2.179,722,2.546,723,2.179,724,2.546,725,2.922,726,2.546,727,1.757,728,1.757,729,2.649,730,2.179,731,1.937,732,1.493,733,1.3,734,2.179,735,2.179,736,2.179,737,1.937,738,2.179]],["title/interfaces/DropTarget.html",[0,0.909,284,1.636]],["body/interfaces/DropTarget.html",[2,0.855,3,0.5,4,0.372,6,1.058,7,3.067,9,3.037,17,1.818,18,1.533,19,0.466,20,0.751,25,1.256,26,0.019,27,1.128,28,0.583,29,1.068,30,1.011,31,1.058,32,0.014,33,0.014,37,1.932,42,1.238,48,1.305,57,1.376,64,0.903,68,1.376,72,2.714,75,4.549,76,4.525,77,1.533,80,4.549,92,3.367,100,1.238,102,3.247,117,3.449,119,2.201,120,2.553,121,2.553,124,1.925,129,1.62,132,1.818,157,2.363,159,2.363,167,0.952,168,1.62,174,2.261,256,1.932,260,2.058,262,1.932,273,1.561,283,1.814,284,2.53,287,2.781,294,2.363,295,2.553,296,2.136,302,3.037,314,1.826,319,2.781,400,2.363,408,2.363,411,1.818,454,1.932,456,2.548,501,2.201,514,2.261,529,2.553,531,2.781,532,2.781,533,2.781,534,2.553,541,3.449,542,3.449,543,3.067,544,3.449,545,3.449,547,3.449,548,2.781,549,4.549,550,3.449,551,2.781,552,3.067,553,2.553,594,2.201,712,2.363,733,2.058,739,4.03]],["title/directives/DropTargetDirective.html",[298,2.1,740,2.927]],["body/directives/DropTargetDirective.html",[3,0.546,4,0.406,6,1.155,11,3.299,18,1.673,19,0.509,20,0.795,25,1.039,26,0.019,27,0.934,28,0.573,29,0.884,30,0.899,31,1.477,32,0.015,33,0.015,35,2.402,56,3.036,64,0.985,68,1.502,72,2.874,82,4.281,92,4.142,124,1.424,155,2.58,207,1.985,247,1.502,273,1.155,284,2.941,296,1.769,384,4.281,438,1.985,449,1.769,454,2.109,455,3.036,456,2.109,459,3.348,460,3.348,461,3.348,462,3.036,464,3.348,465,3.929,466,3.564,576,3.765,577,3.765,578,1.985,579,3.765,740,3.348,741,6.537,742,6.537,743,5.626,744,5.626,745,4.815,746,5.626,747,5.626,748,4.399,749,3.348]],["title/interfaces/DropTargetMonitor.html",[0,0.909,750,1.964]],["body/interfaces/DropTargetMonitor.html",[2,0.793,3,0.463,4,0.344,6,0.98,17,1.685,18,1.42,19,0.432,20,0.809,25,0.882,26,0.019,27,0.793,28,0.485,29,0.75,30,1.151,32,0.014,33,0.014,43,1.589,47,1.79,50,2.744,51,2.422,64,0.837,77,1.42,108,1.088,162,1.79,167,1.193,196,3.2,198,3.596,211,1.345,216,2.58,264,2.039,273,1.61,288,1.921,289,2.842,292,2.366,302,1.908,314,2.223,315,2.149,320,1.79,370,1.685,373,1.908,386,1.589,410,2.19,444,2.422,446,2.577,447,1.79,448,2.039,449,2.654,450,2.758,451,3.844,452,2.577,457,2.366,492,2.842,501,2.039,534,3.2,551,2.577,560,2.366,587,4.232,588,3.95,589,3.196,590,2.19,602,2.842,603,3.885,605,2.577,606,3.2,607,3.196,608,2.842,609,3.196,610,4.323,611,3.196,612,3.196,613,3.196,614,4.356,615,3.196,616,3.196,617,2.577,618,3.844,706,2.19,750,1.908,751,3.196,752,3.734,753,3.196,754,5.051,755,3.734,756,2.842,757,2.842,758,3.196,759,3.196,760,2.842,761,3.734]],["title/classes/DropTargetMonitorClass.html",[67,1.385,762,2.927]],["body/classes/DropTargetMonitorClass.html",[3,0.51,4,0.379,19,0.476,20,0.761,25,1.419,26,0.02,27,1.274,28,0.561,29,1.207,30,1.16,31,1.079,32,0.015,33,0.015,43,1.749,44,1.569,69,1.481,84,1.749,87,2.411,93,4.144,196,3.411,198,3.521,231,3.411,234,3.521,288,2.048,329,1.331,438,1.855,442,3.129,443,1.749,444,1.971,587,4.144,588,4.144,622,4.609,624,4.569,625,4.569,626,4.569,627,4.569,628,4.569,629,4.569,630,4.569,631,3.519,750,2.1,753,3.519,758,3.519,762,3.129,763,2.837,764,6.004,765,4.111]],["title/interfaces/DropTargetSpec.html",[0,0.909,132,1.735]],["body/interfaces/DropTargetSpec.html",[2,0.739,3,0.431,4,0.321,6,0.913,17,2.686,19,0.403,20,0.68,25,1.476,26,0.019,27,1.171,28,0.53,29,1.378,30,0.952,31,1.263,32,0.013,33,0.013,47,2.307,50,1.668,51,2.307,57,1.188,58,3.663,64,0.779,108,1.608,123,2.205,126,1.9,129,1.399,132,1.57,135,2.041,136,2.628,140,2.205,147,1.481,155,2.041,162,2.307,167,0.822,169,1.57,185,1.9,198,3.235,200,2.978,202,1.253,210,1.668,216,2.818,224,2.402,247,1.883,273,1.697,277,2.205,286,2.854,288,1.83,291,1.935,292,2.205,293,1.199,303,2.648,314,2.035,315,1.481,329,1.126,339,2.307,342,2.978,356,1.9,370,1.57,380,2.402,386,1.481,418,2.205,433,1.777,444,1.668,447,1.668,449,1.399,452,2.402,458,2.205,494,2.648,501,1.9,534,2.205,578,1.57,590,2.041,591,2.458,603,2.205,604,2.041,605,2.402,606,2.205,614,3.663,618,2.648,651,2.648,652,2.648,653,2.041,654,3.049,655,2.402,682,3.808,700,2.978,728,2.402,729,3.321,730,2.978,731,2.648,732,2.041,733,2.458,734,2.978,735,2.978,736,2.978,737,2.648,738,2.978,750,3.449,766,2.978,767,3.48,768,2.978,769,3.48,770,3.48,771,2.402,772,2.978,773,2.978,774,3.48,775,3.48,776,3.48,777,3.48,778,3.48,779,3.48,780,2.978,781,3.48,782,3.48,783,2.978]],["title/interfaces/FactoryArgs.html",[0,0.909,86,2.654]],["body/interfaces/FactoryArgs.html",[2,1.1,3,0.643,4,0.478,19,0.6,26,0.02,28,0.587,32,0.017,33,0.017,44,1.815,70,3.039,71,3.039,86,3.576,100,2.253,784,6.676,785,6.676,786,6.676,787,6.676]],["title/interfaces/MonitorBase.html",[0,0.909,448,2.1]],["body/interfaces/MonitorBase.html",[2,0.791,3,0.462,4,0.344,6,0.978,19,0.431,20,0.808,26,0.02,28,0.316,30,1.157,32,0.014,33,0.014,69,1.342,108,1.086,115,1.586,116,1.903,124,1.633,157,2.185,167,1.191,211,2.606,255,2.572,286,3.402,291,1.498,293,0.928,296,2.027,356,2.754,373,3.446,374,3.335,375,2.572,378,3.195,379,4.871,448,2.035,450,2.035,478,3.754,479,4.662,624,4.351,625,4.351,626,4.351,627,4.351,628,4.351,629,4.351,630,4.351,788,3.189,789,3.189,790,6.401,791,5.243,792,3.726,793,5.043,794,4.893,795,3.726,796,2.836,797,5.043,798,3.726,799,3.189]],["title/interfaces/Offset.html",[0,0.909,478,2.255]],["body/interfaces/Offset.html",[2,1.114,3,0.651,4,0.484,6,1.378,19,0.607,26,0.019,28,0.569,32,0.017,33,0.017,44,1.829,47,2.516,425,5.745,473,3.798,478,3.078,800,3.994,801,3.994,802,5.248,803,5.248,804,5.953,805,5.953]],["title/classes/Reconnector.html",[67,1.385,806,2.927]],["body/classes/Reconnector.html",[3,0.588,4,0.437,19,0.549,25,1.121,26,0.02,27,1.007,28,0.586,29,1.436,31,1.245,32,0.016,33,0.016,43,2.511,44,1.72,69,1.709,81,2.275,84,2.019,100,1.457,102,3.507,164,4.49,211,1.709,232,4.072,235,4.432,322,4.49,329,1.91,443,2.511,806,3.611,807,4.061,808,5.9,809,4.744,810,4.744,811,4.744,812,4.744]],["title/classes/Source.html",[67,1.385,293,0.958]],["body/classes/Source.html",[3,0.57,4,0.424,19,0.532,20,0.818,25,1.57,26,0.02,27,1.344,28,0.563,29,1.272,30,1.095,31,1.519,32,0.016,33,0.016,69,1.656,84,1.956,90,3.896,99,3.499,100,1.412,108,1.686,147,1.956,194,2.61,283,1.569,291,2.326,293,1.145,438,2.074,572,3.234,583,2.955,586,4.011,604,3.712,623,4.952,749,4.403,813,3.499,814,4.952,815,3.935,816,4.597,817,4.597,818,3.935]],["title/classes/SourceConnector.html",[67,1.385,819,2.927]],["body/classes/SourceConnector.html",[3,0.588,4,0.437,19,0.549,20,0.834,25,1.394,26,0.02,27,1.252,28,0.544,29,1.186,30,0.943,31,1.549,32,0.016,33,0.016,42,1.972,44,1.72,69,1.709,84,2.019,97,2.782,211,2.125,229,3.274,230,3.738,231,3.738,232,4.432,233,3.611,234,3.46,235,3.274,281,5.361,283,1.62,329,1.536,438,2.141,443,2.019,463,4.061,819,3.611,820,4.061,821,4.744,822,4.744,823,4.744]],["title/interfaces/SourceConstructor.html",[0,0.909,824,2.654]],["body/interfaces/SourceConstructor.html",[2,1.22,3,0.713,4,0.53,26,0.018,32,0.018,33,0.018,70,3.37,71,3.37,824,3.966]],["title/classes/Target.html",[67,1.385,273,1.009]],["body/classes/Target.html",[3,0.572,4,0.425,19,0.533,20,0.819,25,1.571,26,0.02,27,1.345,28,0.564,29,1.274,30,1.095,31,1.664,32,0.016,33,0.016,69,1.661,84,1.962,90,3.9,99,3.509,100,1.416,108,1.847,132,2.615,136,3.461,147,1.962,198,3.717,273,1.21,284,1.962,314,1.947,438,2.08,749,4.411,750,2.96,814,4.961,815,3.946,818,3.946,825,3.509,826,5.795,827,4.61]],["title/classes/TargetConnector.html",[67,1.385,828,2.927]],["body/classes/TargetConnector.html",[3,0.592,4,0.44,19,0.552,20,0.837,25,1.399,26,0.02,27,1.257,28,0.546,29,1.19,30,0.947,31,1.555,32,0.016,33,0.016,42,1.978,44,1.726,69,1.719,84,2.031,97,2.799,211,2.133,230,3.752,231,3.752,232,4.444,233,3.632,234,3.473,235,3.294,281,5.369,284,2.031,329,1.545,438,2.153,443,2.031,820,4.085,828,3.632,829,3.632,830,4.772,831,4.772]],["title/interfaces/TargetConstructor.html",[0,0.909,832,2.654]],["body/interfaces/TargetConstructor.html",[2,1.22,3,0.713,4,0.53,26,0.018,32,0.018,33,0.018,70,3.37,71,3.37,832,3.966]],["title/changelog.html",[375,2.25,833,2.79,834,3.26]],["body/changelog.html",[4,0.366,11,4.172,16,1.792,26,0.014,32,0.014,33,0.014,57,1.355,146,1.904,169,1.792,181,2.74,265,3.179,266,4.132,339,1.904,454,1.904,591,3.599,835,3.971,836,3.971,837,3.971,838,3.399,839,3.971,840,3.399,841,3.399,842,3.971,843,3.399,844,5.263,845,5.263,846,3.971,847,7.046,848,4.863,849,3.971,850,3.971,851,3.971,852,3.971,853,6.72,854,6.285,855,3.971,856,3.971,857,6.285,858,5.263,859,4.505,860,5.263,861,5.263,862,3.971,863,3.971,864,3.971,865,3.971,866,3.971,867,3.399,868,3.399,869,3.971,870,3.399,871,3.971,872,3.399,873,3.971,874,3.971,875,3.971,876,5.903,877,3.971,878,3.971,879,3.399,880,3.971,881,5.903,882,3.971,883,3.971,884,3.971,885,3.971]],["title/coverage.html",[886,4.409]],["body/coverage.html",[0,1.656,1,1.714,4,0.229,5,2.868,26,0.021,28,0.211,32,0.01,33,0.01,34,1.574,35,2.983,36,2.6,67,2.27,68,0.848,70,3.372,71,3.372,86,1.714,97,1.457,100,2.057,103,1.356,105,1.457,119,1.356,120,3.219,121,3.219,129,0.999,132,1.121,149,1.121,184,1.89,208,4.194,229,3.142,234,1.457,244,1.714,273,0.989,282,1.356,283,0.848,284,1.057,291,0.999,293,0.939,298,2.486,348,1.714,371,1.457,435,1.89,436,2.126,437,2.126,445,2.126,446,3.142,448,1.356,453,1.714,455,3.142,467,2.868,475,5.036,478,1.457,573,1.714,583,1.269,584,2.126,620,1.89,621,3.507,650,2.126,651,2.868,740,1.89,750,1.269,751,2.126,762,1.89,763,3.142,766,2.126,788,2.126,789,2.126,800,1.89,801,1.89,806,1.89,807,2.126,813,2.868,819,1.89,824,1.714,825,2.868,828,1.89,829,2.868,832,1.714,886,2.126,887,1.714,888,2.484,889,6.108,890,5.462,891,5.081,892,5.081,893,2.484,894,2.484,895,2.484,896,2.484,897,2.484,898,2.484,899,2.484,900,2.126,901,7.047,902,3.768,903,2.484,904,4.552,905,2.126,906,2.126,907,2.484,908,2.126,909,3.768,910,2.126,911,3.768,912,2.126,913,2.126,914,2.126,915,2.126,916,2.126,917,2.126,918,2.126,919,2.126,920,2.126,921,3.225,922,2.126,923,2.126,924,2.126,925,2.126,926,2.484,927,5.113,928,2.126,929,5.974,930,2.126,931,2.126,932,2.126,933,2.126,934,1.89,935,2.126,936,2.484,937,2.126,938,2.126,939,2.126,940,2.126,941,2.126,942,2.484,943,2.484]],["title/dependencies.html",[848,2.25,944,3.936]],["body/dependencies.html",[8,2.971,26,0.02,32,0.017,33,0.017,52,2.069,53,3.447,868,4.657,944,5.487,945,5.44,946,5.44,947,5.44,948,5.44,949,6.41,950,4.14,951,5.44,952,5.44,953,5.44]],["title/miscellaneous/functions.html",[421,2.511,954,1.912]],["body/miscellaneous/functions.html",[19,0.39,25,1.674,26,0.02,27,1.504,28,0.608,29,1.424,30,0.867,32,0.013,33,0.013,34,3.437,35,1.841,36,3.25,42,1.966,50,2.257,87,3.753,88,3.721,90,3.93,115,2.004,132,2.124,147,2.004,184,3.583,229,2.327,273,1.236,283,1.607,284,2.004,291,1.893,293,1.173,421,1.841,583,1.722,621,2.327,750,1.722,763,2.327,813,2.566,825,2.566,829,2.566,900,4.03,908,4.03,910,4.03,912,4.03,915,4.03,916,4.03,917,4.03,919,2.886,920,4.03,921,4.03,922,4.03,923,4.03,924,4.03,925,4.03,937,2.886,938,4.03,939,2.886,940,4.03,941,2.886,954,1.977,955,3.372,956,3.372,957,3.372,958,3.372,959,2.886,960,3.372,961,3.372,962,2.886,963,3.372,964,3.372,965,4.708,966,3.372,967,3.372,968,4.708,969,3.372,970,4.708,971,3.372,972,3.372,973,3.372,974,3.372,975,3.372,976,3.372,977,3.372,978,3.372,979,4.708,980,3.372,981,3.372,982,3.372,983,3.372,984,3.372,985,3.372,986,4.708,987,3.372]],["title/index.html",[19,0.377,375,2.25,833,2.79]],["body/index.html",[2,0.534,4,0.232,16,1.135,26,0.01,32,0.01,33,0.01,39,2.894,42,1.57,48,1.231,52,2.671,53,2.906,57,0.858,62,2.152,64,1.027,69,0.906,90,1.475,112,1.284,124,0.814,133,1.373,136,1.373,155,2.23,167,1.208,171,1.475,174,1.07,178,1.593,185,1.373,189,2.825,190,1.735,191,2.612,202,0.906,207,1.716,210,2.451,220,1.284,225,1.475,246,2.409,247,0.858,249,1.735,262,1.206,265,2.853,266,2.23,268,1.618,273,0.66,305,2.152,309,2.625,313,1.735,314,1.57,317,2.23,327,2.69,328,1.914,331,2.505,339,2.199,345,2.152,347,1.735,355,1.475,365,1.914,367,1.943,376,1.735,377,3.255,386,1.618,387,2.906,403,1.373,411,1.716,412,1.735,419,1.593,420,1.914,450,1.373,474,1.735,485,2.152,491,1.914,495,1.914,496,1.373,511,1.593,512,1.914,514,1.618,519,2.23,525,2.152,543,1.914,578,2.707,591,1.284,594,2.077,606,1.593,653,1.475,657,1.914,662,2.152,663,1.914,670,2.152,671,1.735,672,1.914,685,2.152,706,2.23,712,1.475,718,3.255,720,1.914,727,1.735,728,2.625,729,1.735,733,1.943,737,1.914,759,2.152,771,1.735,780,2.152,783,2.152,848,1.735,859,2.152,870,2.152,887,2.625,988,2.514,989,3.926,990,3.803,991,2.514,992,2.514,993,2.514,994,2.514,995,3.891,996,2.152,997,1.914,998,2.514,999,1.914,1000,2.625,1001,2.514,1002,2.514,1003,2.514,1004,2.514,1005,1.914,1006,2.514,1007,2.514,1008,2.152,1009,2.514,1010,2.514,1011,2.514,1012,2.514,1013,2.514,1014,2.152,1015,2.152,1016,2.514,1017,1.914,1018,2.514,1019,2.514,1020,2.152,1021,2.514,1022,2.514,1023,2.514,1024,1.593,1025,2.514,1026,2.514,1027,2.514,1028,2.152,1029,2.514,1030,2.152,1031,1.914,1032,2.514,1033,2.514,1034,2.152,1035,2.514,1036,2.514,1037,3.803,1038,2.514,1039,1.914,1040,2.514,1041,2.514,1042,2.152,1043,2.894,1044,2.152,1045,3.255,1046,2.514,1047,2.514,1048,2.152,1049,2.514,1050,2.514,1051,1.914,1052,2.514,1053,2.152,1054,2.152,1055,2.514,1056,2.514,1057,2.514,1058,2.514,1059,2.514,1060,2.514,1061,2.514,1062,2.152,1063,2.514,1064,2.514,1065,1.914,1066,2.514,1067,2.514,1068,2.514,1069,2.152,1070,2.152,1071,2.514,1072,2.514,1073,2.514,1074,2.514,1075,2.514,1076,2.514,1077,2.514,1078,2.514,1079,2.514,1080,2.152,1081,2.514,1082,2.514,1083,2.514,1084,2.514,1085,2.514,1086,2.514,1087,2.514,1088,2.514,1089,2.514,1090,2.514,1091,2.514,1092,1.735,1093,1.914,1094,2.514,1095,2.514,1096,2.625,1097,2.514,1098,2.514,1099,2.514,1100,1.914,1101,1.914,1102,4.587,1103,3.803,1104,2.514,1105,2.514,1106,2.514,1107,2.514,1108,1.914,1109,2.514,1110,2.514,1111,2.514,1112,2.514,1113,3.803,1114,2.514,1115,2.514,1116,2.514,1117,2.514,1118,2.152,1119,2.514,1120,2.514,1121,1.735,1122,2.514,1123,2.514,1124,5.113,1125,2.152,1126,2.152,1127,2.514,1128,2.514,1129,2.514,1130,2.514,1131,2.514,1132,2.514,1133,2.152,1134,2.514,1135,2.514,1136,2.514,1137,2.514,1138,2.152,1139,1.914,1140,3.926,1141,2.514,1142,3.255,1143,2.514]],["title/modules.html",[237,3.555]],["body/modules.html",[26,0.018,32,0.018,33,0.018,40,3.172,237,4.009,1144,4.972]],["title/overview.html",[1145,4.409]],["body/overview.html",[2,1.199,26,0.018,32,0.018,33,0.018,69,2.034,236,3.578,244,3.898,311,3.578,454,2.708,879,4.834,1145,4.834,1146,3.578,1147,5.647]],["title/properties.html",[44,1.34,848,2.25]],["body/properties.html",[6,1.396,11,3.118,26,0.02,32,0.017,33,0.017,44,1.55,52,2.713,167,1.494,189,2.262,265,2.399,314,1.942,578,2.853,843,4.55,1140,4.55,1142,4.55,1148,5.316,1149,5.316,1150,5.316,1151,5.316,1152,5.316]],["title/miscellaneous/typealiases.html",[954,1.912,1153,4.598]],["body/miscellaneous/typealiases.html",[19,0.579,26,0.02,28,0.424,32,0.017,33,0.017,37,2.4,92,3.864,100,2.103,115,2.913,116,3.497,146,2.924,314,1.538,315,2.13,800,3.81,801,4.641,954,2.936,1092,4.209,1154,5.006,1155,6.099,1156,7.017,1157,6.099,1158,6.099,1159,6.099,1160,5.006,1161,5.006]],["title/miscellaneous/variables.html",[954,1.912,1162,3.936]],["body/miscellaneous/variables.html",[19,0.398,26,0.02,28,0.502,32,0.013,33,0.013,37,1.647,42,1.977,43,2.03,45,2.941,46,2.615,52,2.632,53,4.502,57,1.173,64,1.326,68,1.628,70,2.015,71,3.214,88,3.022,116,2.437,133,1.876,140,2.177,149,2.905,174,1.462,211,1.237,273,0.902,293,0.856,329,2.284,405,2.615,443,3.002,444,2.627,621,2.371,756,4.17,763,2.371,771,4.557,824,2.371,832,2.371,905,4.083,906,4.083,913,4.083,914,4.083,918,4.083,927,2.941,928,4.083,930,4.083,931,4.083,932,4.083,933,4.083,934,3.63,935,4.083,954,2.015,959,4.083,962,2.941,1096,2.371,1162,2.941,1163,6.602,1164,4.77,1165,5.48,1166,5.51,1167,6.438,1168,5.48,1169,2.615,1170,3.436,1171,3.436,1172,3.436,1173,3.436,1174,4.77,1175,3.436,1176,3.436,1177,3.436,1178,3.436,1179,2.941,1180,2.941,1181,3.436]],["title/additional-documentation/quickstart.html",[388,1.471,999,2.481,1182,1.665]],["body/additional-documentation/quickstart.html",[2,0.469,10,1.89,11,1.295,12,1.89,16,0.996,26,0.02,28,0.292,32,0.009,33,0.012,37,1.059,39,2.62,40,2.608,42,2.1,44,0.644,46,1.681,47,1.059,48,1.854,49,3.62,52,2.179,57,0.754,64,1.07,65,1.89,66,2.946,67,0.795,69,0.795,77,0.84,93,1.524,100,1.59,102,2.31,108,1.003,116,1.128,124,1.546,133,2.828,136,1.206,137,1.399,138,1.681,143,1.399,146,1.059,147,0.94,149,0.996,162,1.65,167,1.498,168,1.384,169,0.996,171,1.295,174,1.465,189,2.203,191,2.161,210,1.059,211,0.795,220,1.128,225,2.019,230,1.399,236,2.68,237,1.524,238,2.62,239,1.89,241,1.89,247,1.444,254,1.89,260,1.128,262,1.65,264,1.206,265,2.336,266,2.019,268,2.033,272,3.629,273,0.58,277,1.399,286,1.65,288,0.84,293,1.19,296,0.888,304,1.681,314,1.59,315,0.94,317,1.295,326,1.206,329,1.369,331,3.128,333,1.758,347,1.524,349,1.681,351,1.681,353,2.028,355,1.295,357,1.524,365,1.681,367,2.802,368,3.026,370,0.996,387,2.68,400,2.481,403,1.88,411,0.996,417,2.376,420,2.62,421,1.206,431,2.919,433,1.758,443,0.94,449,0.888,450,1.206,456,1.65,474,1.524,475,1.524,496,1.88,497,1.399,511,1.399,514,2.033,516,1.295,519,1.295,520,2.919,528,1.89,529,1.399,531,1.524,553,1.399,578,1.553,586,1.399,590,1.295,591,1.128,604,1.295,617,2.376,642,1.89,654,1.399,655,1.524,657,1.681,684,1.89,706,1.295,721,1.89,731,1.681,771,1.524,799,1.89,887,1.524,996,1.89,997,1.681,1000,1.524,1008,1.89,1014,1.89,1028,1.89,1053,1.89,1080,1.89,1093,1.681,1096,2.376,1121,1.524,1139,1.681,1144,2.946,1146,2.181,1183,2.208,1184,1.681,1185,2.208,1186,5.178,1187,1.89,1188,3.442,1189,3.62,1190,2.62,1191,2.208,1192,1.89,1193,2.208,1194,2.208,1195,3.281,1196,2.208,1197,2.208,1198,1.681,1199,1.524,1200,1.89,1201,3.442,1202,2.481,1203,3.442,1204,2.208,1205,1.89,1206,2.208,1207,2.208,1208,2.208,1209,2.208,1210,2.208,1211,1.89,1212,1.524,1213,2.946,1214,1.89,1215,1.89,1216,1.524,1217,1.524,1218,2.208,1219,2.208,1220,2.208,1221,1.89,1222,3.442,1223,2.208,1224,2.208,1225,2.946,1226,2.208,1227,2.208,1228,1.681,1229,2.208,1230,1.89,1231,2.208,1232,2.208,1233,2.208,1234,2.208,1235,1.681,1236,1.89,1237,2.208,1238,4.23,1239,2.208,1240,3.442,1241,3.442,1242,2.208,1243,3.442,1244,2.208,1245,3.442,1246,2.208,1247,2.208,1248,3.442,1249,2.208,1250,2.208,1251,2.208,1252,2.208,1253,2.208,1254,2.208,1255,2.208,1256,2.208,1257,2.208,1258,2.208,1259,2.208,1260,2.208,1261,2.208,1262,2.208,1263,2.208,1264,2.208,1265,1.681,1266,2.208,1267,2.946,1268,1.89,1269,2.208,1270,2.208,1271,2.208,1272,2.208,1273,2.208,1274,2.208,1275,3.442,1276,1.89,1277,1.89,1278,2.208,1279,2.208,1280,1.89,1281,2.946,1282,2.208,1283,2.208,1284,1.89,1285,2.208,1286,1.89,1287,2.208,1288,2.208]],["title/additional-documentation/guide.html",[388,1.471,1182,1.665,1217,2.25]],["body/additional-documentation/guide.html",[17,2.323,20,0.728,26,0.017,32,0.017,33,0.017,52,1.958,64,1.389,68,2.117,72,2.63,77,2.359,124,2.008,144,3.553,168,2.494,169,2.323,218,2.63,256,2.468,258,3.918,265,2.323,268,2.191,294,3.019,311,2.812,354,3.262,355,3.019,422,3.918,454,2.468,457,3.262,458,3.262,529,3.262,1216,3.553,1289,3.553,1290,3.553,1291,4.407,1292,3.262,1293,5.149,1294,5.149,1295,3.553,1296,5.149]],["title/additional-documentation/guide/1.-creating-connections.html",[311,1.365,388,1.128,1182,1.277,1289,1.725,1290,1.725]],["body/additional-documentation/guide/1.-creating-connections.html",[8,2.335,9,2.822,16,1.329,20,0.605,23,1.505,26,0.021,28,0.25,32,0.012,33,0.012,48,1.788,52,1.626,57,1.006,64,0.958,68,2.089,77,1.915,81,2.05,100,0.905,108,0.859,119,1.609,124,1.788,129,2.359,132,1.329,146,2.05,147,1.254,149,1.329,158,3.66,167,1.01,169,1.93,174,2.497,202,1.061,205,2.242,208,1.866,210,1.412,212,1.728,218,2.997,220,2.184,226,2.335,247,2.208,248,2.521,249,2.033,251,2.521,255,2.033,256,2.934,260,2.184,262,1.412,268,2.143,269,2.242,271,3.255,272,1.866,273,1.322,282,1.609,283,1.46,284,1.82,288,1.626,291,1.184,293,1.254,294,1.728,314,0.905,315,1.254,321,2.521,326,1.609,327,1.728,329,0.954,343,2.033,367,1.505,368,1.866,374,2.05,386,1.254,389,2.242,398,1.866,408,1.728,411,1.329,417,2.033,424,2.521,456,2.05,473,1.609,496,1.609,497,1.866,514,1.254,556,2.242,572,1.505,598,3.255,640,2.033,665,3.66,733,1.505,745,3.66,1039,3.255,1043,2.242,1065,2.242,1092,2.033,1101,2.242,1184,2.242,1195,1.866,1198,2.242,1199,2.033,1202,1.728,1212,2.033,1230,2.521,1284,2.521,1289,2.951,1290,3.475,1292,1.866,1297,4.204,1298,4.277,1299,3.832,1300,4.277,1301,2.946,1302,2.946,1303,2.521,1304,2.951,1305,2.242,1306,2.946,1307,2.946,1308,2.946,1309,2.946,1310,2.946,1311,3.66,1312,3.255,1313,2.946,1314,2.521,1315,2.946,1316,2.946,1317,2.946,1318,2.946,1319,2.521,1320,2.242,1321,2.946,1322,2.946,1323,2.946,1324,2.242,1325,2.946,1326,2.946,1327,2.946,1328,4.277,1329,5.524,1330,2.521,1331,2.946,1332,2.946,1333,2.521,1334,2.521,1335,3.66,1336,2.946,1337,2.946,1338,2.946,1339,2.946,1340,2.946,1341,2.946,1342,2.521,1343,2.521]],["title/additional-documentation/guide/2.-connecting-to-dom.html",[124,0.809,186,1.725,388,1.128,1182,1.277,1292,1.583]],["body/additional-documentation/guide/2.-connecting-to-dom.html",[20,0.43,23,1.552,26,0.02,27,0.928,32,0.012,33,0.012,42,1.343,43,1.293,48,1.416,57,1.493,64,1.256,68,1.493,81,2.097,84,1.861,103,1.66,108,0.886,124,1.815,126,2.389,132,1.371,135,1.782,137,1.925,149,1.371,167,1.506,168,1.222,169,1.371,189,1.293,202,1.095,223,3.329,240,2.601,246,1.925,255,2.097,256,1.457,262,1.457,268,2.632,273,1.148,283,1.749,286,1.457,291,1.758,293,1.276,294,2.565,295,1.925,296,2.711,298,1.66,314,1.574,315,1.293,317,1.782,320,1.457,326,1.66,329,0.984,331,1.66,333,3.159,337,3.019,338,3.537,343,2.097,348,2.097,353,1.457,354,2.771,355,1.782,356,2.389,359,2.097,367,1.552,368,1.925,373,2.234,374,1.457,386,1.293,400,1.782,414,2.313,417,3.019,418,3.919,419,2.771,433,2.234,447,2.097,453,2.097,466,1.925,484,3.329,497,1.925,514,1.293,516,1.782,521,3.019,536,1.782,537,2.313,538,2.313,540,2.313,572,1.552,573,2.097,636,2.097,640,2.097,656,2.601,682,2.097,687,2.097,704,2.097,712,1.782,716,2.601,727,3.019,732,3.005,760,2.313,1005,2.313,1024,1.925,1042,2.601,1118,2.601,1169,2.313,1184,2.313,1291,3.744,1292,1.925,1295,2.097,1299,3.329,1344,3.039,1345,3.039,1346,3.039,1347,4.374,1348,4.374,1349,4.374,1350,3.039,1351,4.374,1352,4.374,1353,4.374,1354,4.374,1355,3.744,1356,4.374,1357,3.039,1358,2.601,1359,3.039,1360,2.601,1361,2.601,1362,3.039,1363,4.374,1364,3.039,1365,3.039,1366,4.374,1367,3.039,1368,3.039,1369,2.601,1370,3.039,1371,3.039,1372,3.039,1373,3.039,1374,2.601,1375,3.039,1376,3.039,1377,3.039,1378,2.313,1379,3.039,1380,2.601,1381,3.039,1382,2.601,1383,2.601,1384,3.039,1385,3.039,1386,3.039]],["title/additional-documentation/guide/3.-monitoring-state.html",[168,1.005,388,1.128,1146,1.583,1182,1.277,1295,1.725]],["body/additional-documentation/guide/3.-monitoring-state.html",[2,0.957,8,1.73,20,0.637,23,2.679,26,0.02,28,0.382,30,0.507,32,0.012,33,0.012,44,1.314,48,1.954,52,1.205,64,1.01,68,1.538,77,2.296,100,0.973,108,1.881,112,2.302,126,2.461,143,2.008,147,2.232,157,1.858,159,1.858,167,1.065,168,2.109,171,1.858,179,2.712,185,1.73,189,1.348,191,2.302,194,1.43,196,2.008,202,2.058,207,2.034,208,2.008,212,2.643,214,3.11,220,1.619,224,3.11,225,3.076,247,1.538,260,1.619,262,1.519,273,1.5,284,1.348,288,1.995,302,1.619,314,1.611,339,1.519,353,1.519,356,1.73,370,2.034,371,1.858,378,2.855,380,2.187,384,2.412,386,1.348,387,2.008,403,1.73,411,1.43,421,1.73,423,2.187,433,2.302,447,1.519,448,1.73,449,1.274,458,2.008,473,1.73,478,1.858,511,2.855,514,1.348,524,3.62,554,2.712,583,1.619,591,1.619,594,2.461,600,2.712,635,2.187,653,1.858,655,2.187,704,2.187,725,2.412,729,2.187,732,1.858,733,1.619,750,1.619,757,3.992,791,2.712,838,2.712,995,2.412,1024,2.008,1093,2.412,1192,2.712,1199,2.187,1202,3.35,1212,2.187,1221,2.712,1236,2.712,1295,2.187,1297,3.43,1358,2.712,1378,2.412,1387,2.712,1388,2.712,1389,3.43,1390,2.712,1391,3.169,1392,5.245,1393,3.858,1394,3.169,1395,3.169,1396,3.169,1397,4.507,1398,3.169,1399,2.712,1400,2.712,1401,2.712,1402,3.169,1403,3.169,1404,3.169,1405,3.169,1406,4.507,1407,3.169,1408,2.712,1409,3.169,1410,2.712,1411,3.169,1412,2.412,1413,2.712,1414,2.712,1415,4.507,1416,3.169,1417,3.169,1418,2.712,1419,3.169,1420,3.858,1421,3.169,1422,3.169,1423,3.169,1424,3.169,1425,2.412,1426,2.712,1427,3.169,1428,3.169,1429,3.169,1430,2.712]],["title/additional-documentation/chess-tutorial.html",[388,1.277,1000,1.953,1051,2.153,1182,1.445]],["body/additional-documentation/chess-tutorial.html",[0,0.337,4,0.258,8,1.317,9,0.401,11,0.46,16,1.546,20,0.277,23,0.729,26,0.021,27,0.167,28,0.067,30,0.125,32,0.004,33,0.004,37,0.684,40,0.429,42,0.241,47,0.376,48,2.012,51,1.502,52,1.192,57,0.487,64,0.825,67,1.61,69,0.283,72,0.401,77,0.542,81,0.684,84,0.607,100,0.438,108,0.416,112,1.232,115,0.834,123,1.528,124,0.462,127,0.672,129,1.377,130,0.672,137,0.904,138,0.597,143,0.904,144,0.542,146,0.376,149,1.942,150,1.221,159,0.46,162,1.766,167,1.155,168,0.788,169,0.354,170,0.672,171,0.46,173,0.672,174,2.026,185,0.429,186,3.085,189,0.334,190,1.353,191,1.001,192,0.597,194,0.644,196,1.773,198,1.837,202,1.234,203,0.672,207,2.086,208,0.497,210,1.502,212,0.46,218,1.232,220,1.232,221,0.672,223,2.384,226,1.528,230,0.497,236,0.904,244,1.664,246,2.171,247,1.708,256,1.156,260,0.401,262,0.376,264,1.528,265,1.263,266,0.836,268,1.026,272,3.239,273,0.822,277,1.773,288,0.299,293,0.78,296,0.316,302,0.729,311,2.35,314,1.601,315,0.834,317,0.46,320,0.376,322,0.597,327,0.46,330,1.492,331,0.429,333,1.232,338,1.353,339,1.156,346,1.221,353,1.342,354,0.497,355,0.46,356,0.779,357,0.542,359,0.984,367,2.198,368,0.497,370,0.644,372,0.597,373,0.729,374,0.684,376,1.664,378,0.497,379,3.135,380,1.664,381,0.672,383,0.672,386,0.834,388,0.354,389,1.835,397,1.678,398,2.171,401,0.672,402,1.835,403,0.429,407,0.672,410,0.836,411,0.354,414,0.597,418,0.497,419,0.904,421,0.429,430,1.221,431,1.353,433,1.001,443,0.834,447,0.684,449,0.316,456,0.376,457,0.904,462,1.931,473,0.779,475,1.353,476,0.672,479,1.085,484,0.597,486,1.221,490,0.672,491,1.085,497,0.904,501,0.779,502,1.221,505,1.678,512,1.085,514,1.333,516,0.836,519,0.836,521,0.542,522,0.672,523,0.597,524,0.497,527,0.597,531,0.542,532,0.542,533,0.542,536,2.009,537,0.597,538,0.597,540,0.597,553,0.497,556,0.597,560,0.497,572,0.401,578,1.088,590,0.46,591,0.401,593,0.672,594,2.012,597,0.672,598,1.835,602,0.597,603,1.242,608,0.597,617,0.542,636,2.543,638,0.672,640,0.542,652,0.597,653,1.414,654,0.497,663,0.597,671,0.984,672,0.597,681,0.672,682,0.542,687,1.664,688,0.597,690,1.085,692,2.395,693,0.672,694,0.672,696,0.672,704,0.542,706,0.46,712,0.46,714,1.085,720,4.164,723,0.672,725,0.597,727,0.542,732,1.15,733,1.001,757,0.597,768,0.672,772,0.672,773,3.684,794,0.672,796,0.597,804,4.075,805,4.184,840,0.672,841,1.221,867,1.221,872,0.672,889,3.827,950,2.607,989,1.678,995,1.835,999,0.597,1000,1.664,1005,1.835,1015,0.672,1017,0.597,1020,0.672,1024,0.904,1039,0.597,1043,1.085,1045,0.672,1048,0.672,1051,2.804,1054,1.678,1062,0.672,1065,0.597,1069,0.672,1092,0.542,1100,1.492,1101,0.597,1108,0.597,1121,0.542,1125,0.672,1139,0.597,1146,1.242,1187,0.672,1190,3.518,1195,1.773,1198,1.835,1199,0.542,1200,1.678,1202,1.641,1212,0.542,1213,0.672,1214,2.395,1215,2.395,1216,1.353,1217,0.984,1225,1.678,1228,0.597,1235,1.085,1265,0.597,1268,0.672,1277,1.221,1281,1.221,1297,1.085,1299,1.492,1303,1.221,1304,1.664,1305,1.835,1312,0.597,1319,3.526,1320,0.597,1324,0.597,1333,0.672,1334,0.672,1335,0.672,1342,1.678,1343,0.672,1355,0.672,1361,0.672,1369,0.672,1374,0.672,1378,1.085,1382,0.672,1383,0.672,1387,0.672,1388,0.672,1389,0.597,1390,0.672,1393,0.672,1399,0.672,1400,0.672,1401,0.672,1408,1.221,1410,0.672,1412,1.085,1413,0.672,1414,0.672,1418,0.672,1426,0.672,1430,0.672,1431,0.785,1432,3.426,1433,6.138,1434,0.672,1435,0.785,1436,0.785,1437,1.426,1438,1.96,1439,4.304,1440,1.426,1441,3.426,1442,4.471,1443,2.412,1444,4.471,1445,3.684,1446,1.96,1447,3.684,1448,1.426,1449,0.785,1450,0.785,1451,0.597,1452,1.96,1453,0.785,1454,0.785,1455,0.785,1456,1.426,1457,1.085,1458,0.785,1459,1.96,1460,0.785,1461,0.785,1462,3.684,1463,2.412,1464,1.426,1465,0.785,1466,2.412,1467,1.426,1468,0.785,1469,4.119,1470,0.785,1471,0.785,1472,0.672,1473,1.426,1474,1.96,1475,0.785,1476,0.785,1477,0.785,1478,0.785,1479,0.785,1480,0.785,1481,1.426,1482,0.785,1483,1.96,1484,1.96,1485,0.785,1486,1.426,1487,0.785,1488,0.785,1489,1.426,1490,1.426,1491,0.785,1492,0.785,1493,0.785,1494,1.426,1495,0.785,1496,0.785,1497,0.785,1498,0.785,1499,2.798,1500,0.672,1501,1.96,1502,2.412,1503,3.133,1504,0.785,1505,0.785,1506,2.412,1507,0.785,1508,0.785,1509,1.426,1510,0.785,1511,0.785,1512,0.785,1513,0.785,1514,0.785,1515,1.426,1516,2.798,1517,0.785,1518,0.785,1519,0.785,1520,0.785,1521,1.426,1522,2.798,1523,1.221,1524,0.785,1525,0.785,1526,0.672,1527,0.785,1528,0.785,1529,0.785,1530,0.785,1531,1.426,1532,1.426,1533,0.785,1534,0.785,1535,0.785,1536,0.785,1537,0.672,1538,0.785,1539,0.785,1540,0.785,1541,0.785,1542,0.785,1543,0.785,1544,1.426,1545,0.785,1546,5.305,1547,0.785,1548,0.785,1549,0.785,1550,0.785,1551,0.785,1552,1.426,1553,0.785,1554,2.682,1555,0.785,1556,0.785,1557,0.785,1558,3.133,1559,2.064,1560,0.672,1561,0.672,1562,0.785,1563,3.914,1564,2.798,1565,0.785,1566,0.672,1567,0.785,1568,0.785,1569,0.785,1570,1.426,1571,0.785,1572,0.785,1573,0.785,1574,0.785,1575,0.785,1576,0.785,1577,1.426,1578,1.426,1579,0.785,1580,0.785,1581,1.426,1582,0.785,1583,0.785,1584,0.785,1585,0.785,1586,0.785,1587,0.785,1588,0.785,1589,0.785,1590,0.785,1591,0.785,1592,0.785,1593,1.678,1594,0.785,1595,0.785,1596,1.426,1597,0.785,1598,1.426,1599,1.426,1600,0.785,1601,0.785,1602,1.426,1603,1.96,1604,0.785,1605,1.426,1606,0.785,1607,1.426,1608,0.785,1609,0.785,1610,0.785,1611,0.785,1612,0.785,1613,0.785,1614,1.426,1615,1.426,1616,0.785,1617,0.785,1618,0.785,1619,0.785,1620,0.785,1621,0.785,1622,0.785,1623,0.672,1624,1.426,1625,0.785,1626,0.785,1627,0.785,1628,0.785,1629,0.785,1630,0.785,1631,0.785,1632,0.785,1633,0.785,1634,0.785,1635,0.672,1636,0.785,1637,1.426,1638,0.785,1639,0.785,1640,0.785,1641,3.684,1642,0.672,1643,0.785,1644,0.785,1645,0.785,1646,2.064,1647,0.785,1648,1.426,1649,0.785,1650,0.785,1651,0.785,1652,0.785,1653,1.96,1654,0.785,1655,0.785,1656,0.785,1657,0.785,1658,0.785,1659,1.426,1660,0.785,1661,1.426,1662,0.785,1663,0.785,1664,1.426,1665,0.672,1666,0.672,1667,0.785,1668,0.785,1669,0.785,1670,1.426,1671,0.785,1672,0.672,1673,0.785,1674,0.785,1675,0.785,1676,0.785,1677,0.785,1678,0.785,1679,0.785,1680,0.785,1681,0.785,1682,0.672,1683,0.785,1684,0.785,1685,0.785,1686,0.785,1687,0.785,1688,0.785,1689,0.785,1690,2.798,1691,2.064,1692,0.785,1693,0.785,1694,1.426,1695,0.785,1696,1.96,1697,0.672,1698,1.426,1699,0.785,1700,0.785,1701,0.785,1702,0.785,1703,0.785,1704,0.785,1705,0.785,1706,0.785,1707,0.785,1708,0.785,1709,0.785,1710,0.785,1711,0.785,1712,0.785,1713,0.785,1714,0.785,1715,1.426,1716,1.426,1717,0.785,1718,0.785,1719,0.785,1720,0.785,1721,0.785,1722,0.785,1723,0.785,1724,0.785,1725,0.785,1726,0.785,1727,0.785,1728,0.785,1729,0.785,1730,0.785,1731,0.785,1732,0.785,1733,0.785,1734,0.785,1735,0.785,1736,0.785,1737,0.785,1738,0.785,1739,0.785,1740,2.798,1741,0.785,1742,0.785,1743,0.785,1744,0.785,1745,1.426,1746,0.785,1747,1.426,1748,0.785,1749,1.426,1750,0.785,1751,0.785,1752,0.785,1753,0.785,1754,0.785]],["title/additional-documentation/translating-react-code.html",[189,1.063,191,1.277,388,1.128,1031,1.902,1182,1.277]],["body/additional-documentation/translating-react-code.html",[2,0.382,9,1.495,18,0.685,20,0.255,23,1.888,26,0.02,28,0.313,30,0.288,32,0.008,33,0.008,44,0.525,47,0.864,48,1.783,52,2.362,57,1.262,64,0.828,67,1.331,68,1.453,72,2.174,73,1.371,74,2.813,77,1.113,79,1.371,100,1.438,108,1.659,112,1.495,115,0.766,124,1.624,126,0.984,129,1.177,135,1.716,140,1.141,143,1.141,146,0.864,147,1.992,149,0.813,156,1.542,159,1.716,162,1.772,167,1.006,168,1.177,174,2.344,175,1.542,177,1.371,178,1.141,181,1.243,185,0.984,186,1.243,189,2.824,190,1.243,191,2.391,192,1.371,194,1.92,195,2.227,202,0.649,207,2.112,211,1.331,212,1.056,213,1.542,214,1.243,216,0.92,218,0.92,220,0.92,225,2.168,226,0.984,247,2.227,256,1.772,258,1.371,264,0.984,265,1.32,268,1.573,283,0.999,286,0.864,287,1.243,288,1.619,290,1.542,293,0.449,294,1.056,295,1.141,298,1.598,300,1.542,301,2.505,304,1.371,306,1.542,311,0.984,319,1.243,320,1.772,326,0.984,327,1.056,329,0.583,335,1.371,339,1.772,347,1.243,351,1.371,353,0.864,354,1.854,357,3.231,359,1.243,367,1.495,373,1.495,374,1.403,376,2.02,378,1.141,386,0.766,387,2.342,398,2.342,403,0.984,410,1.056,411,1.32,412,1.243,419,1.141,421,0.984,423,1.243,431,1.243,432,1.542,433,2.174,443,0.766,447,0.864,454,1.403,456,0.864,458,1.854,465,1.141,466,2.342,474,1.243,496,2.324,501,0.984,516,1.716,519,1.056,523,1.371,524,2.342,526,1.371,529,1.141,532,1.243,536,1.056,552,1.371,553,1.141,555,1.243,572,1.495,578,2.88,594,1.598,601,1.542,604,1.716,635,1.243,637,1.542,653,2.496,654,1.141,671,1.243,687,1.243,690,2.227,712,2.746,714,1.371,732,1.056,733,1.495,796,1.371,887,2.02,1017,1.371,1024,1.141,1030,1.542,1031,1.371,1034,1.542,1070,1.542,1096,2.02,1100,1.371,1121,2.551,1126,1.542,1133,1.542,1138,1.542,1146,1.141,1169,1.371,1179,1.542,1180,1.542,1190,2.227,1195,2.966,1202,1.716,1205,1.542,1216,2.02,1265,1.371,1267,2.505,1276,2.505,1280,1.542,1286,1.542,1290,2.938,1292,1.141,1304,1.243,1314,1.542,1320,2.227,1324,1.371,1330,1.542,1425,1.371,1434,2.505,1451,1.371,1457,1.371,1500,1.542,1523,1.542,1526,1.542,1537,1.542,1554,2.505,1559,1.542,1560,1.542,1593,2.505,1635,1.542,1642,1.542,1646,1.542,1665,1.542,1666,1.542,1672,1.542,1682,2.505,1691,3.164,1697,1.542,1755,1.801,1756,1.801,1757,1.801,1758,1.801,1759,1.801,1760,1.801,1761,2.505,1762,1.801,1763,1.801,1764,1.801,1765,1.801,1766,1.801,1767,1.801,1768,1.801,1769,1.801,1770,2.927,1771,6.21,1772,5.016,1773,1.801,1774,1.801,1775,1.801,1776,2.927,1777,2.505,1778,1.801,1779,1.801,1780,1.801,1781,1.801,1782,1.801,1783,1.801,1784,1.801,1785,1.801,1786,1.801,1787,1.801,1788,1.801,1789,1.801,1790,3.696,1791,2.927,1792,2.927,1793,1.801,1794,1.801,1795,2.927,1796,4.256,1797,3.696,1798,1.801,1799,2.927,1800,1.801,1801,1.801,1802,1.801,1803,1.801,1804,1.801,1805,1.801,1806,1.801,1807,1.801,1808,1.801,1809,1.801,1810,2.927,1811,1.801,1812,1.801,1813,1.801,1814,1.801,1815,1.801,1816,1.801,1817,1.801,1818,1.801,1819,1.801,1820,1.801,1821,1.801,1822,1.801,1823,1.801,1824,1.801,1825,1.801,1826,1.801,1827,1.801,1828,1.801,1829,1.801,1830,1.801,1831,1.801,1832,1.801,1833,1.801,1834,1.801,1835,1.801,1836,1.801,1837,3.164,1838,1.801,1839,1.542,1840,1.801,1841,1.801,1842,1.801,1843,1.801,1844,1.801,1845,1.801,1846,2.927,1847,1.801,1848,1.801,1849,1.801,1850,1.801]],["title/additional-documentation/testing.html",[388,1.471,548,2.25,1182,1.665]],["body/additional-documentation/testing.html",[16,1.201,26,0.021,32,0.011,33,0.011,40,1.454,41,2.279,42,2.106,48,1.703,52,2.326,53,1.687,57,0.909,64,0.889,67,0.959,87,2.784,88,1.687,123,1.687,124,0.862,126,2.168,129,1.596,136,1.454,142,2.279,162,1.276,167,1.545,168,1.07,178,1.687,189,2.512,194,1.201,207,1.201,210,1.276,211,0.959,214,1.837,218,1.36,226,2.168,236,1.687,238,2.026,247,1.921,249,2.74,264,1.454,265,1.791,266,2.328,272,3.874,273,1.477,293,1.402,314,1.878,315,1.133,320,1.276,326,1.454,330,2.026,339,1.276,353,1.276,356,1.454,360,2.279,370,1.201,386,1.689,391,2.026,400,2.328,408,1.561,514,2.02,526,2.026,533,1.837,536,2.328,548,3.884,555,1.837,572,1.36,578,1.201,590,1.561,605,4.433,688,2.026,706,1.561,707,2.279,728,1.837,756,2.026,760,2.026,934,2.026,950,2.026,997,2.026,1044,2.279,1108,2.026,1166,2.279,1189,2.279,1195,2.515,1202,1.561,1211,3.398,1217,1.837,1228,2.026,1235,3.612,1289,1.837,1304,1.837,1305,2.026,1311,2.279,1312,2.026,1360,2.279,1380,3.398,1389,2.026,1412,2.026,1420,2.279,1425,2.026,1451,2.026,1457,2.026,1472,2.279,1561,2.279,1566,2.279,1623,3.398,1761,2.279,1777,4.504,1837,2.279,1839,2.279,1851,3.97,1852,3.97,1853,2.662,1854,2.662,1855,2.662,1856,2.662,1857,2.662,1858,2.662,1859,2.662,1860,2.662,1861,2.662,1862,2.662,1863,2.662,1864,2.662,1865,2.662,1866,2.662,1867,2.662,1868,2.662,1869,3.97,1870,3.97,1871,2.662,1872,3.97,1873,2.662,1874,2.662,1875,2.662,1876,2.662,1877,3.97,1878,3.97,1879,2.662,1880,2.662,1881,2.662,1882,2.662,1883,2.662,1884,2.662,1885,2.662,1886,2.662,1887,2.662,1888,2.662,1889,4.747,1890,2.662,1891,2.662,1892,2.662,1893,2.662,1894,2.662,1895,2.662,1896,2.662,1897,2.662,1898,2.662,1899,2.662,1900,2.662,1901,2.662,1902,2.662]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["0",{"_index":475,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"coverage.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["0..63",{"_index":1549,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["0.1.1",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["0.1.2",{"_index":883,"title":{},"body":{"changelog.html":{}}}],["0.14.0",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":1676,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["0.5",{"_index":476,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["0/1",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":858,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":850,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":845,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":311,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"overview.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["1.0.0",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":878,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":889,"title":{},"body":{"coverage.html":{},"additional-documentation/chess-tutorial.html":{}}}],["12.5",{"_index":1532,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["14",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["16.0.0",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["17.0.0",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":879,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1px",{"_index":1528,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["2",{"_index":186,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["2.0.0",{"_index":866,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":856,"title":{},"body":{"changelog.html":{}}}],["2.0.2",{"_index":852,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":881,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":844,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":846,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":851,"title":{},"body":{"changelog.html":{}}}],["2c0127e",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["2d",{"_index":1076,"title":{},"body":{"index.html":{}}}],["3",{"_index":1146,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["3.0.0",{"_index":849,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":843,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["3/3",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1646,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["4/4",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1465,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["5",{"_index":1559,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["5.5",{"_index":1727,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["5/5",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["54px",{"_index":1467,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["560px",{"_index":1536,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["6",{"_index":1836,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["6/6",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":1446,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["7",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":1660,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["70px",{"_index":1470,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["75",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1552,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["8/8",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["8x8",{"_index":1521,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["9",{"_index":1147,"title":{},"body":{"overview.html":{}}}],["above",{"_index":357,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["abramov",{"_index":992,"title":{},"body":{"index.html":{}}}],["absolute",{"_index":1515,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["abstractdnddirective",{"_index":459,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["abstraction",{"_index":1038,"title":{},"body":{"index.html":{}}}],["accept",{"_index":1210,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["accepts",{"_index":63,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["access",{"_index":1425,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["accessors",{"_index":82,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DropTargetDirective.html":{}}}],["accomplish",{"_index":1799,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["achieve",{"_index":1491,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["action",{"_index":648,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["actions",{"_index":58,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["actual",{"_index":1756,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["actually",{"_index":1069,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["add",{"_index":16,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["add(teardown",{"_index":94,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["add(teardownlogic",{"_index":21,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["added",{"_index":1537,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["adding",{"_index":1185,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["additional",{"_index":1182,"title":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}},"body":{}}],["addsubscription",{"_index":1,"title":{"interfaces/AddSubscription.html":{}},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"coverage.html":{}}}],["advanced",{"_index":1284,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["advantage",{"_index":1026,"title":{},"body":{"index.html":{}}}],["advice",{"_index":390,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["affected",{"_index":1487,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["again",{"_index":1192,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["aliases",{"_index":1154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1504,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["allow",{"_index":1631,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["allowing",{"_index":745,"title":{},"body":{"directives/DropTargetDirective.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["allows",{"_index":456,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["already",{"_index":501,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["alt",{"_index":677,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["alternate",{"_index":1221,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["alternatives",{"_index":1087,"title":{},"body":{"index.html":{}}}],["always",{"_index":1378,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ambitious",{"_index":1049,"title":{},"body":{"index.html":{}}}],["amend",{"_index":1602,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["anchorx",{"_index":468,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["anchory",{"_index":469,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["angular",{"_index":578,"title":{},"body":{"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["angular's",{"_index":1488,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["angular/common",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":950,"title":{},"body":{"dependencies.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["angular/core/testing",{"_index":1874,"title":{},"body":{"additional-documentation/testing.html":{}}}],["angular/platform",{"_index":1875,"title":{},"body":{"additional-documentation/testing.html":{}}}],["another",{"_index":727,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["answer",{"_index":1639,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["any,node",{"_index":810,"title":{},"body":{"classes/Reconnector.html":{}}}],["anything",{"_index":414,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["anyway",{"_index":734,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["aot",{"_index":1238,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["api",{"_index":1761,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["apis",{"_index":1012,"title":{},"body":{"index.html":{}}}],["app",{"_index":1215,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["app.module.ts",{"_index":1255,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["appear",{"_index":735,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["appearance",{"_index":1684,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["appearance—even",{"_index":722,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["applies",{"_index":580,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["apply",{"_index":502,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["applying",{"_index":1379,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["appmodule",{"_index":1191,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["approach",{"_index":1804,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["appropriate",{"_index":304,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["arbitrarily",{"_index":1496,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["arbitrary",{"_index":1848,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["area",{"_index":1059,"title":{},"body":{"index.html":{}}}],["arecollectsequal",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["arecollectsequal(a",{"_index":967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aren't",{"_index":1120,"title":{},"body":{"index.html":{}}}],["areoptionsequal",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["areoptionsequal(nextoptions",{"_index":969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["argument",{"_index":301,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["arguments",{"_index":1808,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["around",{"_index":223,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["array",{"_index":1092,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["array(64).fill(0).map((_",{"_index":1520,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["arrow",{"_index":1267,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["ask",{"_index":428,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["asking",{"_index":307,"title":{},"body":{"injectables/DndService.html":{}}}],["assembly",{"_index":1240,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["assertion",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assign",{"_index":670,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["assigning",{"_index":297,"title":{},"body":{"injectables/DndService.html":{}}}],["associated",{"_index":1833,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["assumes",{"_index":1448,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["assuming",{"_index":1726,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["assumptions",{"_index":1683,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["async",{"_index":1389,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["asynchronous",{"_index":1846,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["attach",{"_index":1299,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["attached",{"_index":1334,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["attaching",{"_index":1485,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["attention",{"_index":1508,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["automatic",{"_index":416,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["automatically",{"_index":541,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["available",{"_index":370,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["avoid",{"_index":695,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["avoiding",{"_index":279,"title":{},"body":{"injectables/DndService.html":{}}}],["aware",{"_index":1812,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["b",{"_index":968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["backend",{"_index":42,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["backend';generally",{"_index":1252,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["backend's",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend.simulatebegindrag([source",{"_index":1893,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulatedrop",{"_index":1898,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulateenddrag",{"_index":1899,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulatehover([target",{"_index":1895,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backendconnector",{"_index":812,"title":{},"body":{"classes/Reconnector.html":{}}}],["backendexample",{"_index":1868,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backendfactory",{"_index":46,"title":{},"body":{"interfaces/BackendInput.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["backendinput",{"_index":34,"title":{"interfaces/BackendInput.html":{}},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["backendnext",{"_index":998,"title":{},"body":{"index.html":{}}}],["backends",{"_index":39,"title":{},"body":{"interfaces/BackendInput.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["backendyou",{"_index":1183,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["background",{"_index":1393,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["backgroundcolor",{"_index":1483,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["bare",{"_index":1088,"title":{},"body":{"index.html":{}}}],["base",{"_index":122,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["base.ts",{"_index":789,"title":{},"body":{"interfaces/MonitorBase.html":{},"coverage.html":{}}}],["based",{"_index":403,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["basic",{"_index":1457,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["basics",{"_index":1450,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["batches",{"_index":1022,"title":{},"body":{"index.html":{}}}],["bbb",{"_index":1592,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["become",{"_index":774,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["becomes",{"_index":344,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["before",{"_index":796,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["beforeeach",{"_index":1883,"title":{},"body":{"additional-documentation/testing.html":{}}}],["beforeeach(async",{"_index":1881,"title":{},"body":{"additional-documentation/testing.html":{}}}],["begindrag",{"_index":572,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["begindrag(monitor",{"_index":683,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["behaviorsubject",{"_index":1564,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["behaviour",{"_index":294,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["behavioursubject",{"_index":1572,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["being",{"_index":373,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["belong",{"_index":1127,"title":{},"body":{"index.html":{}}}],["below",{"_index":1360,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["benefit",{"_index":1135,"title":{},"body":{"index.html":{}}}],["best",{"_index":661,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["better",{"_index":1581,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["between",{"_index":474,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["beyond",{"_index":1313,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["bg",{"_index":1740,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["big",{"_index":1498,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["biggest",{"_index":1789,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["binding",{"_index":579,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["bit",{"_index":1637,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["black",{"_index":1442,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["blindly",{"_index":592,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["block",{"_index":1499,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["blocks",{"_index":1042,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["board",{"_index":720,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["boardcomponent",{"_index":1445,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["boardsquarecomponent",{"_index":1690,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["body",{"_index":1479,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["boilerplate",{"_index":1568,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["bones",{"_index":1089,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":50,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/functions.html":{}}}],["boolean;then",{"_index":1480,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["border",{"_index":1527,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["born",{"_index":1113,"title":{},"body":{"index.html":{}}}],["both",{"_index":654,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["bottom",{"_index":492,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["bound",{"_index":206,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["bounding",{"_index":1347,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["box",{"_index":1366,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["break",{"_index":1435,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["breaking",{"_index":1601,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["brevity's",{"_index":1534,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["broadcast",{"_index":1569,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["broken",{"_index":582,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["browse",{"_index":1144,"title":{},"body":{"modules.html":{},"additional-documentation/quickstart.html":{}}}],["browser",{"_index":1228,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["browsers",{"_index":639,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["browsing",{"_index":1220,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["bug",{"_index":859,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["build",{"_index":867,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["builder",{"_index":1081,"title":{},"body":{"index.html":{}}}],["building",{"_index":989,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["bump",{"_index":847,"title":{},"body":{"changelog.html":{}}}],["c.candrop",{"_index":1735,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["c.isdragging",{"_index":209,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["c.isover",{"_index":1734,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cad",{"_index":1077,"title":{},"body":{"index.html":{}}}],["call",{"_index":260,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["callback",{"_index":135,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["callbacks",{"_index":225,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["called",{"_index":216,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/translating-react-code.html":{}}}],["calling",{"_index":1261,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["came",{"_index":1681,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["can't",{"_index":1265,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["candrag",{"_index":586,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/quickstart.html":{}}}],["candrag(monitor",{"_index":699,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["candrop",{"_index":198,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"additional-documentation/chess-tutorial.html":{}}}],["candrop(monitor",{"_index":769,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["canmoveknight",{"_index":1603,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["canmoveknight(to",{"_index":1609,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["capturedraggingstate",{"_index":470,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{}}}],["card",{"_index":717,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["cards",{"_index":1067,"title":{},"body":{"index.html":{}}}],["carry",{"_index":1426,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["case",{"_index":200,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetSpec.html":{}}}],["cases",{"_index":328,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{}}}],["cat",{"_index":1392,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["cats",{"_index":1391,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["center",{"_index":1505,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["certain",{"_index":334,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["chain",{"_index":612,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["change",{"_index":339,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["changelog",{"_index":834,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":169,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["changing",{"_index":1408,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["character",{"_index":1461,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["check",{"_index":706,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["checking",{"_index":777,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["checks",{"_index":180,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["chess",{"_index":1051,"title":{"additional-documentation/chess-tutorial.html":{}},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["chessboard",{"_index":1542,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["child",{"_index":617,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["choose",{"_index":217,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["chrome",{"_index":61,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["circumstances",{"_index":660,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["class",{"_index":67,"title":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}},"body":{"coverage.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"index.html":{},"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["clean",{"_index":263,"title":{},"body":{"injectables/DndService.html":{}}}],["clearer",{"_index":1595,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["clearly",{"_index":1557,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["click",{"_index":1225,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["client",{"_index":429,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["closed",{"_index":83,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["code",{"_index":191,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["codebase",{"_index":1128,"title":{},"body":{"index.html":{}}}],["coll",{"_index":1739,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["collect",{"_index":1796,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["collect((props",{"_index":1816,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["collected",{"_index":192,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["color",{"_index":1484,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["colour",{"_index":1474,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["columns",{"_index":1530,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["combination",{"_index":1397,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["combine",{"_index":1822,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["comes",{"_index":1815,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["commence",{"_index":1204,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["commit",{"_index":841,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["commits",{"_index":840,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["common",{"_index":255,"title":{},"body":{"injectables/DndService.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["community",{"_index":1134,"title":{},"body":{"index.html":{}}}],["compared",{"_index":1766,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["compatibility",{"_index":12,"title":{},"body":{"interfaces/AddSubscription.html":{},"additional-documentation/quickstart.html":{}}}],["compatible",{"_index":771,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["complete",{"_index":1451,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["completions",{"_index":1287,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["complex",{"_index":990,"title":{},"body":{"index.html":{}}}],["component",{"_index":247,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["component's",{"_index":555,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["component.fireaction(monitor.getitem",{"_index":1774,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["component.source.gethandlerid",{"_index":1890,"title":{},"body":{"additional-documentation/testing.html":{}}}],["component.target.gethandlerid",{"_index":1891,"title":{},"body":{"additional-documentation/testing.html":{}}}],["componentfixture",{"_index":1872,"title":{},"body":{"additional-documentation/testing.html":{}}}],["components",{"_index":226,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["composing",{"_index":1800,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["comprehensive",{"_index":1032,"title":{},"body":{"index.html":{}}}],["comprehensively",{"_index":1278,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["compute",{"_index":1627,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["computed",{"_index":1687,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["concept",{"_index":1793,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["concepts",{"_index":1201,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["conceptually",{"_index":1669,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["concerned",{"_index":1497,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["configuration",{"_index":62,"title":{},"body":{"interfaces/BackendInput.html":{},"index.html":{}}}],["configure",{"_index":41,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/testing.html":{}}}],["confusing",{"_index":1666,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["confusion",{"_index":744,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["connect",{"_index":72,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["connect(fn",{"_index":96,"title":{},"body":{"classes/Connection.html":{}}}],["connect.connectdragsource",{"_index":1776,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connectdragpreview",{"_index":73,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["connectdragpreview(elementornode",{"_index":530,"title":{},"body":{"interfaces/DragSource.html":{}}}],["connectdragpreview(node",{"_index":101,"title":{},"body":{"classes/Connection.html":{}}}],["connectdragsource",{"_index":74,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["connectdragsource(elementornode",{"_index":546,"title":{},"body":{"interfaces/DragSource.html":{}}}],["connectdragsource(node",{"_index":104,"title":{},"body":{"classes/Connection.html":{}}}],["connectdroptarget",{"_index":75,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["connectdroptarget(elementornode",{"_index":739,"title":{},"body":{"interfaces/DropTarget.html":{}}}],["connectdroptarget(node",{"_index":106,"title":{},"body":{"classes/Connection.html":{}}}],["connected",{"_index":295,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["connecting",{"_index":1292,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["connection",{"_index":68,"title":{"classes/Connection.html":{}},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["connection's",{"_index":1293,"title":{},"body":{"additional-documentation/guide.html":{}}}],["connection.ts",{"_index":437,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["connection.unsubscribe",{"_index":250,"title":{},"body":{"injectables/DndService.html":{}}}],["connectionbase",{"_index":119,"title":{"interfaces/ConnectionBase.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["connectionbase.unsubscribe",{"_index":1807,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connections",{"_index":1290,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["connector",{"_index":97,"title":{"interfaces/Connector.html":{}},"body":{"classes/Connection.html":{},"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"coverage.html":{}}}],["connectors",{"_index":1834,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connects",{"_index":1830,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["consider",{"_index":1184,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["considered",{"_index":709,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["console.log('dropped",{"_index":1358,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["const",{"_index":536,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["constant",{"_index":1650,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["constants",{"_index":1659,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["constants.ts",{"_index":1652,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["construct",{"_index":1862,"title":{},"body":{"additional-documentation/testing.html":{}}}],["constructor",{"_index":84,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["constructor(backend",{"_index":820,"title":{},"body":{"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["constructor(backendconnector",{"_index":809,"title":{},"body":{"classes/Reconnector.html":{}}}],["constructor(factoryargs",{"_index":85,"title":{},"body":{"classes/Connection.html":{}}}],["constructor(manager",{"_index":442,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["constructor(private",{"_index":1304,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["constructor(spec",{"_index":815,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["constructors",{"_index":270,"title":{},"body":{"injectables/DndService.html":{}}}],["consumers",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":15,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["containercomponent",{"_index":1538,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["content",{"_index":600,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["context",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contributors",{"_index":1129,"title":{},"body":{"index.html":{}}}],["convenience",{"_index":1326,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["convenient",{"_index":134,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{}}}],["conventional",{"_index":839,"title":{},"body":{"changelog.html":{}}}],["convert",{"_index":1548,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cookie",{"_index":1098,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1524,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coord",{"_index":1546,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coord.ts",{"_index":1547,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coordinate",{"_index":425,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/Offset.html":{}}}],["coordinates",{"_index":430,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["copy",{"_index":635,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["copying",{"_index":643,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["core",{"_index":53,"title":{},"body":{"interfaces/BackendInput.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["core's",{"_index":166,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["cormacrelf",{"_index":1114,"title":{},"body":{"index.html":{}}}],["corollary",{"_index":299,"title":{},"body":{"injectables/DndService.html":{}}}],["correctly",{"_index":1253,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["corresponds",{"_index":644,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["couples",{"_index":697,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["course",{"_index":1762,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["coverage",{"_index":886,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":256,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["createbackend",{"_index":1241,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["createconnector",{"_index":784,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["created",{"_index":1344,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["createhandler",{"_index":785,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["createmonitor",{"_index":786,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["creates",{"_index":287,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["createsourceconnector",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourceconnector(backend",{"_index":972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsourcefactory",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourcefactory(spec",{"_index":973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsourcemonitor",{"_index":912,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourcemonitor(manager",{"_index":974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetconnector",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetconnector(backend",{"_index":975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetfactory",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetfactory(spec",{"_index":976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetmonitor",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetmonitor(manager",{"_index":977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtestbackend",{"_index":1869,"title":{},"body":{"additional-documentation/testing.html":{}}}],["creating",{"_index":1289,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["css",{"_index":1005,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["current",{"_index":378,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["currently",{"_index":756,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["currentoptions",{"_index":970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["currentposition",{"_index":1605,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cursor",{"_index":521,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["custom",{"_index":343,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["customisations",{"_index":633,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["customise",{"_index":1355,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["customize",{"_index":1745,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cutter",{"_index":1099,"title":{},"body":{"index.html":{}}}],["d",{"_index":1867,"title":{},"body":{"additional-documentation/testing.html":{}}}],["d5aa05b",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["dan",{"_index":991,"title":{},"body":{"index.html":{}}}],["data",{"_index":309,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["data:image/png;base64",{"_index":1748,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dead",{"_index":1654,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["deadline",{"_index":1104,"title":{},"body":{"index.html":{}}}],["debug",{"_index":45,"title":{},"body":{"interfaces/BackendInput.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":55,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["decisions",{"_index":1424,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["declarations",{"_index":1472,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["declared",{"_index":1809,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decorating",{"_index":1795,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decorators",{"_index":1802,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decreased",{"_index":504,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["deep",{"_index":1492,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["default",{"_index":329,"title":{},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["defer",{"_index":1850,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["define",{"_index":672,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["defined",{"_index":590,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["definitions",{"_index":1254,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["degradation",{"_index":738,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["deleting",{"_index":1055,"title":{},"body":{"index.html":{}}}],["demo",{"_index":1277,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["demonstrations",{"_index":1085,"title":{},"body":{"index.html":{}}}],["demos",{"_index":1769,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["depend",{"_index":1845,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dependencies",{"_index":944,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":1871,"title":{},"body":{"additional-documentation/testing.html":{}}}],["depending",{"_index":380,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["depends",{"_index":1143,"title":{},"body":{"index.html":{}}}],["derive",{"_index":1404,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["describe",{"_index":1647,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["describe(mycomponent.name",{"_index":1876,"title":{},"body":{"additional-documentation/testing.html":{}}}],["described",{"_index":1854,"title":{},"body":{"additional-documentation/testing.html":{}}}],["describing",{"_index":686,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["description",{"_index":6,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"properties.html":{}}}],["designed",{"_index":365,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["desirable",{"_index":508,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["desktop",{"_index":1226,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["desktops",{"_index":1227,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["destroy",{"_index":258,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["destroy.unsubscribe",{"_index":261,"title":{},"body":{"injectables/DndService.html":{}}}],["destroyed",{"_index":158,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["destroying",{"_index":1315,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["destructive",{"_index":649,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["details",{"_index":707,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/testing.html":{}}}],["detection",{"_index":728,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/testing.html":{}}}],["determine",{"_index":700,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["devices",{"_index":1223,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["diagramming",{"_index":1071,"title":{},"body":{"index.html":{}}}],["diddrop",{"_index":587,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["difference",{"_index":1790,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["differences",{"_index":1763,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["different",{"_index":433,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["differently",{"_index":1878,"title":{},"body":{"additional-documentation/testing.html":{}}}],["difficult",{"_index":1707,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["directive",{"_index":298,"title":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}},"body":{"injectables/DndService.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["directives",{"_index":454,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"changelog.html":{},"overview.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["directives.ts",{"_index":455,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{}}}],["directly",{"_index":532,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["disappears",{"_index":1640,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["disconnect",{"_index":808,"title":{},"body":{"classes/Reconnector.html":{}}}],["discover",{"_index":1381,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["discussed",{"_index":1138,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["discussion",{"_index":768,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dispatched",{"_index":613,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["displacement",{"_index":793,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["display",{"_index":402,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["distinctuntilchanged",{"_index":179,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["div",{"_index":1502,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["divs",{"_index":1513,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dnd",{"_index":52,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"dependencies.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["dnd's",{"_index":300,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["dnd.dragsource('item",{"_index":1782,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dnd/core",{"_index":266,"title":{},"body":{"injectables/DndService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["dnd/multi",{"_index":420,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["dnd/ng",{"_index":1152,"title":{},"body":{"properties.html":{}}}],["dnd/sortable",{"_index":1003,"title":{},"body":{"index.html":{}}}],["dndmodule",{"_index":40,"title":{"modules/DndModule.html":{}},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"modules.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["dndmodule.forroot",{"_index":1189,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["dndservice",{"_index":129,"title":{"injectables/DndService.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["dndservice#draglayer",{"_index":1301,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice#dragsource",{"_index":1298,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice#droptarget",{"_index":1300,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice.draglayer",{"_index":366,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["dndservice.dragsource",{"_index":1767,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dndservice.droptarget(types",{"_index":152,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dndzone",{"_index":89,"title":{},"body":{"classes/Connection.html":{}}}],["dock",{"_index":485,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{}}}],["docs",{"_index":432,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/translating-react-code.html":{}}}],["documentation",{"_index":887,"title":{},"body":{"coverage.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["documented",{"_index":838,"title":{},"body":{"changelog.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["doesn't",{"_index":519,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["doing",{"_index":696,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dom",{"_index":124,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["don't",{"_index":220,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["done",{"_index":1320,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["down",{"_index":1065,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["drag",{"_index":167,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["drag/drop",{"_index":1047,"title":{},"body":{"index.html":{}}}],["drag/listen",{"_index":308,"title":{},"body":{"injectables/DndService.html":{}}}],["drag_drop_backend",{"_index":928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_debug_mode",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_factory",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_options",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_global_context",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_manager",{"_index":934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["dragdropmanager",{"_index":88,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["dragdropmonitor",{"_index":631,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["draggable",{"_index":419,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragged",{"_index":374,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragging",{"_index":210,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["draggingclassapplied",{"_index":1879,"title":{},"body":{"additional-documentation/testing.html":{}}}],["draglayer",{"_index":282,"title":{"interfaces/DragLayer.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["draglayer(subscription",{"_index":285,"title":{},"body":{"injectables/DndService.html":{}}}],["draglayer.listen",{"_index":369,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["draglayerconnectionclass",{"_index":435,"title":{"classes/DragLayerConnectionClass.html":{}},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["draglayermonitor",{"_index":371,"title":{"interfaces/DragLayerMonitor.html":{}},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["dragpreview",{"_index":463,"title":{},"body":{"directives/DragPreviewDirective.html":{},"classes/SourceConnector.html":{}}}],["dragpreview]=\"source",{"_index":1363,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragpreviewdirective",{"_index":453,"title":{"directives/DragPreviewDirective.html":{}},"body":{"directives/DragPreviewDirective.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragpreviewoptions",{"_index":103,"title":{"interfaces/DragPreviewOptions.html":{}},"body":{"classes/Connection.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsource",{"_index":283,"title":{"interfaces/DragSource.html":{}},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTarget.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource's",{"_index":585,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["dragsource('item",{"_index":1775,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dragsource(type",{"_index":290,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource.connectdragpreview",{"_index":1386,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsource.listen",{"_index":1672,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource.settype",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource]=\"itemsource",{"_index":1832,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dragsource]=\"source",{"_index":1376,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourceconnector",{"_index":821,"title":{},"body":{"classes/SourceConnector.html":{}}}],["dragsourcedecorator",{"_index":1155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dragsourcedirective",{"_index":573,"title":{"directives/DragSourceDirective.html":{}},"body":{"directives/DragSourceDirective.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourcefactory",{"_index":1157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dragsourcemonitor",{"_index":583,"title":{"interfaces/DragSourceMonitor.html":{}},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["dragsourcemonitor.id",{"_index":711,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["dragsourcemonitor.isdragging",{"_index":1673,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dragsourcemonitorclass",{"_index":620,"title":{"classes/DragSourceMonitorClass.html":{}},"body":{"classes/DragSourceMonitorClass.html":{},"coverage.html":{}}}],["dragsourceoptions",{"_index":105,"title":{"interfaces/DragSourceOptions.html":{}},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"coverage.html":{}}}],["dragsourcespec",{"_index":291,"title":{"interfaces/DragSourceSpec.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourcespec.begindrag",{"_index":404,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["dragsourcetype",{"_index":574,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["dragula",{"_index":1103,"title":{},"body":{"index.html":{}}}],["draw",{"_index":1073,"title":{},"body":{"index.html":{}}}],["drill",{"_index":1064,"title":{},"body":{"index.html":{}}}],["drive",{"_index":1561,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["drop",{"_index":314,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["drop(monitor",{"_index":770,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["dropeffect",{"_index":634,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{}}}],["dropped",{"_index":682,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dropping",{"_index":138,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dropresult",{"_index":292,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["drops",{"_index":1632,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptarget",{"_index":284,"title":{"interfaces/DropTarget.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["droptarget's",{"_index":752,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["droptarget(types",{"_index":325,"title":{},"body":{"injectables/DndService.html":{}}}],["droptarget.listen",{"_index":1720,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptarget.settypes",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["droptargetconnector",{"_index":830,"title":{},"body":{"classes/TargetConnector.html":{}}}],["droptargetdecorator",{"_index":1158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["droptargetdirective",{"_index":740,"title":{"directives/DropTargetDirective.html":{}},"body":{"directives/DropTargetDirective.html":{},"coverage.html":{}}}],["droptargetfactory",{"_index":1159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["droptargetmonitor",{"_index":750,"title":{"interfaces/DropTargetMonitor.html":{}},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["droptargetmonitor.candrop",{"_index":1721,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptargetmonitor.isover",{"_index":1722,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptargetmonitorclass",{"_index":762,"title":{"classes/DropTargetMonitorClass.html":{}},"body":{"classes/DropTargetMonitorClass.html":{},"coverage.html":{}}}],["droptargetspec",{"_index":132,"title":{"interfaces/DropTargetSpec.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["droptargetspec.candrop",{"_index":1399,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["droptargetspec.drop",{"_index":1430,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["droptargettype",{"_index":741,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["droptargettypes",{"_index":742,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["dt",{"_index":151,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dt.add(subj.pipe",{"_index":160,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dumb",{"_index":395,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["duplication",{"_index":385,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["duration",{"_index":141,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["during",{"_index":669,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["dx",{"_index":1610,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dy",{"_index":1612,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dynamic",{"_index":319,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["dynamically",{"_index":549,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["e.g",{"_index":1370,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["each",{"_index":1202,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["earlier",{"_index":1719,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["easier",{"_index":567,"title":{},"body":{"interfaces/DragSource.html":{}}}],["easily",{"_index":533,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["easy",{"_index":249,"title":{},"body":{"injectables/DndService.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["editor",{"_index":1285,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["eee",{"_index":1394,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["effectively",{"_index":392,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["efficient",{"_index":1820,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["element",{"_index":296,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["element's",{"_index":1346,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["elementornode",{"_index":545,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["elementref",{"_index":1831,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["elementref.nativeelement",{"_index":535,"title":{},"body":{"interfaces/DragSource.html":{}}}],["elements",{"_index":354,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["elsewhere",{"_index":1560,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["emit",{"_index":1209,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["emits",{"_index":1655,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["empty",{"_index":518,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["emulate",{"_index":188,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["enable",{"_index":54,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["enabled",{"_index":1245,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["enabled/disabled",{"_index":595,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["encapsulation",{"_index":1490,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["encountered",{"_index":1258,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["enddrag",{"_index":604,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Source.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["enddrag(monitor",{"_index":702,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["ends",{"_index":313,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["enough",{"_index":1494,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["enters",{"_index":1021,"title":{},"body":{"index.html":{}}}],["entire",{"_index":1412,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["equality",{"_index":182,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["erasedto",{"_index":364,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["ergonomic",{"_index":1036,"title":{},"body":{"index.html":{}}}],["error",{"_index":1257,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["es6",{"_index":1842,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["eslint",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["especially",{"_index":1336,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["essentially",{"_index":172,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["etc",{"_index":1827,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["etcthen",{"_index":1353,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["even",{"_index":410,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["event",{"_index":602,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["events",{"_index":400,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["everything",{"_index":1330,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["exact",{"_index":1863,"title":{},"body":{"additional-documentation/testing.html":{}}}],["exactly",{"_index":1418,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["example",{"_index":48,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["examples",{"_index":387,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["except",{"_index":1644,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["execute",{"_index":1620,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["executing",{"_index":1617,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["exist",{"_index":228,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["existing",{"_index":336,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["exiting",{"_index":139,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["expect",{"_index":667,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["expect(draggingclassapplied()).tobefalsy",{"_index":1900,"title":{},"body":{"additional-documentation/testing.html":{}}}],["expect(draggingclassapplied()).tobetruthy",{"_index":1894,"title":{},"body":{"additional-documentation/testing.html":{}}}],["experience",{"_index":737,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["explicitly",{"_index":615,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["export",{"_index":1190,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["exported",{"_index":1237,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["exports",{"_index":239,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{}}}],["express",{"_index":1544,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["expresses",{"_index":1398,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["extended",{"_index":767,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["extends",{"_index":18,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/translating-react-code.html":{}}}],["extension",{"_index":60,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["extra",{"_index":671,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["f8fb0df",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["fact",{"_index":1112,"title":{},"body":{"index.html":{}}}],["factory.ts",{"_index":71,"title":{},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["factoryargs",{"_index":86,"title":{"interfaces/FactoryArgs.html":{}},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"coverage.html":{}}}],["fairly",{"_index":1760,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["false",{"_index":444,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/variables.html":{}}}],["familiar",{"_index":1449,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["famous",{"_index":1066,"title":{},"body":{"index.html":{}}}],["fancy",{"_index":1586,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["far",{"_index":1825,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["faster",{"_index":1105,"title":{},"body":{"index.html":{}}}],["feature",{"_index":640,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["features",{"_index":870,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["few",{"_index":1062,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["figure",{"_index":1712,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["find",{"_index":1108,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["finished",{"_index":1453,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["fire",{"_index":224,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["fireaction",{"_index":1779,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fireaction(item",{"_index":1785,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fired",{"_index":1345,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["fires",{"_index":219,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["first",{"_index":1303,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["fit",{"_index":1013,"title":{},"body":{"index.html":{}}}],["five",{"_index":1803,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fix",{"_index":861,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":381,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["fixes",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["fixture",{"_index":1877,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.componentinstance",{"_index":1887,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.debugelement.query(by.css('.dragging",{"_index":1880,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.detectchanges",{"_index":1889,"title":{},"body":{"additional-documentation/testing.html":{}}}],["flag",{"_index":596,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["flight",{"_index":1015,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["floating",{"_index":1649,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["flow",{"_index":1011,"title":{},"body":{"index.html":{}}}],["flows",{"_index":358,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["fly",{"_index":564,"title":{},"body":{"interfaces/DragSource.html":{}}}],["fn",{"_index":99,"title":{},"body":{"classes/Connection.html":{},"classes/Source.html":{},"classes/Target.html":{}}}],["folder",{"_index":1061,"title":{},"body":{"index.html":{}}}],["follow",{"_index":355,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["following",{"_index":143,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["follows",{"_index":1361,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["font",{"_index":1463,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["foreground",{"_index":1475,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["forget",{"_index":254,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{}}}],["form",{"_index":1362,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["forroot",{"_index":241,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{}}}],["forroot(backendinput",{"_index":242,"title":{},"body":{"modules/DndModule.html":{}}}],["forrootto",{"_index":1197,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["found",{"_index":1126,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["four",{"_index":1452,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["free",{"_index":1821,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["frequently",{"_index":782,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["fresh",{"_index":1556,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["friendly",{"_index":1014,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["full",{"_index":1025,"title":{},"body":{"index.html":{}}}],["function",{"_index":100,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"interfaces/FactoryArgs.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["functioning",{"_index":1805,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["functions",{"_index":421,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DragLayer.html":{},"miscellaneous/functions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["funky",{"_index":1753,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["game",{"_index":1432,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice",{"_index":1563,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice.canmoveknight",{"_index":1628,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice.moveknight",{"_index":1596,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["general",{"_index":422,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide.html":{}}}],["getclientoffset",{"_index":624,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getclosed",{"_index":118,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["getdifferencefrominitialoffset",{"_index":625,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getdropresult",{"_index":588,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["gethandlerid",{"_index":76,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["getinitialclientoffset",{"_index":626,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getinitialsourceclientoffset",{"_index":627,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getitem",{"_index":628,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getitemtype",{"_index":629,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["gets",{"_index":725,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["getsourceclientoffset",{"_index":630,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getstyle",{"_index":1481,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["getting",{"_index":833,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gifs",{"_index":1086,"title":{},"body":{"index.html":{}}}],["github",{"_index":1139,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["give",{"_index":1590,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["given",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gives",{"_index":1818,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["glance",{"_index":1668,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["global",{"_index":351,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["globalmonitor",{"_index":817,"title":{},"body":{"classes/Source.html":{}}}],["gme",{"_index":1704,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["go",{"_index":1554,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["goals",{"_index":1018,"title":{},"body":{"index.html":{}}}],["going",{"_index":773,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["good",{"_index":277,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["grab",{"_index":1380,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["graphical",{"_index":1079,"title":{},"body":{"index.html":{}}}],["green",{"_index":1716,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["greenplus",{"_index":680,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["grid",{"_index":1522,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["grouping",{"_index":204,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["groupings",{"_index":563,"title":{},"body":{"interfaces/DragSource.html":{}}}],["guidance",{"_index":1705,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["guide",{"_index":1217,"title":{"additional-documentation/guide.html":{}},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["guidelines",{"_index":842,"title":{},"body":{"changelog.html":{}}}],["habit",{"_index":278,"title":{},"body":{"injectables/DndService.html":{}}}],["handle",{"_index":418,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["handled",{"_index":534,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["handler",{"_index":1623,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["handlerid",{"_index":235,"title":{},"body":{"interfaces/Connector.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["handles",{"_index":1341,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["handlesquareclick",{"_index":1616,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["handlesquareclick(pos",{"_index":1598,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hanging",{"_index":222,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["happen",{"_index":1643,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["happens",{"_index":1048,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["happily",{"_index":187,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["hard",{"_index":694,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["having",{"_index":253,"title":{},"body":{"injectables/DndService.html":{}}}],["head",{"_index":1247,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["heavy",{"_index":1699,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["height",{"_index":1469,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["help",{"_index":1133,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["helpful",{"_index":1422,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["here",{"_index":733,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["here's",{"_index":1593,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["hide",{"_index":515,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["high",{"_index":1019,"title":{},"body":{"index.html":{}}}],["higher",{"_index":1791,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["highlighted",{"_index":1429,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["hinders",{"_index":1411,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["hint",{"_index":646,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["hoist",{"_index":310,"title":{},"body":{"injectables/DndService.html":{}}}],["hold",{"_index":1545,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hook",{"_index":322,"title":{},"body":{"injectables/DndService.html":{},"classes/Reconnector.html":{},"additional-documentation/chess-tutorial.html":{}}}],["hooks",{"_index":230,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["horizontal",{"_index":481,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["horse",{"_index":1754,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["host",{"_index":1501,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hover",{"_index":136,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["hover(monitor",{"_index":781,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["hovered",{"_index":760,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["hovering",{"_index":757,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["hovers",{"_index":783,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["html",{"_index":1478,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["html5",{"_index":331,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["html5backend",{"_index":49,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["html5dropresult",{"_index":674,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["https",{"_index":1750,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["https://github.com/ng",{"_index":1151,"title":{},"body":{"properties.html":{}}}],["icon",{"_index":681,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["id",{"_index":408,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["idea",{"_index":698,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["identical",{"_index":1718,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["identifier",{"_index":234,"title":{},"body":{"interfaces/Connector.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"coverage.html":{}}}],["ids",{"_index":1888,"title":{},"body":{"additional-documentation/testing.html":{}}}],["ie",{"_index":513,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["ie11",{"_index":581,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["illegal",{"_index":1621,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["illustrate",{"_index":1765,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["image",{"_index":338,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["imaginary",{"_index":1251,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["imagine",{"_index":1839,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["img",{"_index":537,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["img.onload",{"_index":538,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["img.src",{"_index":540,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["immediate",{"_index":544,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["immediately",{"_index":494,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["implement",{"_index":1043,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["implementation",{"_index":1415,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["implemented",{"_index":1224,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["implementing",{"_index":1438,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["implements",{"_index":438,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"directives/DropTargetDirective.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}}}],["import",{"_index":272,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["important",{"_index":412,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["importing",{"_index":1248,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["imports",{"_index":238,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["improvements",{"_index":1137,"title":{},"body":{"index.html":{}}}],["include",{"_index":1200,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["includes",{"_index":1236,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["including",{"_index":424,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["incorporate",{"_index":1698,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["independent",{"_index":1539,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicator",{"_index":1706,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["indices",{"_index":1550,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["inferring",{"_index":659,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{}}}],["information",{"_index":524,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["initial",{"_index":794,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["initialized",{"_index":1196,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["initialtype",{"_index":91,"title":{},"body":{"classes/Connection.html":{}}}],["initiated",{"_index":619,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{}}}],["inject",{"_index":1198,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["injectable",{"_index":244,"title":{"injectables/DndService.html":{}},"body":{"coverage.html":{},"overview.html":{},"additional-documentation/chess-tutorial.html":{}}}],["injectables",{"_index":245,"title":{},"body":{"injectables/DndService.html":{}}}],["injected",{"_index":1797,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["injection",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["injectiontoken",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('dnd",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inline",{"_index":1016,"title":{},"body":{"index.html":{}}}],["input",{"_index":398,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["inputs",{"_index":466,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["inside",{"_index":447,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["inspired",{"_index":1206,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["install",{"_index":1866,"title":{},"body":{"additional-documentation/testing.html":{}}}],["installation",{"_index":996,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["instance",{"_index":1199,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["instantiate",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instead",{"_index":496,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["instructions",{"_index":1262,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["interaction",{"_index":1235,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["interactions",{"_index":1044,"title":{},"body":{"index.html":{},"additional-documentation/testing.html":{}}}],["interactive",{"_index":1368,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["interactivity",{"_index":399,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["interest",{"_index":1757,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["interested",{"_index":1571,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["interesting",{"_index":1642,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{}},"body":{"interfaces/DragSourceSpec.html":{},"coverage.html":{},"additional-documentation/chess-tutorial.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"index.html":{},"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["internally",{"_index":130,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["internalmonitor",{"_index":622,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["internals",{"_index":306,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["interpolate",{"_index":487,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["introducing",{"_index":1584,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["invariant",{"_index":920,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["invariant(assertion",{"_index":978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["investigate",{"_index":1354,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["isblack",{"_index":1555,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["iscallingcandrag",{"_index":913,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscallingcandrop",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscallingisdragging",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdragging",{"_index":194,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["isdragging(globalmonitor",{"_index":816,"title":{},"body":{"classes/Source.html":{}}}],["isdragging(monitor",{"_index":708,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["isdraggingobj",{"_index":1421,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["isdraggingplain",{"_index":1419,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["ish.ts",{"_index":801,"title":{},"body":{"interfaces/Offset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["isn't",{"_index":593,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["isolate",{"_index":1858,"title":{},"body":{"additional-documentation/testing.html":{}}}],["isolation",{"_index":1855,"title":{},"body":{"additional-documentation/testing.html":{}}}],["isover",{"_index":196,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["isover(options",{"_index":753,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["issue",{"_index":1132,"title":{},"body":{"index.html":{}}}],["issues",{"_index":1124,"title":{},"body":{"index.html":{}}}],["isticking",{"_index":439,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["it's",{"_index":687,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["it('should",{"_index":1892,"title":{},"body":{"additional-documentation/testing.html":{}}}],["item",{"_index":286,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["item's",{"_index":795,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["items",{"_index":317,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["itemsource",{"_index":1781,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["itemsourcespec",{"_index":1770,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["itemtypes",{"_index":1653,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["itemtypes.knight",{"_index":1656,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["itself",{"_index":1414,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["javascript",{"_index":685,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["jest",{"_index":1852,"title":{},"body":{"additional-documentation/testing.html":{}}}],["job",{"_index":1364,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["jones",{"_index":1351,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["js",{"_index":655,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["jsx",{"_index":1828,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["kanban",{"_index":719,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["keep",{"_index":597,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["key",{"_index":678,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["keys",{"_index":1417,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["keywords",{"_index":1148,"title":{},"body":{"properties.html":{}}}],["kinds",{"_index":1234,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["knight",{"_index":1433,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knight's",{"_index":1570,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightcomponent",{"_index":1439,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightposition",{"_index":1558,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightposition$|async",{"_index":1588,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knights",{"_index":1648,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightsource",{"_index":1661,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["know",{"_index":690,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["kp",{"_index":1608,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["laid",{"_index":1403,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["large",{"_index":1333,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["largely",{"_index":1028,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["last",{"_index":608,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["lastly",{"_index":1744,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["later",{"_index":714,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["layer",{"_index":348,"title":{},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["layers",{"_index":391,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/testing.html":{}}}],["lazy",{"_index":1193,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["leaked",{"_index":280,"title":{},"body":{"injectables/DndService.html":{}}}],["learn",{"_index":493,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["learnable",{"_index":1709,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["learning",{"_index":1106,"title":{},"body":{"index.html":{}}}],["leave",{"_index":221,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["left",{"_index":486,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["let's",{"_index":1516,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lets",{"_index":56,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["level",{"_index":1041,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":1635,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["library",{"_index":1096,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["license",{"_index":1140,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":321,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["lifetime",{"_index":324,"title":{},"body":{"injectables/DndService.html":{}}}],["lifting",{"_index":1700,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lightgoldenrodyellow",{"_index":1395,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["lightweight",{"_index":1566,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["limitations",{"_index":335,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/translating-react-code.html":{}}}],["limitedsupplyofpaper",{"_index":1271,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["line",{"_index":1468,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["linearly",{"_index":488,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["liners",{"_index":1274,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["lines",{"_index":1746,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["link",{"_index":637,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/translating-react-code.html":{}}}],["linked",{"_index":1500,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["links",{"_index":1074,"title":{},"body":{"index.html":{}}}],["list",{"_index":527,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["listen",{"_index":77,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["listen()/subscribe",{"_index":131,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["listen(m",{"_index":213,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["listen(mapfn",{"_index":107,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["listen(mapto",{"_index":163,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{}}}],["listens",{"_index":1859,"title":{},"body":{"additional-documentation/testing.html":{}}}],["lists",{"_index":718,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["literal",{"_index":754,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["little",{"_index":1664,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["live",{"_index":1456,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lives",{"_index":1009,"title":{},"body":{"index.html":{}}}],["load",{"_index":1383,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["loaded",{"_index":1194,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["log",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["logic",{"_index":598,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["long",{"_index":1747,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["longer",{"_index":227,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["look",{"_index":1214,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["looking",{"_index":1314,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["looks",{"_index":1670,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["loops",{"_index":1518,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lot",{"_index":1212,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["lots",{"_index":251,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["lower",{"_index":1040,"title":{},"body":{"index.html":{}}}],["luna",{"_index":1084,"title":{},"body":{"index.html":{}}}],["m.candrop",{"_index":1731,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["m.candrop());what",{"_index":1402,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["m.isdragging",{"_index":214,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["m.isover",{"_index":1401,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["macos",{"_index":1057,"title":{},"body":{"index.html":{}}}],["made",{"_index":543,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"index.html":{}}}],["maintain",{"_index":1323,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["maintaining",{"_index":1116,"title":{},"body":{"index.html":{}}}],["maintains",{"_index":165,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["make",{"_index":367,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["makes",{"_index":1682,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["making",{"_index":732,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["managed",{"_index":1806,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["manager",{"_index":87,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"miscellaneous/functions.html":{},"additional-documentation/testing.html":{}}}],["manager.getbackend",{"_index":1885,"title":{},"body":{"additional-documentation/testing.html":{}}}],["mandated",{"_index":1764,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["manually",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["many",{"_index":327,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["map",{"_index":1728,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["map(coll",{"_index":1738,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["mapfn",{"_index":111,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["mapto",{"_index":215,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{}}}],["marker",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":483,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["matching",{"_index":33,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["math.abs(dx",{"_index":1614,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["math.abs(dy",{"_index":1615,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["math.floor(i",{"_index":1553,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["maximally",{"_index":1035,"title":{},"body":{"index.html":{}}}],["maybe",{"_index":257,"title":{},"body":{"injectables/DndService.html":{}}}],["mcfly",{"_index":1352,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["mean",{"_index":1512,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["meaning",{"_index":1046,"title":{},"body":{"index.html":{}}}],["means",{"_index":484,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["meexample",{"_index":1349,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["merging",{"_index":1060,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":461,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["method",{"_index":17,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide.html":{}}}],["methods",{"_index":20,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["midflight",{"_index":340,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["minimal",{"_index":689,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["miscellaneous",{"_index":954,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1142,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mobile",{"_index":1222,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["mode",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":557,"title":{},"body":{"interfaces/DragSource.html":{}}}],["modern",{"_index":1525,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["modify",{"_index":705,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["module",{"_index":236,"title":{"modules/DndModule.html":{}},"body":{"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["module's",{"_index":1471,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["module.ts",{"_index":36,"title":{},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modulenamemapper",{"_index":1853,"title":{},"body":{"additional-documentation/testing.html":{}}}],["modules",{"_index":237,"title":{"modules.html":{}},"body":{"modules/DndModule.html":{},"modules.html":{},"additional-documentation/quickstart.html":{}}}],["modulewithproviders",{"_index":243,"title":{},"body":{"modules/DndModule.html":{}}}],["moment",{"_index":1624,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["monitor",{"_index":108,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/Target.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.candrop",{"_index":199,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["monitor.diddrop",{"_index":1276,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.getdropresult",{"_index":668,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["monitor.getitem",{"_index":656,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["monitor.isdragging",{"_index":195,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.isdragging());example",{"_index":1675,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["monitor.isover",{"_index":197,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["monitor.ts",{"_index":446,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"coverage.html":{}}}],["monitorbase",{"_index":448,"title":{"interfaces/MonitorBase.html":{}},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["monitoring",{"_index":1295,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["monitors",{"_index":1406,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["moot",{"_index":1811,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["more",{"_index":411,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["mounted",{"_index":726,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["mouse",{"_index":356,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["movable",{"_index":1052,"title":{},"body":{"index.html":{}}}],["move",{"_index":636,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["moved",{"_index":362,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["moveknight",{"_index":1634,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["moveknight(to",{"_index":1577,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["moves",{"_index":363,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["moving",{"_index":716,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["msg",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["much",{"_index":1594,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["multi",{"_index":10,"title":{},"body":{"interfaces/AddSubscription.html":{},"additional-documentation/quickstart.html":{}}}],["multibackend",{"_index":66,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["multibackend(html5totouch",{"_index":1242,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["multiple",{"_index":1801,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["mutable",{"_index":1091,"title":{},"body":{"index.html":{}}}],["mutate",{"_index":1004,"title":{},"body":{"index.html":{}}}],["mybackend",{"_index":1256,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["mycomponent",{"_index":1777,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["mydraggeditemtype",{"_index":664,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["mydropresult",{"_index":675,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["name",{"_index":27,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["neat",{"_index":1318,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["necessarily",{"_index":1094,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":345,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{}}}],["need",{"_index":514,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["nested",{"_index":614,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["never",{"_index":1413,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["new",{"_index":149,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["next",{"_index":497,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["nextoptions",{"_index":971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ng",{"_index":265,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ng2",{"_index":1102,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":1342,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngif",{"_index":203,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngif=\"aaa",{"_index":1591,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngmodule",{"_index":1188,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["ngonchanges",{"_index":465,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/translating-react-code.html":{}}}],["ngondestroy",{"_index":218,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ngoninit",{"_index":556,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngrx",{"_index":1567,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngrx/store",{"_index":780,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["ngstyle",{"_index":1486,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngswitch",{"_index":382,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["ngx",{"_index":1149,"title":{},"body":{"properties.html":{}}}],["ngzone.run",{"_index":736,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["noble",{"_index":1600,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["node",{"_index":102,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"classes/Reconnector.html":{},"additional-documentation/quickstart.html":{}}}],["node,options",{"_index":811,"title":{},"body":{"classes/Reconnector.html":{}}}],["nodes",{"_index":1075,"title":{},"body":{"index.html":{}}}],["nohtml5preview",{"_index":575,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["non",{"_index":746,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["none",{"_index":638,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notable",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["notation",{"_index":1813,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["note",{"_index":591,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["nothing",{"_index":772,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notice",{"_index":1510,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["noticed",{"_index":1233,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["notified",{"_index":170,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notifies",{"_index":703,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["notifying",{"_index":312,"title":{},"body":{"injectables/DndService.html":{}}}],["now",{"_index":376,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["null",{"_index":211,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["number",{"_index":473,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/Offset.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["o",{"_index":164,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/Reconnector.html":{}}}],["obja",{"_index":987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objb",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":288,"title":{},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["objects",{"_index":185,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["observable",{"_index":112,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["observable.combinelatest",{"_index":1823,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["observable.map",{"_index":173,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["observables",{"_index":1724,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["observe",{"_index":1723,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["obvious",{"_index":1708,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["occur",{"_index":500,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["offer",{"_index":1302,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["offers",{"_index":1211,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["offset",{"_index":478,"title":{"interfaces/Offset.html":{}},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["offsetx",{"_index":471,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["offsety",{"_index":472,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["once",{"_index":262,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["onchanges",{"_index":460,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["one",{"_index":174,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["ones",{"_index":1282,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["onload",{"_index":1384,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["onpush",{"_index":1027,"title":{},"body":{"index.html":{}}}],["op",{"_index":1865,"title":{},"body":{"additional-documentation/testing.html":{}}}],["opacity",{"_index":505,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["operation",{"_index":450,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["operations",{"_index":1205,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["opposed",{"_index":761,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["optimisation",{"_index":1405,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimise",{"_index":1409,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimises",{"_index":1416,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimization",{"_index":176,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["option",{"_index":645,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["optional",{"_index":29,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":610,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["options",{"_index":43,"title":{},"body":{"interfaces/BackendInput.html":{},"classes/Connection.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["optionshere",{"_index":1264,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["order",{"_index":1792,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["original",{"_index":516,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["others",{"_index":993,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":452,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["out",{"_index":995,"title":{},"body":{"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["output",{"_index":177,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"additional-documentation/translating-react-code.html":{}}}],["outside",{"_index":606,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["over",{"_index":386,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["overall",{"_index":1377,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["overlay",{"_index":1725,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["overlaystyle",{"_index":1736,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["override",{"_index":710,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["overrides",{"_index":616,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["overview",{"_index":1145,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":618,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["owner's",{"_index":589,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["p",{"_index":110,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["package",{"_index":848,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":1002,"title":{},"body":{"index.html":{}}}],["page",{"_index":388,"title":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["papercount",{"_index":1270,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["parameter",{"_index":269,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":560,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["parentid",{"_index":558,"title":{},"body":{"interfaces/DragSource.html":{}}}],["part",{"_index":1216,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["particular",{"_index":526,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["particularly",{"_index":1428,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["parts",{"_index":1697,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["pass",{"_index":320,"title":{},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["passed",{"_index":652,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["paste",{"_index":1788,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["pattern",{"_index":144,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{}}}],["patterns",{"_index":1835,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["paying",{"_index":1507,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["peer",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":383,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["perfectly",{"_index":1688,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["perform",{"_index":342,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{}}}],["performance",{"_index":729,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["pick",{"_index":688,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["picked",{"_index":1679,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["piece",{"_index":389,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["pieces",{"_index":1053,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["pipe",{"_index":1390,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["pipeline",{"_index":1083,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1423,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["place",{"_index":704,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["placed",{"_index":1540,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["places",{"_index":779,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["placing",{"_index":1543,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["plain",{"_index":47,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/Offset.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["planning",{"_index":413,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["play",{"_index":1455,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["players",{"_index":1680,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["plenty",{"_index":1097,"title":{},"body":{"index.html":{}}}],["plural",{"_index":747,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["point",{"_index":1506,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["pointer",{"_index":755,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["poor",{"_index":1339,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["populated",{"_index":1849,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["posing",{"_index":1365,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["position",{"_index":379,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["possibile",{"_index":434,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["possible",{"_index":1029,"title":{},"body":{"index.html":{}}}],["potential",{"_index":1136,"title":{},"body":{"index.html":{}}}],["power",{"_index":1110,"title":{},"body":{"index.html":{}}}],["powered",{"_index":994,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":1101,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["practice",{"_index":409,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["precisely",{"_index":1023,"title":{},"body":{"index.html":{}}}],["presents",{"_index":1759,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["preserves",{"_index":1692,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["pressed",{"_index":679,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["prevent",{"_index":658,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["preview",{"_index":333,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["previews",{"_index":417,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["previously",{"_index":551,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{}}}],["primary",{"_index":1794,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["private",{"_index":1703,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["probably",{"_index":201,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["problem",{"_index":1131,"title":{},"body":{"index.html":{}}}],["problems",{"_index":1230,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["procedure",{"_index":1717,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["process",{"_index":1686,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["produced",{"_index":318,"title":{},"body":{"injectables/DndService.html":{}}}],["product",{"_index":1454,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["program",{"_index":1078,"title":{},"body":{"index.html":{}}}],["progress",{"_index":451,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["project",{"_index":837,"title":{},"body":{"changelog.html":{}}}],["projected",{"_index":798,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["properties",{"_index":44,"title":{"properties.html":{}},"body":{"interfaces/BackendInput.html":{},"interfaces/Connector.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/FactoryArgs.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["property",{"_index":553,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["props",{"_index":1771,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["props.someproperty",{"_index":1773,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["props.type",{"_index":1838,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["prospective",{"_index":1604,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["provide",{"_index":133,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["providednd",{"_index":900,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providednd(backendinput",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provider",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":415,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["providing",{"_index":38,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["public",{"_index":281,"title":{},"body":{"injectables/DndService.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["pulls",{"_index":406,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["purely",{"_index":396,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["put",{"_index":692,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["queries",{"_index":303,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["query",{"_index":1080,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["quick",{"_index":1768,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["quickstart",{"_index":999,"title":{"additional-documentation/quickstart.html":{}},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["quite",{"_index":1100,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["rapidly",{"_index":1407,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["rare",{"_index":510,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["rarely",{"_index":507,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["re",{"_index":1020,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["react",{"_index":189,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["react.component",{"_index":1778,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["react/react",{"_index":1787,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["read",{"_index":431,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["reading",{"_index":1437,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["real",{"_index":1291,"title":{},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["really",{"_index":1511,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rears",{"_index":1246,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["reasons",{"_index":730,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["received",{"_index":775,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["receivehandlerid",{"_index":231,"title":{},"body":{"interfaces/Connector.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["receivehandlerid(handlerid",{"_index":233,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["receivehandlerid(sourceid",{"_index":632,"title":{},"body":{"classes/DragSourceMonitorClass.html":{}}}],["receivehandlerid(targetid",{"_index":765,"title":{},"body":{"classes/DropTargetMonitorClass.html":{}}}],["receivemonitor",{"_index":826,"title":{},"body":{"classes/Target.html":{}}}],["receivemonitor(monitor",{"_index":827,"title":{},"body":{"classes/Target.html":{}}}],["receivetype",{"_index":78,"title":{},"body":{"classes/Connection.html":{}}}],["receivetype(type",{"_index":113,"title":{},"body":{"classes/Connection.html":{}}}],["recent",{"_index":1575,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["recently",{"_index":1896,"title":{},"body":{"additional-documentation/testing.html":{}}}],["recognises",{"_index":673,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["recommended",{"_index":1332,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["reconnect",{"_index":232,"title":{},"body":{"interfaces/Connector.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["reconnector",{"_index":806,"title":{"classes/Reconnector.html":{}},"body":{"classes/Reconnector.html":{},"coverage.html":{}}}],["recorded",{"_index":609,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["rectangle",{"_index":1348,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["red",{"_index":1715,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["reduce",{"_index":384,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["redundant",{"_index":1585,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["redux",{"_index":59,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["refer",{"_index":529,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["reference",{"_index":181,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"changelog.html":{},"additional-documentation/translating-react-code.html":{}}}],["refers",{"_index":1279,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["reflected",{"_index":506,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["registered",{"_index":316,"title":{},"body":{"injectables/DndService.html":{}}}],["registerhandler",{"_index":787,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["registers",{"_index":1203,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["registersource",{"_index":923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["registersource(type",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["registertarget",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["registertarget(type",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["regular",{"_index":1281,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["related",{"_index":525,"title":{},"body":{"interfaces/DragSource.html":{},"index.html":{}}}],["relative",{"_index":479,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["released",{"_index":1141,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":458,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["remember",{"_index":1296,"title":{},"body":{"additional-documentation/guide.html":{}}}],["reminded",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":872,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["renamed",{"_index":1826,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["renaming",{"_index":1249,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["render",{"_index":353,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["rendered",{"_index":360,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/testing.html":{}}}],["rendering",{"_index":330,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["renders",{"_index":1517,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["repeat(8",{"_index":1531,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replace",{"_index":1695,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replacing",{"_index":1622,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replay",{"_index":1574,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replicate",{"_index":599,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["repository",{"_index":1150,"title":{},"body":{"properties.html":{}}}],["represent",{"_index":123,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["representing",{"_index":607,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["represents",{"_index":7,"title":{},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{}}}],["require",{"_index":142,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/testing.html":{}}}],["required",{"_index":684,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{}}}],["requires",{"_index":1239,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resolve",{"_index":1288,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resolving",{"_index":1259,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resorting",{"_index":517,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["respectively",{"_index":1208,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["respond",{"_index":1294,"title":{},"body":{"additional-documentation/guide.html":{}}}],["responsible",{"_index":1440,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rest",{"_index":1847,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["result",{"_index":603,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["result.dropeffect",{"_index":676,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["resulting",{"_index":1388,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["results",{"_index":32,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["resurrected",{"_index":715,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["retain",{"_index":721,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{}}}],["return",{"_index":162,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["returned",{"_index":157,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["returning",{"_index":611,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["reusable",{"_index":802,"title":{},"body":{"interfaces/Offset.html":{}}}],["reuse",{"_index":401,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["rgba(0,0,0,0",{"_index":1741,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["right",{"_index":489,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["root",{"_index":799,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{}}}],["rows",{"_index":1533,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ruin",{"_index":1689,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rules",{"_index":1054,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["run",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["runs",{"_index":155,"title":{},"body":{"interfaces/ConnectionBase.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["rxjs",{"_index":8,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"dependencies.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["rxjs/operators",{"_index":1729,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sake",{"_index":1535,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["same",{"_index":23,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["sane",{"_index":1207,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["save",{"_index":1387,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["scalars",{"_index":183,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["scope",{"_index":1583,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["screen",{"_index":1371,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["screenshot",{"_index":337,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["screenshotting",{"_index":499,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["seamlessly",{"_index":1231,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["seconds",{"_index":1063,"title":{},"body":{"index.html":{}}}],["section",{"_index":1473,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["see",{"_index":57,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["seem",{"_index":1636,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["seen",{"_index":1711,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["selecting",{"_index":1373,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["selector",{"_index":462,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sense",{"_index":1514,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sensible",{"_index":509,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["separate",{"_index":393,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["separated",{"_index":1625,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["serves",{"_index":1651,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["service",{"_index":1579,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["set",{"_index":302,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["setdroptargettype(t",{"_index":748,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["setting",{"_index":577,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["settype",{"_index":79,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["settype(type",{"_index":114,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{}}}],["settype/settypes",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settypes",{"_index":80,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["settypes(type",{"_index":117,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["shallow",{"_index":758,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["shallowequal",{"_index":184,"title":{},"body":{"interfaces/ConnectionBase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["shallowequal(obja",{"_index":985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shortcut",{"_index":576,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["shorthand",{"_index":1273,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["shouldn't",{"_index":731,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{}}}],["show",{"_index":1286,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["showoverlay",{"_index":1732,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["shows",{"_index":642,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["sick",{"_index":1115,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":1218,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["similar",{"_index":712,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["simple",{"_index":246,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["simpler",{"_index":776,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["simply",{"_index":271,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["simulate",{"_index":547,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["simulation",{"_index":1860,"title":{},"body":{"additional-documentation/testing.html":{}}}],["single",{"_index":1335,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["situations",{"_index":1322,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["sixtyfour",{"_index":1519,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["size",{"_index":1466,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sized",{"_index":1338,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["sizes",{"_index":482,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["slash",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["slightly",{"_index":1665,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["small",{"_index":175,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["smaller",{"_index":1367,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["smart",{"_index":394,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["solid",{"_index":1529,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["solution",{"_index":1582,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["solutions",{"_index":1037,"title":{},"body":{"index.html":{}}}],["solve",{"_index":1229,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["somebackend",{"_index":1263,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["somedragsourceconnection.connectdragpreview(img",{"_index":1385,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["someimaginarybackendwithnamedexports",{"_index":1250,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["someone",{"_index":1710,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["someproperty",{"_index":1772,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["something",{"_index":372,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sometimes",{"_index":341,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["somewhere",{"_index":407,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sortable",{"_index":1090,"title":{},"body":{"index.html":{}}}],["source",{"_index":293,"title":{"classes/Source.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["source's",{"_index":778,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["source.ts",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sourceconnection",{"_index":905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceconnector",{"_index":819,"title":{"classes/SourceConnector.html":{}},"body":{"classes/SourceConnector.html":{},"coverage.html":{}}}],["sourceconstructor",{"_index":824,"title":{"interfaces/SourceConstructor.html":{}},"body":{"interfaces/SourceConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceid",{"_index":623,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/Source.html":{}}}],["sources",{"_index":326,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["space",{"_index":1495,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["span",{"_index":1459,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["spec",{"_index":147,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Source.html":{},"classes/Target.html":{},"miscellaneous/functions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["spec.hover?.(monitor",{"_index":154,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["special",{"_index":349,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["specific",{"_index":1045,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["specification.ts",{"_index":651,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"coverage.html":{}}}],["specifics",{"_index":1219,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["specified",{"_index":140,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["specifies",{"_index":477,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["specify",{"_index":457,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{}}}],["specifying",{"_index":641,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["specs",{"_index":1269,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["spirit",{"_index":1713,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["spot",{"_index":361,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["square",{"_index":1444,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squarecomponent",{"_index":1441,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squarecomponents",{"_index":1626,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squares",{"_index":1447,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["src/.../arecollectsequal.ts",{"_index":955,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../areoptionsequal.ts",{"_index":956,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../connection",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../createsourceconnector.ts",{"_index":957,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createsourcefactory.ts",{"_index":958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createsourcemonitor.ts",{"_index":959,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../createtargetconnector.ts",{"_index":960,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createtargetfactory.ts",{"_index":961,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createtargetmonitor.ts",{"_index":962,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../dnd",{"_index":964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../invariant.ts",{"_index":963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../register",{"_index":965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../shallowequal.ts",{"_index":966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tokens.ts",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../type",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../wrappers.ts",{"_index":1156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/connection",{"_index":120,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{}}}],["src/connector.ts",{"_index":5,"title":{},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"coverage.html":{}}}],["src/connectors.ts",{"_index":467,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"coverage.html":{}}}],["src/dnd",{"_index":35,"title":{},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/drag",{"_index":650,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"coverage.html":{}}}],["src/drop",{"_index":766,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"coverage.html":{}}}],["src/internal/connection",{"_index":70,"title":{},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/internal/createsourceconnector.ts",{"_index":229,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createsourcefactory.ts",{"_index":813,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createsourcemonitor.ts",{"_index":621,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/internal/createtargetconnector.ts",{"_index":829,"title":{},"body":{"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createtargetfactory.ts",{"_index":825,"title":{},"body":{"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createtargetmonitor.ts",{"_index":763,"title":{},"body":{"classes/DropTargetMonitorClass.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/internal/drag",{"_index":436,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["src/internal/invariant.ts",{"_index":919,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/reconnector.ts",{"_index":807,"title":{},"body":{"classes/Reconnector.html":{},"coverage.html":{}}}],["src/internal/register",{"_index":921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/layer",{"_index":445,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"coverage.html":{}}}],["src/monitor",{"_index":788,"title":{},"body":{"interfaces/MonitorBase.html":{},"coverage.html":{}}}],["src/source",{"_index":584,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"coverage.html":{}}}],["src/target",{"_index":751,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"coverage.html":{}}}],["src/tokens.ts",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/type",{"_index":800,"title":{},"body":{"interfaces/Offset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/arecollectsequal.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/areoptionsequal.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/shallowequal.ts",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/wrappers.ts",{"_index":1161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stage",{"_index":1685,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["stamping",{"_index":1058,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":464,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["standard",{"_index":13,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["start",{"_index":359,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["started",{"_index":375,"title":{"changelog.html":{},"index.html":{}},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{}}}],["starts",{"_index":495,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["state",{"_index":168,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["statements",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":240,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["statically",{"_index":1260,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["stationary",{"_index":1671,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["step",{"_index":1641,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["steps",{"_index":1213,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["still",{"_index":1541,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["store",{"_index":1305,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["strange",{"_index":1316,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["strategy",{"_index":1629,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["strictly",{"_index":759,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"index.html":{}}}],["string",{"_index":115,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/MonitorBase.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["strings",{"_index":1841,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["string|symbol",{"_index":1844,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["strong",{"_index":662,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["structure",{"_index":1340,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["struggle",{"_index":1119,"title":{},"body":{"index.html":{}}}],["style",{"_index":190,"title":{},"body":{"interfaces/ConnectionBase.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["styles",{"_index":1462,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["styling",{"_index":503,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["sub",{"_index":1001,"title":{},"body":{"index.html":{}}}],["subj",{"_index":148,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subj.next",{"_index":153,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subject",{"_index":150,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["subs",{"_index":1327,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["subscribe",{"_index":212,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscribe(callback",{"_index":161,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subscriber",{"_index":350,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["subscribers",{"_index":1576,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["subscribes",{"_index":1819,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["subscribing",{"_index":523,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscription",{"_index":9,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscription#add",{"_index":24,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["subscription.add",{"_index":125,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subscription.add(conn",{"_index":1325,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["subscriptionlike",{"_index":14,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{}}}],["subscriptions",{"_index":205,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["successful",{"_index":1633,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["such",{"_index":511,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["suffice",{"_index":332,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["sufficient",{"_index":701,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["sufficiently",{"_index":1283,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["superpowers",{"_index":1095,"title":{},"body":{"index.html":{}}}],["supplied",{"_index":405,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"miscellaneous/variables.html":{}}}],["supplies",{"_index":1817,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["supply",{"_index":1837,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["supplying",{"_index":1856,"title":{},"body":{"additional-documentation/testing.html":{}}}],["support",{"_index":520,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["supports",{"_index":267,"title":{},"body":{"injectables/DndService.html":{}}}],["sure",{"_index":368,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["switch",{"_index":1232,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["symbol",{"_index":116,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/MonitorBase.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["symbols",{"_index":1843,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["syntax",{"_index":1268,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["t",{"_index":749,"title":{},"body":{"directives/DropTargetDirective.html":{},"classes/Source.html":{},"classes/Target.html":{}}}],["table",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1477,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["take",{"_index":1024,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["target",{"_index":273,"title":{"classes/Target.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["target(s",{"_index":1897,"title":{},"body":{"additional-documentation/testing.html":{}}}],["target.ts",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["targetconnection",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetconnector",{"_index":828,"title":{"classes/TargetConnector.html":{}},"body":{"classes/TargetConnector.html":{},"coverage.html":{}}}],["targetconstructor",{"_index":832,"title":{"interfaces/TargetConstructor.html":{}},"body":{"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetid",{"_index":764,"title":{},"body":{"classes/DropTargetMonitorClass.html":{}}}],["targets",{"_index":315,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["taste",{"_index":1111,"title":{},"body":{"index.html":{}}}],["tconnector",{"_index":98,"title":{},"body":{"classes/Connection.html":{},"interfaces/Connector.html":{}}}],["tear",{"_index":1306,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["teardown",{"_index":95,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["teardownlogic",{"_index":22,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["technically",{"_index":724,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["tedious",{"_index":252,"title":{},"body":{"injectables/DndService.html":{}}}],["tell",{"_index":1667,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["template",{"_index":207,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"directives/DropTargetDirective.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["template's",{"_index":1829,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["template:example",{"_index":1730,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["templates",{"_index":1007,"title":{},"body":{"index.html":{}}}],["tempted",{"_index":691,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["ten",{"_index":1321,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["terms",{"_index":1824,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["test",{"_index":605,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/testing.html":{}}}],["testable",{"_index":1857,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbackend",{"_index":1870,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed",{"_index":1873,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.configuretestingmodule",{"_index":1882,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.createcomponent(mycomponent",{"_index":1886,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.get(drag_drop_manager",{"_index":1884,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testing",{"_index":548,"title":{"additional-documentation/testing.html":{}},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/testing.html":{}}}],["tests",{"_index":1864,"title":{},"body":{"additional-documentation/testing.html":{}}}],["text",{"_index":1374,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["that's",{"_index":528,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/quickstart.html":{}}}],["there's",{"_index":1122,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1810,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["thing",{"_index":1121,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["things",{"_index":1039,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["think",{"_index":1125,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["this.black",{"_index":1482,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.cat.id",{"_index":1308,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.collected$.pipe",{"_index":1737,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.collected$.pipe(map(c",{"_index":1733,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.currentposition",{"_index":1607,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.destroy",{"_index":275,"title":{},"body":{"injectables/DndService.html":{}}}],["this.destroy.add(xxx.subscribe",{"_index":259,"title":{},"body":{"injectables/DndService.html":{}}}],["this.destroy.unsubscribe",{"_index":276,"title":{},"body":{"injectables/DndService.html":{}}}],["this.dnd.dragsource",{"_index":665,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.dragsource(\"cat",{"_index":1307,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.dragsource('dragme",{"_index":1350,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["this.dnd.dragsource('paper",{"_index":1272,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.dnd.dragsource('test",{"_index":1901,"title":{},"body":{"additional-documentation/testing.html":{}}}],["this.dnd.dragsource(itemtypes.knight",{"_index":1662,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.dnd.dragsource(null",{"_index":559,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.dnd.droptarget",{"_index":274,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{}}}],["this.dnd.droptarget('cat",{"_index":1396,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["this.dnd.droptarget('dragme",{"_index":1357,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["this.dnd.droptarget('test",{"_index":1902,"title":{},"body":{"additional-documentation/testing.html":{}}}],["this.dnd.droptarget([\"cat",{"_index":1309,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.droptarget(itemtypes.knight",{"_index":1696,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.dragpreview.hook",{"_index":823,"title":{},"body":{"classes/SourceConnector.html":{}}}],["this.dragsource.hook",{"_index":822,"title":{},"body":{"classes/SourceConnector.html":{}}}],["this.droptarget.hook",{"_index":831,"title":{},"body":{"classes/TargetConnector.html":{}}}],["this.fireaction(monitor.getitem",{"_index":1783,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.game.canmoveknight(pos",{"_index":1618,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.canmoveknight(this.position",{"_index":1701,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.knightposition",{"_index":1580,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.moveknight(pos",{"_index":1599,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.moveknight(this.position",{"_index":1702,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.id",{"_index":666,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["this.itemsource.destroy",{"_index":1786,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.itemsource.listen(monitor",{"_index":1784,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.knightposition$.next(to",{"_index":1578,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightposition$.subscribe(kp",{"_index":1606,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.connectdragpreview(img",{"_index":1752,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.listen(monitor",{"_index":1674,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.unsubscribe",{"_index":1663,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.layer.unsubscribe",{"_index":1317,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.method",{"_index":1266,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.model.parentid.tostring",{"_index":566,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.notation",{"_index":1814,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.papercount",{"_index":1275,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.position",{"_index":1694,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.props",{"_index":1780,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.someproperty",{"_index":601,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/translating-react-code.html":{}}}],["this.source.connectdragpreview(img",{"_index":539,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.source.listen(m",{"_index":1420,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/testing.html":{}}}],["this.source.settype(t",{"_index":571,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.source.unsubscribe",{"_index":1311,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["this.subs",{"_index":1328,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.subs.add(myservice.subscribe",{"_index":1329,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.subs.unsubscribe",{"_index":1331,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.target.listen(m",{"_index":1400,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["this.target.listen(monitor",{"_index":193,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["this.target.settype(\"parent_",{"_index":565,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.target.settype(this.type",{"_index":562,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.target.unsubscribe",{"_index":1312,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["those",{"_index":171,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["though",{"_index":723,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["three",{"_index":1297,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["through",{"_index":178,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["throw",{"_index":1597,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tick",{"_index":498,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["tie",{"_index":323,"title":{},"body":{"injectables/DndService.html":{}}}],["time",{"_index":423,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["timely",{"_index":426,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["times",{"_index":305,"title":{},"body":{"injectables/DndService.html":{},"index.html":{}}}],["tiny",{"_index":1431,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tmonitor",{"_index":109,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{}}}],["to.x",{"_index":1611,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["to.y",{"_index":1613,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["token",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["told",{"_index":561,"title":{},"body":{"interfaces/DragSource.html":{}}}],["tons",{"_index":1033,"title":{},"body":{"index.html":{}}}],["tool",{"_index":1072,"title":{},"body":{"index.html":{}}}],["toolkit",{"_index":988,"title":{},"body":{"index.html":{}}}],["top",{"_index":491,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["touch",{"_index":1186,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["touchbackend",{"_index":65,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["touching",{"_index":1372,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["traditional",{"_index":1050,"title":{},"body":{"index.html":{}}}],["transit",{"_index":797,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["translate",{"_index":1030,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["translated",{"_index":480,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["translating",{"_index":1031,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["translation",{"_index":1434,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["transparent",{"_index":1677,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["trapped",{"_index":1562,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["trash",{"_index":1056,"title":{},"body":{"index.html":{}}}],["trello.com",{"_index":1068,"title":{},"body":{"index.html":{}}}],["trick",{"_index":1587,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["triple",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["troubleshooting",{"_index":1243,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["true",{"_index":449,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["truth",{"_index":1008,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["truthy",{"_index":1589,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["try",{"_index":693,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["trying",{"_index":1861,"title":{},"body":{"additional-documentation/testing.html":{}}}],["tslib",{"_index":868,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["tslint",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["turn",{"_index":1630,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["turning",{"_index":1493,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tutorial",{"_index":1000,"title":{"additional-documentation/chess-tutorial.html":{}},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["two",{"_index":653,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["type",{"_index":28,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["type(s",{"_index":1840,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["type(t",{"_index":570,"title":{},"body":{"interfaces/DragSource.html":{}}}],["type_dynamic",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1153,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":550,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["typeerror",{"_index":1244,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["typeortypearray",{"_index":92,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":146,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["types.ts",{"_index":121,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{}}}],["typescript",{"_index":657,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["typical",{"_index":1798,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["typically",{"_index":352,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["typing",{"_index":663,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["typo",{"_index":743,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["ui",{"_index":1369,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ultra",{"_index":1565,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["undefined",{"_index":93,"title":{},"body":{"classes/Connection.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"additional-documentation/quickstart.html":{}}}],["under",{"_index":377,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{}}}],["underlying",{"_index":1693,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["understand",{"_index":568,"title":{},"body":{"interfaces/DragSource.html":{}}}],["understandable",{"_index":1758,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["unicode",{"_index":1460,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["unidirectional",{"_index":1010,"title":{},"body":{"index.html":{}}}],["unique",{"_index":1359,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["unlike",{"_index":1573,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["unmounted",{"_index":713,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["unsubscribe",{"_index":81,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"classes/Reconnector.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["unsubscribed",{"_index":542,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["unsubscribefromoffsetchange",{"_index":440,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["unsubscribefromstatechange",{"_index":441,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["unsubscribing",{"_index":248,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["until",{"_index":156,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["unwanted",{"_index":1375,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["up",{"_index":264,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["update",{"_index":552,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["updated",{"_index":427,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["updates",{"_index":1410,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["url",{"_index":1749,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["urls",{"_index":1751,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["usable",{"_index":1427,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["usage",{"_index":1851,"title":{},"body":{"additional-documentation/testing.html":{}}}],["use",{"_index":64,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["used",{"_index":37,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["useful",{"_index":126,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["user",{"_index":647,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{}}}],["users",{"_index":1118,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["uses",{"_index":1070,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["using",{"_index":268,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["usually",{"_index":531,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["valid",{"_index":1714,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["value",{"_index":443,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["values",{"_index":1093,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["vanish",{"_index":1645,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["variable",{"_index":208,"title":{},"body":{"interfaces/ConnectionBase.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["variables",{"_index":1162,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variably",{"_index":1337,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["vector",{"_index":792,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["version",{"_index":11,"title":{},"body":{"interfaces/AddSubscription.html":{},"directives/DropTargetDirective.html":{},"changelog.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["vertical",{"_index":490,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["very",{"_index":594,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["via",{"_index":159,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["view",{"_index":1489,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["viewport",{"_index":791,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["visible",{"_index":1006,"title":{},"body":{"index.html":{}}}],["visual",{"_index":1082,"title":{},"body":{"index.html":{}}}],["visuals",{"_index":397,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["void",{"_index":31,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}}}],["voil",{"_index":1619,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["vs",{"_index":1280,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["vue",{"_index":1123,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1382,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["want",{"_index":202,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wanting",{"_index":1109,"title":{},"body":{"index.html":{}}}],["warned",{"_index":1107,"title":{},"body":{"index.html":{}}}],["watching",{"_index":1117,"title":{},"body":{"index.html":{}}}],["way",{"_index":1195,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ways",{"_index":1324,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["we'll",{"_index":1458,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["we're",{"_index":1319,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["wealth",{"_index":1130,"title":{},"body":{"index.html":{}}}],["web",{"_index":1755,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["weight",{"_index":1464,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["weird",{"_index":1638,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["well",{"_index":1187,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["what's",{"_index":1657,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whatever",{"_index":1476,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whether",{"_index":51,"title":{},"body":{"interfaces/BackendInput.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["white",{"_index":1443,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whole",{"_index":1343,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["width",{"_index":1503,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["wish",{"_index":554,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["withchangedetection",{"_index":814,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["withchangedetection(fn",{"_index":818,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["within",{"_index":1356,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["without",{"_index":137,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["won't",{"_index":522,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["work",{"_index":512,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["works",{"_index":1017,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["worth",{"_index":1436,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["wrap",{"_index":1523,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wrapper",{"_index":1691,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wrapper(dndservice",{"_index":145,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["wrappers",{"_index":128,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["wrapping",{"_index":1526,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["write",{"_index":569,"title":{},"body":{"interfaces/DragSource.html":{}}}],["writing",{"_index":127,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["written",{"_index":1034,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["x",{"_index":804,"title":{},"body":{"interfaces/Offset.html":{},"additional-documentation/chess-tutorial.html":{}}}],["x,y",{"_index":790,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["xy",{"_index":803,"title":{},"body":{"interfaces/Offset.html":{}}}],["xy(i",{"_index":1551,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["y",{"_index":805,"title":{},"body":{"interfaces/Offset.html":{},"additional-documentation/chess-tutorial.html":{}}}],["yarn",{"_index":997,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["yellow",{"_index":1742,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["yes",{"_index":289,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTargetMonitor.html":{}}}],["you'd",{"_index":1658,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["you'll",{"_index":1509,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["you're",{"_index":346,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["you've",{"_index":1678,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["yourself",{"_index":347,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["zebra",{"_index":1310,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["zindex",{"_index":1743,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["zone",{"_index":90,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/Source.html":{},"classes/Target.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["zone.js",{"_index":952,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AddSubscription.html":{"url":"interfaces/AddSubscription.html","title":"interface - AddSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AddSubscription\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connector.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an RxJS Subscription, with multi-version compatibility.\nThe standard SubscriptionLike does not contain an add() method.\n\n            \n\n            \n                Extends\n            \n            \n                        SubscriptionLike\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardownLogic: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n                        Same as RxJS Subscription#add\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardownLogic\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BackendInput.html":{"url":"interfaces/BackendInput.html","title":"interface - BackendInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BackendInput\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-module.ts\n        \n\n\n            \n                Description\n            \n            \n                Used for providing backends to DndModule.\nYou can configure your backend with options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backend\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            debug\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backend:     BackendFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BackendFactory\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A plain backend, for example the HTML5Backend.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether dnd-core should enable debugging, which lets you see dnd-core actions\nin the Redux extension for Chrome.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any configuration your backend accepts. Use this with the TouchBackend or the MultiBackend,\nfor example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Connection.html":{"url":"classes/Connection.html","title":"class - Connection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Connection\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                connect\n                            \n                            \n                                connectDragPreview\n                            \n                            \n                                connectDragSource\n                            \n                            \n                                connectDropTarget\n                            \n                            \n                                getHandlerId\n                            \n                            \n                                listen\n                            \n                            \n                                receiveType\n                            \n                            \n                                setType\n                            \n                            \n                                setTypes\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(factoryArgs: FactoryArgs, manager: DragDropManager, dndZone: Zone, initialType: TypeOrTypeArray | undefined)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        factoryArgs\n                                                  \n                                                        \n                                                                    FactoryArgs\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    DragDropManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dndZone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialType\n                                                  \n                                                        \n                                                                        TypeOrTypeArray | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardown\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect(fn: (connector: TConnector) => void)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragPreview\n                        \n                    \n                \n            \n            \n                \nconnectDragPreview(node: Node, options: DragPreviewOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragPreviewOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragSource\n                        \n                    \n                \n            \n            \n                \nconnectDragSource(node: Node, options: DragSourceOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragSourceOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDropTarget\n                        \n                    \n                \n            \n            \n                \nconnectDropTarget(node: Node)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapFn: (monitor: TMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveType\n                        \n                    \n                \n            \n            \n                \nreceiveType(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            TypeOrTypeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: string | symbol)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        string | symbol\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTypes\n                        \n                    \n                \n            \n            \n                \nsetTypes(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            TypeOrTypeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        closed\n                    \n                \n\n                \n                    \n                        getclosed()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConnectionBase.html":{"url":"interfaces/ConnectionBase.html","title":"interface - ConnectionBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConnectionBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                A base type to represent a DOM connection.\n\n            \n\n            \n                Extends\n            \n            \n                        SubscriptionLike\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                                \n                                    \n                                        unsubscribe\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n                        Same as RxJS Subscription.add().\nUseful, for example, for writing wrappers for the DndService methods,\nwhich might internally listen()/subscribe to DropTargetSpec and provide\na convenient callback after you hover without dropping or exiting for a specified\nduration. That would require the following pattern:\nExample :function wrapper(dndService, types, spec, callback) {\n  let subj = new Subject();\n  let dt = dndService.dropTarget(types, {\n      ...spec,\n      hover: monitor => {\n      subj.next();\n      spec.hover?.(monitor);\n    }\n  });\n  // runs the callback until the returned connection\n  // is destroyed via unsubscribe()\n  dt.add(subj.pipe( ... ).subscribe(callback))\n  return dt;\n}\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardown\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapTo: (monitor: TMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n                        A connection maintains a subscription to dnd-core's drag state\nchanges. This function is how you are notified of those changes.\nThis function is essentially RxJS Observable.map with one small\noptimization: it runs the output of\nthe function you provide through distinctUntilChanged, and checks\nreference equality (===) for scalars and shallowEqual for Objects.\nBecause of #2, you can happily emulate react-dnd-style code like:\nExample :collected$ = this.target.listen(monitor => ({\n  isDragging: monitor.isDragging(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop()\n}));... in which case you probably want to use the *ngIf as pattern for\n grouping subscriptions into one bound template variable:\nExample :\n  {{c.isDragging ? 'dragging': null}}\n  ...\nYou can also subscribe one-by-one, with isDragging$ = listen(m => m.isDragging()).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapTo\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n                        This method MUST be called, however you choose to, when ngOnDestroy() fires.\nIf you don't, you will leave subscriptions hanging around that will fire\ncallbacks on components that no longer exist.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Connector.html":{"url":"interfaces/Connector.html","title":"interface - Connector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Connector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceConnector.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hooks\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        receiveHandlerId\n                                    \n                                \n                                \n                                    \n                                        reconnect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                handlerId\n                                            \n                                                        Identifier | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reconnect\n                        \n                    \n                \n            \n            \n                \nreconnect()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hooks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hooks:         TConnector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TConnector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DndModule.html":{"url":"modules/DndModule.html","title":"module - DndModule","body":"\n                   \n\n\n\n\n    Modules\n    DndModule\n\n\n\n\n    \n        Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dnd-module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            EXPORTS\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EXPORTS\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(backendInput: BackendInput)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backendInput\n                                            \n                                                            BackendInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DndService.html":{"url":"injectables/DndService.html","title":"injectable - DndService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DndService\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connector.ts\n        \n\n\n            \n                Description\n            \n            \n                For a simple component, unsubscribing is as easy as connection.unsubscribe() in ngOnDestroy()\nIf your components have lots of subscriptions, it can get tedious having to\nunsubscribe from all of them, and you might forget. A common pattern is to create an RxJS Subscription\n(maybe called destroy), to use this.destroy.add(xxx.subscribe(...))\nand to call destroy.unsubscribe() once to clean up all of them. @ng-dnd/core\nsupports this pattern with by using the subscription parameter on the\nconstructors. Simply:\nExample :import { Subscription } from 'rxjs';\n// ...\ndestroy = new Subscription();\ntarget = this.dnd.dropTarget({\n  // ...\n}, this.destroy);\nngOnDestroy() { this.destroy.unsubscribe(); }It is a good habit for avoiding leaked subscriptions, because .\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dragLayer\n                            \n                            \n                                    Public\n                                dragSource\n                            \n                            \n                                    Public\n                                dropTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dragLayer\n                        \n                    \n                \n            \n            \n                \n                        \n                    dragLayer(subscription?: AddSubscription)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    Item\n                            \n                        \n                    \n\n            \n                \n                        This method creates a DragLayer object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subscription\n                                            \n                                                            AddSubscription\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DragLayer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dragSource\n                        \n                    \n                \n            \n            \n                \n                        \n                    dragSource(type: string | symbol | null, spec: DragSourceSpec, subscription?: AddSubscription)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    Item\n                                    DropResult\n                            \n                        \n                    \n\n            \n                \n                        This method creates a DragSource object. It represents a drag\nsource and its behaviour, and can be connected to a DOM element by\nassigning it to the [dragSource] directive on that element in your\ntemplate.\nIt is the corollary of react-dnd's\nDragSource.\nThe spec argument (DragSourceSpec) is a set of queries and\ncallbacks that are called at appropriate times by the internals. The\nqueries are for asking your component whether to drag/listen and what\nitem data to hoist up; the callback (just 1) is for notifying you when\nthe drag ends.\nOnly the drop targets registered for the same type will\nreact to the items produced by this drag source. If you want a dynamic\ntype, pass null as the type; and call DragSource in\na lifecycle hook.\nconnection to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        string | symbol | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                spec\n                                            \n                                                            DragSourceSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                subscription\n                                            \n                                                            AddSubscription\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    An RxJS Subscription to tie the lifetime of the\nconnection to.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DragSource\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dropTarget\n                        \n                    \n                \n            \n            \n                \n                        \n                    dropTarget(types: TypeOrTypeArray | null, spec: DropTargetSpec, subscription?: AddSubscription)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    Item\n                                    DropResult\n                            \n                        \n                    \n\n            \n                \n                        This drop target will only react to the items produced by the drag sources\nof the specified type or types.\nIf you want a dynamic type, pass null as the type; and call\nDropTarget in a lifecycle hook.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                types\n                                            \n                                                            TypeOrTypeArray | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                spec\n                                            \n                                                            DropTargetSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subscription\n                                            \n                                                            AddSubscription\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DropTarget\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragLayer.html":{"url":"interfaces/DragLayer.html","title":"interface - DragLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragLayer\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                For many use cases, the default rendering of the HTML5 backend should suffice.\nHowever, its drag preview has certain limitations. For example, it has to be an\nexisting node screenshot or an image, and it cannot change midflight.\nSometimes you might want to perform the custom rendering. This also becomes\nnecessary if you're using a custom backend. DragLayer lets you perform the\nrendering of the drag preview yourself.\nA drag layer is a special subscriber to the global drag state. It is called\na 'layer', not just a subscriber, because it is typically used to render custom\nelements that follow the mouse, above all other elements. The data flows like\nso:\nExample :drag start => global state => drag source => no preview\n                           => drag layer  => preview rendered on the spot\ndrag moved => global state => drag layer  => preview moves\ndrag ends  => global state => drag layer  => preview erasedTo use a drag layer as designed:\n\nCreate a drag layer: DndService.dragLayer. Make sure to unsubscribe from\nit in ngOnDestroy().\n\nListen to global drag state changes with DragLayer.listen. These are all available on DragLayerMonitor:\nwhether something is being dragged, what type it is, where the drag started, where the dragged element is now.\n\nIf dragging, render a custom preview under the current mouse position,\ndepending on the item type, in a position: fixed 'layer'. You may like to\nuse an *ngSwitch on the type, rather than one drag layer per type, simply\nto reduce code duplication.\n\n\nYou can see an example of a drag layer over on the Examples page.\nOne piece of advice for using drag layers effectively is to separate 'smart' and\n'dumb' components. If you have one component purely for visuals, which does all\ninput through @Input() and all interactivity through @Output() events, then\nyou can reuse it to display a drag preview based on either data in the item from\nDragSourceSpec.beginDrag, or supplied by a 'smart' component which pulls\ndata from somewhere else using only an id. This practice is even more\nimportant if you are using, or planning on using, anything other than the HTML5\nbackend, because no other backend provides automatic previews. In those cases\nyou must handle every draggable type in a drag layer to have any previews at\nall.\nOr, you could just use @ng-dnd/multi-backend.\n\n            \n\n            \n                Extends\n            \n            \n                            ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        listen\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapTo: (monitor: DragLayerMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n                        For listen functions in general, see ConnectionBase.\nThis listen function is called any time the global drag state\nchanges, including the coordinate changes, so that your component can\nprovide a timely updated custom drag preview. You can ask the monitor for\nthe client coordinates of the dragged item. Read the DragLayerMonitor\ndocs to see all the different possibile coordinates you might subscribe to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapTo\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DragLayerConnectionClass.html":{"url":"classes/DragLayerConnectionClass.html","title":"class - DragLayerConnectionClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DragLayerConnectionClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/drag-layer-connection.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragLayer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTicking\n                            \n                            \n                                unsubscribeFromOffsetChange\n                            \n                            \n                                unsubscribeFromStateChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                listen\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: DragDropManager, zone: Zone)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    DragDropManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTicking\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribeFromOffsetChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribeFromStateChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                teardown\n                                            \n                                                        TeardownLogic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapFn: (monitor: DragLayerMonitor) => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mapFn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        closed\n                    \n                \n\n                \n                    \n                        getclosed()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragLayerMonitor.html":{"url":"interfaces/DragLayerMonitor.html","title":"interface - DragLayerMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragLayerMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available inside DragLayer.\n\n            \n\n            \n                Extends\n            \n            \n                            MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n                        true if there is a drag operation in progress, false otherwise.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragPreviewDirective.html":{"url":"directives/DragPreviewDirective.html","title":"directive - DragPreviewDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragPreviewDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-directives.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to specify which element a DragSource should screenshot\nas an HTML5 drag preview.\nOnly relevant when using the HTML5 backend.\n\n            \n\n            \n                Extends\n            \n            \n                        AbstractDndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragPreview]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragPreview\n                            \n                            \n                                dragPreviewOptions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragPreview\n                    \n                \n                \n                    \n                        Type :         DragSource\n\n                    \n                \n                \n                    \n                        The drag source for which this element will be the preview.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPreviewOptions\n                    \n                \n                \n                    \n                        Type :         DragPreviewOptions\n\n                    \n                \n                \n                    \n                        Pass an options object as you would to DragSource.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPreviewOptions.html":{"url":"interfaces/DragPreviewOptions.html","title":"interface - DragPreviewOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragPreviewOptions\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide options for how to render a drag preview. See DragSource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            anchorX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            anchorY\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            captureDraggingState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offsetX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offsetY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        anchorX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchorX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A number between 0 and 1. By default, 0.5. Specifies how the\noffset relative to the drag source node is translated into the the\nhorizontal offset of the drag preview when their sizes don't match.\n0 means \"dock the preview to the left\", 0.5 means \"interpolate linearly\"\nand 1 means \"dock the preview to the right\".\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        anchorY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchorY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A number between 0 and 1. By default, 0.5. Specifies how the\noffset relative to the drag source node is translated into the the\nvertical offset of the drag preview when their sizes don't match. 0 means\n\"dock the preview to the top, 0.5 means \"interpolate linearly\" and\n1 means \"dock the preview to the bottom.\"\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        captureDraggingState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        captureDraggingState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, false. If true, the component will learn that it is being\ndragged immediately as the drag starts instead of the next tick. This\nmeans that the screenshotting would occur with monitor.isDragging()\nalready being true, and if you apply any styling like a decreased opacity\nto the dragged element, this styling will also be reflected on the\nscreenshot. This is rarely desirable, so false is a sensible default.\nHowever, you might want to set it to true in rare cases, such as if you\nwant to make the custom drag layers work in IE and you need to hide the\noriginal element without resorting to an empty drag preview which IE\ndoesn't support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offsetX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offsetX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, null. Specifies the vertical offset between the cursor and\nthe drag preview element. If offsetX has a value, anchorX won't be\nused.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offsetY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offsetY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, null. Specifies the vertical offset between the cursor and\nthe drag preview element. If offsetY has a value, anchorY won't be\nused.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSource.html":{"url":"interfaces/DragSource.html","title":"interface - DragSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSource\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Like DropTarget, it can be used just for subscribing to\ndrag state information related to a particular item type or list of types.\nYou do not have to connect it to a DOM element if that's all you want.\nTo create one, refer to DndService.\n\n            \n\n            \n                Extends\n            \n            \n                            ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connectDragPreview\n                                    \n                                \n                                \n                                    \n                                        connectDragSource\n                                    \n                                \n                                \n                                    \n                                        getHandlerId\n                                    \n                                \n                                \n                                    \n                                        setType\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragPreview\n                        \n                    \n                \n            \n            \n                \nconnectDragPreview(elementOrNode: Node, options?: DragPreviewOptions)\n                \n            \n\n\n\n\n            \n                \n                        This function allows you to connect a DOM node to your DragSource as a preview.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nYou might use an ElementRef.nativeElement, or even an\nImage.\nExample :const img = new Image();\nimg.onload = this.source.connectDragPreview(img);\nimg.src = '...';The subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DragSource already has a type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementOrNode\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragPreviewOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subscription\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragSource\n                        \n                    \n                \n            \n            \n                \nconnectDragSource(elementOrNode: Node, options?: DragSourceOptions)\n                \n            \n\n\n\n\n            \n                \n                        This function allows you to connect a DOM node to your DragSource.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nThe subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DragSource already has a type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementOrNode\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            DragSourceOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subscription\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n                        Returns the drag source ID that can be used to simulate the drag and drop events\nwith the testing backend.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: string | symbol)\n                \n            \n\n\n\n\n            \n                \n                        Use this method to have a dynamically typed source. If no type has\npreviously been set, it creates the subscription and allows the\n[dragSource] DOM element to be connected. If you do not need to\ndynamically update the type, you can set it once via the\nDragSourceSpec property.\nIf you wish to have a dynamic type based on an @Input() property, for\nexample, you must call setType() in either of your component's\nngOnInit or ngOnChanges methods:\nExample :@Input() type: string;\n@Input() model: { parentId: number; name: string; };\ntarget = this.dnd.dragSource(null, {\n  // ...\n});\nngOnChanges() {\n  // use what your parent component told you to\n  this.target.setType(this.type);\n  // or create groupings on the fly\n  this.target.setType(\"PARENT_\" + this.model.parentId.toString());\n}It may be more convenient or easier to understand if you write:\nExample :@Input() set type(t) {\n  this.source.setType(t);\n}\nsource = this.dnd.dragSource(null, {\n  beginDrag: () => ({ ... })\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        string | symbol\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragSourceDirective.html":{"url":"directives/DragSourceDirective.html","title":"directive - DragSourceDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragSourceDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-directives.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to connect a DragSource to an element in a component template.\n\n            \n\n            \n                Extends\n            \n            \n                        AbstractDndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragSource]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragSource\n                            \n                            \n                                dragSourceOptions\n                            \n                            \n                                dragSourceType\n                            \n                            \n                                noHTML5Preview\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragSource\n                    \n                \n                \n                    \n                        Type :         DragSource\n\n                    \n                \n                \n                    \n                        Which source to connect the DOM to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSourceOptions\n                    \n                \n                \n                    \n                        Type :         DragSourceOptions\n\n                    \n                \n                \n                    \n                        Pass an options object as you would to DragSource.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSourceType\n                    \n                \n                \n                    \n                        Type :     string | symbol\n\n                    \n                \n                \n                    \n                        Shortcut for setting a type on the connection.\nLets you use Angular binding to do it. Runs DragSource.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        noHTML5Preview\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Do not render an HTML5 preview. Only applies when using the HTML5 backend.\nIt does not use { captureDraggingState: true } for IE11 support; that is broken.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceMonitor.html":{"url":"interfaces/DragSourceMonitor.html","title":"interface - DragSourceMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available in DragSource's listen method.\n\n            \n\n            \n                Extends\n            \n            \n                            MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        canDrag\n                                    \n                                \n                                \n                                    \n                                        didDrop\n                                    \n                                \n                                \n                                    \n                                        getDropResult\n                                    \n                                \n                                \n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if NO drag operation is in progress, and the owner's\ncanDrag() returns true or is not defined.\nNote that canDrag doesn't blindly return what you supplied in\nDragSourceSpec, so it isn't very useful as a general\nsource-is-enabled/disabled flag.\nInstead, keep your canDrag logic simple, and replicate it in your template.\nExample : content Example :{\n  canDrag: () => this.someProperty\n}\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if some drop target handled the drop event; false\notherwise. Even if a target did not return a drop result, didDrop()\nreturns true. Use it inside endDrag() to test whether any drop target\nhas handled the drop. Returns false if called outside endDrag().\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n                        Returns a plain object representing the last recorded drop result. The\ndrop targets may optionally specify it by returning an object from their\ndrop() methods. When a chain of drop() is dispatched for the nested\ntargets, bottom up, any parent that explicitly returns its own result from\ndrop() overrides the child drop result previously set by the child.\nReturns null if called outside endDrag().\n\n\n                        \n                            Returns :     DropResult\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if a drag operation is in progress, and either the owner\ninitiated the drag, or its isDragging() is defined and returns true.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DragSourceMonitorClass.html":{"url":"classes/DragSourceMonitorClass.html","title":"class - DragSourceMonitorClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DragSourceMonitorClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceMonitor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragSourceMonitor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                internalMonitor\n                            \n                            \n                                sourceId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrag\n                            \n                            \n                                didDrop\n                            \n                            \n                                getClientOffset\n                            \n                            \n                                getDifferenceFromInitialOffset\n                            \n                            \n                                getDropResult\n                            \n                            \n                                getInitialClientOffset\n                            \n                            \n                                getInitialSourceClientOffset\n                            \n                            \n                                getItem\n                            \n                            \n                                getItemType\n                            \n                            \n                                getSourceClientOffset\n                            \n                            \n                                isDragging\n                            \n                            \n                                receiveHandlerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: any)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        internalMonitor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragDropMonitor\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Identifier | undefined\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(sourceId: Identifier | undefined)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceId\n                                            \n                                                        Identifier | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceOptions.html":{"url":"interfaces/DragSourceOptions.html","title":"interface - DragSourceOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceOptions\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide customisations for how a backend should handle a DragSource and\ndisplay items dragged from it. See DragSource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dropEffect\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropEffect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dropEffect:     \"copy\" | \"move\" | \"link\" | \"none\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"copy\" | \"move\" | \"link\" | \"none\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A string. By default, 'move'. In the browsers that support this\nfeature, specifying 'copy' shows a special \"copying\" cursor, while 'move'\ncorresponds to the \"move\" cursor. You might want to use this option to\nprovide a hint to the user about whether an action is destructive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceSpec.html":{"url":"interfaces/DragSourceSpec.html","title":"interface - DragSourceSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceSpec\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/drag-source-specification.ts\n        \n\n\n            \n                Description\n            \n            \n                The spec passed to DndService.\nNote the two type parameters. Both must represent plain JS objects.\nItem is the type you return from beginDrag(), and available in monitor.getItem().\nLimitations in TypeScript may prevent inferring this in many circumstances,\nand it will default to {}. It is best if you are strong-typing to pass a\ntype parameter like so:\nExample :interface MyDraggedItemType { id: number; }\n// ...\nsource = this.dnd.dragSource(..., {\n    beginDrag: monitor => ({ id: this.id })\n})DropResult is the type you expect a drop target to return from drop().\nIt is the type of the object returned by monitor.getDropResult() during endDrag().\nNote that your backend may assign some extra properties. You should define a\nDropResult type that recognises these, such as:\nExample :interface HTML5DropResult { dropEffect: string; }\ninterface MyDropResult extends HTML5DropResult { id: number; }\ntarget = this.dnd.dropTarget(..., {\n    drop: monitor => ({ id: this.id })\n});\n\nsource = this.dnd.dragSource(..., {\n    endDrag: monitor => {\n        const result = monitor.getDropResult();\n        if (result.dropEffect === 'copy') {\n            // user had alt key pressed + the GreenPlus icon when they dropped,\n            // so copy instead of move\n        }\n    }\n});\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        beginDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        canDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        endDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beginDrag\n                        \n                    \n                \n            \n            \n                \nbeginDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Required. When the dragging starts, beginDrag is called. You must return\na plain JavaScript object describing the data being dragged. What you\nreturn is the only information available to the drop targets about the\ndrag source so it's important to pick the minimal data they need to know.\nYou may be tempted to put a reference to the component into it, but you\nshould try very hard to avoid doing this because it couples the drag\nsources and drop targets. It's a good idea to return something like { id: this.id } from this method.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Item\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Optional. Queries your component to determine whether this source can be\ndragged. Default returns true; this is often sufficient.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        endDrag\n                        \n                    \n                \n            \n            \n                \nendDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Optional. Notifies your component when dragging ends.\nThis is a good place to fire actions or modify a component. You will often\nwant to check DragSourceMonitor and DragSourceMonitor for more\ndetails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                        By default, only the drag source that initiated the drag operation is\n considered to be dragging. You might override this by matching on the\n DragSourceMonitor.id and your component's id, or similar. Do this if the\n original component may be unmounted during the dragging and later\n \"resurrected\" with a different parent. For example, when moving a card\n across the lists in a Kanban board, you want it to retain the dragged\n appearance—even though technically, the component gets unmounted and\n a different one gets mounted every time you hover over another list.\n Note: You may not call DragSourceMonitor inside this method.\nNOTE: runs outside Angular change detection. This is for performance\nreasons. You shouldn't be making changes to your component here anyway. If\nyou do change your component inside this callback, it may not appear\nimmediately, and if you use NgZone.run() then you may experience\nperformance degradation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DragSourceMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTarget.html":{"url":"interfaces/DropTarget.html","title":"interface - DropTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTarget\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents one drop target and its behaviour, that can listen to the state\nand connect to a DOM element.\nTo create one, refer to DndService.\n\n            \n\n            \n                Extends\n            \n            \n                            ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connectDropTarget\n                                    \n                                \n                                \n                                    \n                                        getHandlerId\n                                    \n                                \n                                \n                                    \n                                        setTypes\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connectDropTarget\n                        \n                    \n                \n            \n            \n                \nconnectDropTarget(elementOrNode: Node)\n                \n            \n\n\n\n\n            \n                \n                        This function allows you to connect a DOM node to your DropTarget.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nThe subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DropTarget already has a type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementOrNode\n                                            \n                                                        Node\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Subscription\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n                        Returns the drop target ID that can be used to simulate the drag and drop events\nwith the testing backend.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTypes\n                        \n                    \n                \n            \n            \n                \nsetTypes(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n                        Use this method to have a dynamically typed target. If no type has\npreviously been set, it creates the subscription and allows the\n[dragSource] DOM element to be connected. If you do not need to\ndynamically update the type, you can set it once via the\nDropTargetSpec property.\nSee DragSource for an example of how to set\na dynamic type, for it is very similar here.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            TypeOrTypeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DropTargetDirective.html":{"url":"directives/DropTargetDirective.html","title":"directive - DropTargetDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DropTargetDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd-directives.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to connect a DropTarget to an element in a component template.\n\n            \n\n            \n                Extends\n            \n            \n                        AbstractDndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dropTarget]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dropTarget\n                            \n                            \n                                dropTargetType\n                            \n                            \n                                dropTargetTypes\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    dropTargetType\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dropTarget\n                    \n                \n                \n                    \n                        Type :         DropTarget\n\n                    \n                \n                \n                    \n                        Which target to connect the DOM to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropTargetType\n                    \n                \n                \n                    \n                        Type :         TypeOrTypeArray\n\n                    \n                \n                \n                    \n                        Reduce typo confusion by allowing non-plural version of dropTargetTypes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropTargetTypes\n                    \n                \n                \n                    \n                        Type :         TypeOrTypeArray\n\n                    \n                \n                \n                    \n                        Shortcut for setting a type on the connection.\nLets you use Angular binding to do it. Runs DropTarget.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        dropTargetType\n                    \n                \n\n\n                \n                    \n                        setdropTargetType(t: TypeOrTypeArray)\n                    \n                \n                    \n                        \n                                Reduce typo confusion by allowing non-plural version of dropTargetTypes\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            t\n                                                    \n                                                            \n                                                                            TypeOrTypeArray\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTargetMonitor.html":{"url":"interfaces/DropTargetMonitor.html","title":"interface - DropTargetMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTargetMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/target-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available in DropTarget's listen method.\n\n            \n\n            \n                Extends\n            \n            \n                            MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        canDrop\n                                    \n                                \n                                \n                                    \n                                        didDrop\n                                    \n                                \n                                \n                                    \n                                        getDropResult\n                                    \n                                \n                                \n                                    \n                                        isOver\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if there is a drag operation in progress, and the owner's\ncanDrop() returns true or is not defined.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n                        Returns true if some drop target has handled the drop event, false\notherwise. Even if a target did not return a drop result, didDrop()\nreturns true. Use it inside drop() to test whether any nested drop\ntarget has already handled the drop. Returns false if called outside\ndrop().\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n                        Returns a plain object representing the last recorded drop result. The\ndrop targets may optionally specify it by returning an object from their\ndrop() methods. When a chain of drop() is dispatched for the nested\ntargets, bottom up, any parent that explicitly returns its own result\nfrom drop() overrides the drop result previously set by the child.\nReturns null if called outside drop().\n\n\n                        \n                            Returns :     DropResult\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOver\n                        \n                    \n                \n            \n            \n                \nisOver(options?: literal type)\n                \n            \n\n\n\n\n            \n                \n                        Returns true if there is a drag operation in progress, and the pointer\nis currently hovering over the owner. You may optionally pass\n{ shallow: true } to strictly check whether only the owner is being\nhovered, as opposed to a nested target.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DropTargetMonitorClass.html":{"url":"classes/DropTargetMonitorClass.html","title":"class - DropTargetMonitorClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DropTargetMonitorClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetMonitor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DropTargetMonitor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                internalMonitor\n                            \n                            \n                                targetId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrop\n                            \n                            \n                                didDrop\n                            \n                            \n                                getClientOffset\n                            \n                            \n                                getDifferenceFromInitialOffset\n                            \n                            \n                                getDropResult\n                            \n                            \n                                getInitialClientOffset\n                            \n                            \n                                getInitialSourceClientOffset\n                            \n                            \n                                getItem\n                            \n                            \n                                getItemType\n                            \n                            \n                                getSourceClientOffset\n                            \n                            \n                                isOver\n                            \n                            \n                                receiveHandlerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: any)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        internalMonitor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragDropMonitor\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Identifier | undefined\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOver\n                        \n                    \n                \n            \n            \n                \nisOver(options: object)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    { shallow: false }\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(targetId: Identifier | undefined)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                        Identifier | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTargetSpec.html":{"url":"interfaces/DropTargetSpec.html","title":"interface - DropTargetSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTargetSpec\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/drop-target-specification.ts\n        \n\n\n            \n                Description\n            \n            \n                The spec passed to DndService.\nNote the two type parameters. Both must represent plain JS objects. See the extended\ndiscussion of these type parameters at DragSourceSpec.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        canDrop\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        drop\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        hover\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Queries your component to determine whether an item can be dropped on this target.\nNOTE: runs outside Angular change detection. This is for performance\nreasons. You shouldn't be making changes to your component here anyway. If\nyou do change your component inside this callback, it may not appear\nimmediately, and if you use NgZone.run() then you may experience\nperformance degradation.\nDefault, when not specified, is true.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DropTargetMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        drop\n                        \n                    \n                \n            \n            \n                \ndrop(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Called when a compatible item is dropped on the target. You may either\nreturn nothing, or a plain object.\nIf you return an object, it is going to become the drop result and will be\navailable to the drag source in its DragSourceSpec method as\nDropTargetMonitor. This is useful in case you want the\nsource to perform different actions depending on which target received the\ndrop. Otherwise, it is simpler to handle the dropped item here.\nIf you have nested drop targets, you can test whether a nested target has\nalready handled drop by checking DropTargetMonitor. Both this\nmethod and the source's endDrag() method are good places to fire\n@ngrx/store actions.\nThis method will not be called if canDrop() is defined and returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DropTargetMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     DropResult | void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        hover\n                        \n                    \n                \n            \n            \n                \nhover(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                        Called frequently while the mouse hovers over the owner drop target while\ndragging a relevant item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            DropTargetMonitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactoryArgs.html":{"url":"interfaces/FactoryArgs.html","title":"interface - FactoryArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactoryArgs\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createConnector\n                                        \n                                \n                                \n                                        \n                                            createHandler\n                                        \n                                \n                                \n                                        \n                                            createMonitor\n                                        \n                                \n                                \n                                        \n                                            registerHandler\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createConnector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createConnector:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createMonitor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createMonitor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        registerHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        registerHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MonitorBase.html":{"url":"interfaces/MonitorBase.html","title":"interface - MonitorBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MonitorBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/monitor-base.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods common to all monitor classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getClientOffset\n                                    \n                                \n                                \n                                    \n                                        getDifferenceFromInitialOffset\n                                    \n                                \n                                \n                                    \n                                        getInitialClientOffset\n                                    \n                                \n                                \n                                    \n                                        getInitialSourceClientOffset\n                                    \n                                \n                                \n                                    \n                                        getItem\n                                    \n                                \n                                \n                                    \n                                        getItemType\n                                    \n                                \n                                \n                                    \n                                        getSourceClientOffset\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        The current mouse x,y position relative to the viewport. Returns null\nif no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n                        A vector x,y of the displacement of the dragged item from its initial\nposition. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        The initial mouse x,y position relative to the viewport, when the current\ndrag operation started. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        x,y relative to viewport of the item's DOM element before it was dragged.\nReturns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n                        The item in transit, if any. This is what you returned from\nDragSourceSpec. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :     Item | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n                        The type of the item in transit. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :     string | symbol | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n                        The projected x,y position relative to viewport of the root DOM element of the drag source\n= its initial position + displacement. Returns null if no item is being dragged.\n\n\n                        \n                            Returns :         Offset | null\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Offset.html":{"url":"interfaces/Offset.html","title":"interface - Offset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Offset\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/type-ish.ts\n        \n\n\n            \n                Description\n            \n            \n                Just a plain, reusable xy coordinate type.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    x coordinate\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    y coordinate\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reconnector.html":{"url":"classes/Reconnector.html","title":"class - Reconnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reconnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/Reconnector.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                disconnect\n                            \n                            \n                                handlerId\n                            \n                            \n                                hook\n                            \n                            \n                                    Optional\n                                node\n                            \n                            \n                                    Optional\n                                options\n                            \n                            \n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backendConnector: (handlerId: any,node: Node,options: O) => void)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backendConnector\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        disconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe | null\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hook\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Node\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     O\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reconnect\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceFactory.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragSource\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beginDrag\n                            \n                            \n                                canDrag\n                            \n                            \n                                endDrag\n                            \n                            \n                                isDragging\n                            \n                            \n                                withChangeDetection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spec: DragSourceSpec, zone: Zone, monitor: DragSourceMonitor)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spec\n                                                  \n                                                        \n                                                                        DragSourceSpec\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        monitor\n                                                  \n                                                        \n                                                                        DragSourceMonitor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beginDrag\n                        \n                    \n                \n            \n            \n                \nbeginDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDrag\n                        \n                    \n                \n            \n            \n                \nendDrag()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging(globalMonitor: any, sourceId: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                globalMonitor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sourceId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        withChangeDetection\n                        \n                    \n                \n            \n            \n                \nwithChangeDetection(fn: () => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceConnector.html":{"url":"classes/SourceConnector.html","title":"class - SourceConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceConnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceConnector.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Connector\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hooks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                receiveHandlerId\n                            \n                            \n                                    Public\n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backend: Backend)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backend\n                                                  \n                                                        \n                                                                    Backend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragSourceConnector\n\n                    \n                \n                \n                    \n                        Default value : {\n    dragSource: this.dragSource.hook,\n    dragPreview: this.dragPreview.hook,\n  }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    receiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                handlerId\n                                            \n                                                        Identifier | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    reconnect()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SourceConstructor.html":{"url":"interfaces/SourceConstructor.html","title":"interface - SourceConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SourceConstructor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Target.html":{"url":"classes/Target.html","title":"class - Target","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Target\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetFactory.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DropTarget\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrop\n                            \n                            \n                                drop\n                            \n                            \n                                hover\n                            \n                            \n                                receiveMonitor\n                            \n                            \n                                withChangeDetection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spec: DropTargetSpec, zone: Zone, monitor: DropTargetMonitor)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spec\n                                                  \n                                                        \n                                                                        DropTargetSpec\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        monitor\n                                                  \n                                                        \n                                                                        DropTargetMonitor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drop\n                        \n                    \n                \n            \n            \n                \ndrop()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hover\n                        \n                    \n                \n            \n            \n                \nhover()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveMonitor\n                        \n                    \n                \n            \n            \n                \nreceiveMonitor(monitor: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                monitor\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        withChangeDetection\n                        \n                    \n                \n            \n            \n                \nwithChangeDetection(fn: () => void)\n                \n            \n\n\n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TargetConnector.html":{"url":"classes/TargetConnector.html","title":"class - TargetConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TargetConnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetConnector.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Connector\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hooks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                receiveHandlerId\n                            \n                            \n                                    Public\n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backend: Backend)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backend\n                                                  \n                                                        \n                                                                    Backend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DropTargetConnector\n\n                    \n                \n                \n                    \n                        Default value : {\n    dropTarget: this.dropTarget.hook,\n  }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    receiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                handlerId\n                                            \n                                                        Identifier | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    reconnect()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TargetConstructor.html":{"url":"interfaces/TargetConstructor.html","title":"interface - TargetConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TargetConstructor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n3.1.0 (2024-09-23)\nNote: Version bump only for package @ng-dnd/core\n3.0.0 (2024-04-25)\nNote: Version bump only for package @ng-dnd/core\n2.0.2 (2022-08-06)\nNote: Version bump only for package @ng-dnd/core\n2.0.1 (2022-05-03)\nBug Fixes\n\nfix reference types of triple-slash directives (#7) (2c0127e)\n\n2.0.0 (2022-05-03)\nBug Fixes\n\nbuild: fix tslib version (d5aa05b)\n\nFeatures\n\nadd eslint and remove tslint (f8fb0df)\n\n1.0.3 (2022-05-02)\nNote: Version bump only for package @ng-dnd/core\n1.0.2 (2022-05-02)\nNote: Version bump only for package @ng-dnd/core\n1.0.1 (2022-02-19)\nNote: Version bump only for package @ng-dnd/core\n1.0.0 (2021-08-14)\nNote: Version bump only for package @ng-dnd/core\n0.1.2 (2021-08-09)\nNote: Version bump only for package @ng-dnd/core\n0.1.1 (2021-08-07)\nNote: Version bump only for package @ng-dnd/core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            ConnectionBase\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DragLayer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DragSource\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DropTarget\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connector.ts\n            \n            injectable\n            DndService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connector.ts\n            \n            interface\n            AddSubscription\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/connectors.ts\n            \n            interface\n            DragPreviewOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/connectors.ts\n            \n            interface\n            DragSourceOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/dnd-directives.ts\n            \n            directive\n            DragPreviewDirective\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/dnd-directives.ts\n            \n            directive\n            DragSourceDirective\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/dnd-directives.ts\n            \n            directive\n            DropTargetDirective\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/dnd-module.ts\n            \n            interface\n            BackendInput\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/dnd-module.ts\n            \n            function\n            provideDnd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/drag-source-specification.ts\n            \n            interface\n            DragSourceSpec\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/drop-target-specification.ts\n            \n            interface\n            DropTargetSpec\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/internal/Reconnector.ts\n            \n            class\n            Reconnector\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            class\n            Connection\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            FactoryArgs\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            SourceConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            TargetConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            variable\n            SourceConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            variable\n            TargetConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            class\n            SourceConnector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            interface\n            Connector\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            function\n            createSourceConnector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceFactory.ts\n            \n            class\n            Source\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/internal/createSourceFactory.ts\n            \n            function\n            createSourceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            class\n            DragSourceMonitorClass\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            function\n            createSourceMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            variable\n            isCallingCanDrag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            variable\n            isCallingIsDragging\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetConnector.ts\n            \n            class\n            TargetConnector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/createTargetConnector.ts\n            \n            function\n            createTargetConnector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetFactory.ts\n            \n            class\n            Target\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/internal/createTargetFactory.ts\n            \n            function\n            createTargetFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            class\n            DropTargetMonitorClass\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            function\n            createTargetMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            variable\n            isCallingCanDrop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/drag-layer-connection.ts\n            \n            class\n            DragLayerConnectionClass\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/internal/invariant.ts\n            \n            function\n            invariant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/register-source.ts\n            \n            function\n            registerSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/register-target.ts\n            \n            function\n            registerTarget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/layer-monitor.ts\n            \n            interface\n            DragLayerMonitor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/monitor-base.ts\n            \n            interface\n            MonitorBase\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/source-monitor.ts\n            \n            interface\n            DragSourceMonitor\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/target-monitor.ts\n            \n            interface\n            DropTargetMonitor\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_DEBUG_MODE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_FACTORY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_GLOBAL_CONTEXT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_MANAGER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            TYPE_DYNAMIC\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/type-ish.ts\n            \n            interface\n            Offset\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/areCollectsEqual.ts\n            \n            function\n            areCollectsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/areOptionsEqual.ts\n            \n            function\n            areOptionsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/shallowEqual.ts\n            \n            function\n            shallowEqual\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            dnd-core : ^16.0.0\n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=17.0.0\n        \n            @angular/core : >=17.0.0\n        \n            rxjs : >=7.0.0\n        \n            zone.js : >=0.14.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            areCollectsEqual   (src/.../areCollectsEqual.ts)\n                        \n                        \n                            areOptionsEqual   (src/.../areOptionsEqual.ts)\n                        \n                        \n                            createSourceConnector   (src/.../createSourceConnector.ts)\n                        \n                        \n                            createSourceFactory   (src/.../createSourceFactory.ts)\n                        \n                        \n                            createSourceMonitor   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            createTargetConnector   (src/.../createTargetConnector.ts)\n                        \n                        \n                            createTargetFactory   (src/.../createTargetFactory.ts)\n                        \n                        \n                            createTargetMonitor   (src/.../createTargetMonitor.ts)\n                        \n                        \n                            invariant   (src/.../invariant.ts)\n                        \n                        \n                            provideDnd   (src/.../dnd-module.ts)\n                        \n                        \n                            registerSource   (src/.../register-source.ts)\n                        \n                        \n                            registerTarget   (src/.../register-target.ts)\n                        \n                        \n                            shallowEqual   (src/.../shallowEqual.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/areCollectsEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        areCollectsEqual\n                        \n                    \n                \n            \n            \n                \nareCollectsEqual(a: any, b: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                a\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                b\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/areOptionsEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        areOptionsEqual\n                        \n                    \n                \n            \n            \n                \nareOptionsEqual(nextOptions: any, currentOptions: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nextOptions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentOptions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createSourceConnector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceConnector\n                        \n                    \n                \n            \n            \n                \ncreateSourceConnector(backend: Backend)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backend\n                                            \n                                                        Backend\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createSourceFactory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceFactory\n                        \n                    \n                \n            \n            \n                \ncreateSourceFactory(spec: DragSourceSpec, zone: Zone)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                spec\n                                            \n                                                            DragSourceSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                zone\n                                            \n                                                        Zone\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createSourceMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceMonitor\n                        \n                    \n                \n            \n            \n                \ncreateSourceMonitor(manager: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                manager\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DragSourceMonitor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/internal/createTargetConnector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetConnector\n                        \n                    \n                \n            \n            \n                \ncreateTargetConnector(backend: Backend)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backend\n                                            \n                                                        Backend\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createTargetFactory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetFactory\n                        \n                    \n                \n            \n            \n                \ncreateTargetFactory(spec: DropTargetSpec, zone: Zone)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                spec\n                                            \n                                                            DropTargetSpec\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                zone\n                                            \n                                                        Zone\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/createTargetMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetMonitor\n                        \n                    \n                \n            \n            \n                \ncreateTargetMonitor(manager: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                manager\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DropTargetMonitor\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/internal/invariant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        invariant\n                        \n                    \n                \n            \n            \n                \ninvariant(assertion: boolean, msg: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assertion\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                msg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/dnd-module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        provideDnd\n                        \n                    \n                \n            \n            \n                \nprovideDnd(backendInput: BackendInput)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                backendInput\n                                            \n                                                            BackendInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Provider[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/internal/register-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerSource\n                        \n                    \n                \n            \n            \n                \nregisterSource(type: any, source: DragSource, manager: DragDropManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                            DragSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        DragDropManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/internal/register-target.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerTarget\n                        \n                    \n                \n            \n            \n                \nregisterTarget(type: any, target: DropTarget, manager: DragDropManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                target\n                                            \n                                                            DropTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        DragDropManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/utils/shallowEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        shallowEqual\n                        \n                    \n                \n            \n            \n                \nshallowEqual(objA: any, objB: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objA\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objB\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ng-dnd/core\n\n\n\nNg-DnD is a toolkit for building complex drag and drop interfaces in Angular. It is based on, and very similar to react-dnd by Dan Abramov and others, and is also powered by dnd-core. It is compatible with all backends.\nCheck out the examples here.\nInstallation\nExample :yarn add @ng-dnd/core react-dnd-html5-backendNext, follow the Quickstart and check out the Tutorial.\nSub-packages\n\n@ng-dnd/multi-backend\n@ng-dnd/sortable\n\nFeatures\n\nMake any component draggable, or into a drop target.\nDoesn't mutate the DOM, and doesn't use classes and CSS to do 'callbacks'.\nEvery visible change is made through Angular templates.\nThe truth lives in JavaScript, with unidirectional data flow (like\n@ngrx/store)\nObservable APIs, designed to fit in Angular.\nTypeScript friendly, with strong typing for in-flight objects, and inline\ndocumentation.\nWorks with HTML5 drag and drop, and all other react-dnd backends.\n\nGoals\n\nHigh performance. All code runs outside the Angular zone, and re-enters in batches only where strictly necessary, such that change detection runs precisely as many times as you need it to, with no extra configuration. You should also be able to take full advantage of OnPush change detection.\n\nLargely possible to translate react-dnd code and examples into Angular (see Translating React Code).\n\nComprehensive documentation and tons of example code, written in Angular style.\n\n\nWhat can you do with it?\nInstead of building maximally-ergonomic solutions to simple use cases, react-dnd and ng-dnd provide an abstraction over most things you could want to do with drag and drop. They are lower-level building blocks that make it easy to implement some very complex interactions. They assign no specific meaning to a drag/drop operation. You get to define what happens when a drag starts or ends or hovers. Here are some ambitious examples:\n\nThe traditional react-dnd tutorial, a chess board with movable pieces and rules\nDeleting items by dragging them to a 'trash can', like in the macOS dock.\nStamping out a template by dragging the template into a work area\nMerging two items by dragging one on top of the other\nHover over a 'folder' for a few seconds to 'drill down' into it\nThe famous lists and cards on trello.com, which actually uses react-dnd\nA diagramming tool where you can draw links between nodes\nA 2D CAD program\nA graphical query builder, or visual data pipeline like Luna\nMany other demonstrations of react-dnd (most with GIFs) in use\n\nAlternatives\nIt is important to note that for bare-bones sortable lists, where you have a mutable array of simple values, you don't necessarily need the superpowers in this library. There are plenty of cookie-cutter solutions out there, like the quite powerful ng2-dnd or ng2-dragula, which may get you to your deadline faster than learning and using ng-dnd. But be warned; you may find yourself wanting more dragging power once you get a taste. In fact, this package was born when @cormacrelf got sick of maintaining ng2-dragula and watching users struggle to implement what react-dnd was born for.\nIf Angular and React aren't your thing, there's also vue-react-dnd.\nIssues\nNot all issues are ng-dnd-related. If you think you found a bug in dnd-core or with the HTML5 backend, those issues belong on that codebase with their many contributors and wealth of experience. If there is a problem with another backend you are using, file an issue with that backend so you can get more specific help and so that the community can benefit.\nIssues and potential improvements to ng-dnd are discussed on GitHub.\nLicense\nThis library is released under the MIT license. It depends on dnd-core, which is (now) also under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DndModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    19 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.1.0\n        \n            Description : Drag and Drop for Angular\n        \n            Keywords : drag-and-drop, react-dnd, angular-dnd, ng-dnd, ngx-dnd\n        \n            License : MIT\n        \n            Repository : https://github.com/ng-dnd/ng-dnd\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DragSourceDecorator   (src/.../wrappers.ts)\n                        \n                        \n                            DragSourceFactory   (src/.../wrappers.ts)\n                        \n                        \n                            DropTargetDecorator   (src/.../wrappers.ts)\n                        \n                        \n                            DropTargetFactory   (src/.../wrappers.ts)\n                        \n                        \n                            TypeOrTypeArray   (src/.../type-ish.ts)\n                        \n                        \n                            Types   (src/.../wrappers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/wrappers.ts\n    \n    \n        \n            \n                \n                    \n                    DragSourceDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DragSourceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DropTargetDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DropTargetFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Types\n                \n            \n            \n                \n                        string | symbol | (string | symbol)[]\n\n                \n            \n        \n    \n    src/type-ish.ts\n    \n    \n        \n            \n                \n                    \n                    TypeOrTypeArray\n                \n            \n            \n                \n                    String, symbol, or an array of either. Used on drop targets.\n\n                \n            \n            \n                \n                        string | symbol | Array\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DRAG_DROP_BACKEND   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_DEBUG_MODE   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_FACTORY   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_OPTIONS   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_GLOBAL_CONTEXT   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_MANAGER   (src/.../tokens.ts)\n                        \n                        \n                            isCallingCanDrag   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            isCallingCanDrop   (src/.../createTargetMonitor.ts)\n                        \n                        \n                            isCallingIsDragging   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            SourceConnection   (src/.../connection-factory.ts)\n                        \n                        \n                            TargetConnection   (src/.../connection-factory.ts)\n                        \n                        \n                            TYPE_DYNAMIC   (src/.../tokens.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tokens.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core compatible backend')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_DEBUG_MODE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'should dnd-core run in debug mode?'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_FACTORY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'dnd-core compatible backend'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core BackendFactory used to instantiate dnd-core.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'options for dnd-core compatible backend'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend's options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_GLOBAL_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core context')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_MANAGER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core DragDropManager')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core DragDropManager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPE_DYNAMIC\n                        \n                    \n                \n            \n                \n                    \n                        Type :     symbol\n\n                    \n                \n                \n                    \n                        Default value : Symbol(\n  'no type specified, you must provide one with setType/setTypes'\n)\n                    \n                \n\n            \n                \n                    The type a source or target is given as a marker for 'you supplied null as a type',\nso that library consumers can be reminded to use setType/setTypes manually.\nSee DragSource.setType, DropTarget.setTypes.\n\n                \n            \n\n        \n    \n\n    src/internal/createSourceMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCallingCanDrag\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCallingIsDragging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n\n    src/internal/createTargetMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCallingCanDrop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n\n    src/internal/connection-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Connection as SourceConstructor\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TargetConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Connection as TargetConstructor\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/quickstart.html":{"url":"additional-documentation/quickstart.html","title":"additional-page - Quickstart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\nExample :yarn add @ng-dnd/core react-dnd-html5-backendYou might consider @ng-dnd/multi-backend instead of the HTML5\nbackend, because it allows adding touch support as well.\nThen import DndModule and provide the backend:\nExample :import { DndModule } from '@ng-dnd/core';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\n@NgModule({\n  imports: [\n    // Don't forget the forRoot()\n    DndModule.forRoot({ backend: HTML5Backend }),\n  ],\n})\nexport class AppModule {}If you need it again on a child module, like a lazy-loaded module, you only need\nto import DndModule there. That way the backend and global drag state is only\ninitialized once. But you may use forRootto inject a new instance or to\ninclude drag and drop on only some child modules.\nConcepts\nThese pieces make up the library:\n\nAn item (JS Object, not a DOM node) is the source of truth for each drag\noperation\nA drag source registers a DOM node to commence drag operations\nA drop target registers a DOM node for hover and drop events\nwhile dragging\nA way for each to provide, listen for and query changes in the drag state:\na monitor and appropriate callbacks\nHooks to provide some other DOM element as the drag preview.\n\nreact-dnd defined one more thing, inspired by HTML5, to make using this sane:\neach item has a type, and drag sources and drop targets will\nrespectively emit and accept only items with matching types.\nThat's it. This library offers all those concepts in an Angular-friendly way,\nthat is also largely compatible with a lot of react-dnd code and examples.\nNext steps\n\nHave a look at the Examples, and browse their source code in the\nexamples app on GitHub.\n\nRead and follow the Tutorial\n\nRead the 3-part guide in the sidebar. Any specifics are available by browsing the interfaces and\nclasses.\n\n\nTouch support and alternate backends\nMobile devices have not implemented HTML5 drag and drop. You will need:\n\nA different backend using click or touch events, without dropping desktop support\nA way to render drag previews. Where on desktops you\ncan let the browser render drag previews, when using a backend based on click\nor touch events, on mobile you have to render them yourself.\n\nA good way to solve both problems at once is using\n@ng-dnd/multi-backend. It is based on the original\ndnd-multi-backend, which was designed to seamlessly switch\nbetween an HTML5 and a touch backend when it noticed different\nkinds of interaction. The @ng-dnd version includes a preview component.\nNote also that you will need to use an exported function\nto provide the backend, to retain AOT compatibility, if it requires assembly.\nMultiBackend, for example, can be used like so:\nExample :export function createBackend() {\n    return MultiBackend(HTML5ToTouch);\n}\n@NgModule({\n  imports: [\n    DndModule.forRoot({ backendFactory: createBackend })\n  ]\n}\n// ...Troubleshooting\nI get TypeError: backend is null, only when AOT is enabled\nAlso rears its head as No such property 'default' of undefined.\nTroubleshooting steps\n\nCheck you are importing the backend and renaming any default exports.\nExample :import { HTML5Backend } from 'react-dnd-html5-backend';\nimport { SomeImaginaryBackendWithNamedExports } from 'some-imaginary-backend';Generally, make sure you are importing the backend correctly. If it does not\nprovide Typescript definitions, you might have to read the documentation or\nbrowse the source code.\n\nMake sure in your root Angular module (usually app.module.ts) you import\nDndModule.forRoot({ backend: MyBackend }) instead of plain DndModule.\n\n\nI get Error encountered resolving symbol values statically. Calling function 'default' with AOT enabled.\nMake sure you are following the special instructions for assembly-required backends\nlike MultiBackend or any backend that allows SomeBackend({ optionsHere: true }),\nlike TouchBackend. See above.\nIn the spec callbacks, my component doesn't have any properties, and it can't call this.method()!\nMake sure you use the arrow function syntax (() =>) in your specs so this will refer to your component. Example:\nExample :paperCount = 3;\nlimitedSupplyOfPaper = this.dnd.dragSource('PAPER', {\n  // use shorthand for one-liners that return a value\n  canDrag: () => this.paperCount > 0,\n  endDrag: monitor => {\n    if (monitor.didDrop()) {\n      this.paperCount--;\n    }\n  },\n});This demo shows comprehensively what this refers to\nin arrow functions vs regular ones. A sufficiently advanced editor shouldn't\nshow any completions at this.| in a regular function, as it will resolve the\ntype of this to be any.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide.html":{"url":"additional-documentation/guide.html","title":"additional-page - Guide","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen using @ng-dnd, you follow this general pattern:\n\nCreate a connection and specify its behaviour: Creating Connections\nUse directives or methods to connect it to real DOM elements:\nConnecting to DOM\nUse the connection's listen method to listen for relevant state changes, and respond to them:\nMonitoring State\nRemember to destroy the connection in ngOnDestroy(). Refer to part 1\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/1.-creating-connections.html":{"url":"additional-documentation/guide/1.-creating-connections.html","title":"additional-page - 1. Creating connections","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating connections\nThere are three types of connection.\n\nDragSource\nis for allowing components to be dragged. Create one with\nDndService#dragSource\nusing a\nDragSourceSpec\nand attach it to the DOM\nwith [dragSource]=\"...\".\n\nDropTarget\nis for allowing components to be dragged. Create one with\nDndService#dropTarget\nusing a\nDropTargetSpec\nand attach it to the DOM\nwith [dropTarget]=\"...\".\n\nDragLayer\nis an advanced feature that allows you to implement your own\ncustom drag previews. Create one with\nDndService#dragLayer,\nbut you don't attach them to the DOM, you simply listen for changes.\n\n\nAll three of them have the same lifecycle, and all three of them offer a\n.listen() function, which allows you to listen to changes. See\nConnectionBase for what they have in\ncommon.\nUsing the DndService to create connections\nFirst, inject\nDndService,\ninto your component.\nExample :constructor(private dnd: DndService) { ... }Then, use one of the methods\nDndService#dragSource,\nDndService#dropTarget\nto create one and store it as an instance variable, and make sure to tear down\nthe connection in ngOnDestroy.\nExample :source = this.dnd.dragSource(\"CAT\", {\n  beginDrag: (monitor) => ({ id: this.cat.id })\n  // ...\n});\n// or\ntarget = this.dnd.dropTarget([\"CAT\", \"ZEBRA\"], {\n  // ...\n});\nconstructor(private dnd: DndService) { ... }\n\nngOnDestroy() {\n  this.source.unsubscribe();\n  // or\n  this.target.unsubscribe();\n}Then, you will want to add some behaviour beyond the default by looking into the\nSpec input for your connection type.\nDestroying Connections\nAll three types of connection need to be destroyed when your component is\ndestroyed. If you don't, you will have strange problems.\nThe easy way is to call\n.unsubscribe() on the\nconnection object in ngOnDestroy.\nExample :ngOnDestroy() {\n    this.source.unsubscribe();\n    this.target.unsubscribe();\n    this.layer.unsubscribe();\n    // neat. we're done.\n}\nBut I have ten other subscriptions!\nIn situations where your component has a lot of subscription logic to\nmaintain, there are more powerful ways of unsubscribing to many things at once.\nYou can create an RxJS Subscription object in your component, and call\nSubscription.add(conn) with your connection. There is a convenience parameter\non each of the DndService methods which will do this for you.\nExample :import { Subscription } from 'rxjs';\n\n// ...\n\nsubs = new Subscription();\n\nsource = this.dnd.dragSource({\n  // ...\n}, this.subs);\n\ntarget = this.dnd.dragSource({\n  // ...\n}, this.subs);\n\n// ...\n\nngOnInit() {\n    // subscribe to lots of things here\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n}\nngOnDestroy() {\n  // This will unsubscribe everything, including source and target\n  this.subs.unsubscribe();\n}(It is not recommended to have a large number of drag sources and drop targets\nattached to a single component, especially not in a variably-sized array,\nsimply because that is poor component structure. Instead, consider creating a\ncomponent that handles a single piece of dragging logic, and use an *ngFor over\nthe whole component.)\nNext: Connecting to DOM.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/2.-connecting-to-dom.html":{"url":"additional-documentation/guide/2.-connecting-to-dom.html","title":"additional-page - 2. Connecting to DOM","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnecting sources and targets to real DOM elements\nOnce you have created a connection, it is most useful when connected to a real\nDOM element.\nMaking a DOM element draggable\nThis means that events fired inside the element's bounding rectangle will start\na drag. Use DragSourceDirective to do this. It's as simple as:\nExample :drag meExample :source = this.dnd.dragSource('DRAGME', {\n  beginDrag: () => ({ name: 'Jones McFly' }),\n  // other DragSourceSpec methods\n});\n// constructor, unsubscribe, etcThen, investigate using\nDragSourceSpec\nto customise the behaviour.\nMaking a DOM element into a drop target\nThis means your element will react to items being hovered or dropped within its\nbounding rectangle.\nExample :drop on meExample :target = this.dnd.dropTarget('DRAGME', {\n  drop: monitor => {\n    console.log('dropped an item:', monitor.getItem()); // => { name: 'Jones McFly' }\n  },\n});\n// constructor, unsubscribe, etcThen, investigate using\nDropTargetSpec\nto customise the behaviour.\nDrag previews\nThis is a feature unique to the HTML5 backend. If you are using another\nbackend, you will need a Drag Layer (see below) to render anything that follows\nthe mouse.\nBy default, a static screenshot of the original [dragSource] element will form\na drag preview and follow the mouse around.\nUsing a different element as the preview source\nIf you want another element to be the source of the preview, you can use the\n[dragPreview]=\"source\" directive.\nIf you place a DragPreviewDirective on a different element than the\n[dragSource], and pass the same DragSource connection to it, the\npreview element will take over the job of posing for the preview screenshot.\nUsing a 'drag handle'\nThis is a common use of custom drag previews, where a box with a smaller handle\nwithin it is only draggable from the handle. This is useful for moving\ninteractive blocks of UI (e.g.  elements) around the screen, without\ntouching the inputs / selecting text / making unwanted changes.\n\nAttach [dragSource]=\"source\" to the handle.\nAttach [dragPreview]=\"source\" to the overall box being dragged.\nAs always, you may consider applying CSS cursor: move or cursor: grab or\nsimilar to the handle, to make sure users can discover what the handle is\nfor.\n\nUsing an image preview\n\nCreate an image element with const img = new Image(); img.src = \"...\";\nUse img.onload = () => { ... } to wait for it to load. Inside the onload\ncallback, run someDragSourceConnection.connectDragPreview(img).\n\nSee DragSource.connectDragPreview and DragPreviewOptions for options.\nNext: Monitoring State.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/3.-monitoring-state.html":{"url":"additional-documentation/guide/3.-monitoring-state.html","title":"additional-page - 3. Monitoring State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonitoring State\nHow to change your template depending on the drag state\n\nTake any connection object, like DropTarget\nCall .listen() with a function that returns what information you want to\nmonitor\nSave the resulting Observable to an instance variable in your component\nUse the observable via the | async pipe to render alternate content in\nyour template.\n\nFor example:\nExample :\n  drop cats here\nExample :.cat-target {\n  background: #eee;\n}\n.cat-target--hovering {\n  background: lightgoldenrodyellow;\n}Example :target = this.dnd.dropTarget('CAT', {\n  drop: monitor => {\n    console.log('dropped a cat');\n  },\n});\n\n// this is a very useful combination on a drop target,\n// which expresses 'hovering over' + ('same type' + 'DropTargetSpec.canDrop returned true')\n// you almost always want to use the combination rather than isOver on its own\nhovering$ = this.target.listen(m => m.isOver() && m.canDrop());What can you listen to?\nEach type of connection gets a different set of information available on the\nmonitor. They are laid out in these interfaces:\n\nDragSourceMonitor\nDropTargetMonitor\nDragLayerMonitor\nAll three derive from MonitorBase\n\nOptimisation\nNote that all three monitors have very rapidly-changing information available on\nthem, such as the current viewport-mouse offset. The .listen() functions will\noptimise component updates for you. You don't want to:\n\nSubscribe to more properties than you need. This hinders performance.\nSubscribe to the entire monitor object. It will only fire once, and then\nnever again, because the monitor object itself is the same each time.\n\nThe implementation of listen() includes an implementation of RxJS'\ndistinctUntilChanged that also optimises for JS Objects with the same keys\nbut different values. The following two examples fire exactly as often:\nExample :isDraggingPlain$ = this.source.listen(m => m.isDragging());\nisDraggingObj$ = this.source.listen(m => ({ isDragging: m.isDragging() }));This is helpful if you have a lot of properties to listen to and wish to\nreduce the number of | async pipes in your code, or if you want to copy\nsome react-dnd code.\nMaking decisions in the Spec based on current drag state\nThe other place you get access to a monitor is in the callbacks in each Spec.\nMonitors carry some information only relevant and usable inside these callbacks.\nThose methods are documented in the monitor interfaces, and particularly useful\nmethods are highlighted in each of the Spec callbacks, such as\nDropTargetSpec.drop.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chess-tutorial.html":{"url":"additional-documentation/chess-tutorial.html","title":"additional-page - Chess Tutorial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChess Tutorial\nIn this tutorial, we're building a tiny chess game, with one knight on the\nboard. It's an Angular-specific translation of the original react-dnd\ntutorial. The discussion about how to break down this game into\ncomponents is worth reading the original for. We will carry on implementing the\nthree components:\n\nKnightComponent, responsible for rendering one knight piece\nSquareComponent, just one black or white square on the board\nBoardComponent, 64 squares.\n\nThis tutorial assumes you are familiar with the basics of Angular (version 2+).\nIt also assumes you have read the Quickstart guide, and have attached the\nDndModule and the HTML5 backend. Complete source code is available on\nGitHub, in four commits: one, two,\nthree, four, the last of which is the finished\nproduct. You can play with a live demo.\nBasic chess visuals\nWe'll build the KnightComponent first. It is very simple, just a span with a Unicode\nknight character in it.\nExample :import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-knight',\n  template: `♘`,\n  styles: [\n    `\n      span {\n        font-weight: 400;\n        font-size: 54px;\n        line-height: 70px;\n      }\n    `,\n  ],\n})\nexport class KnightComponent {}Add this component to your module's declarations section, and put\n somewhere on your page.\n\nNext, we will implement SquareComponent. It is responsible only for changing the colour\nof the background and foreground depending on a black input, and rendering\nwhatever was passed to it inside its tags. Make a SquareComponent, add it to\nyour module, and include the following very simple HTML template:\nExample :\n  \nIn the body of the component class, add an input for whether the square should\nbe black or not:\nExample :@Input() black: boolean;Then implement getStyle() by reading this property.\nExample :getStyle() {\n    return this.black\n        ? { backgroundColor: 'black', color: 'white' }\n        : { backgroundColor: 'white', color: 'black' }\n}Note that by attaching these styles directly via [ngStyle], they are not\naffected by Angular's view encapsulation, so color will apply to any child\ncomponents as well. You could achieve the same by using classes and CSS and\n::ng-deep or turning view encapsulation off, but [ngStyle] is good enough\nfor us.\nThen, we want SquareComponent to take up all the space available to it. This\nway, Square can be arbitrarily large, and we don't have to be concerned with how\nbig the whole board is going to be. Include the following in a styles block,\nor a linked CSS file.\nExample ::host,\ndiv {\n  display: block;\n  height: 100%;\n  width: 100%;\n  text-align: center;\n}At this point, you can render one square with a knight in it, like so:\nExample :\n  \n\nIf you're paying attention, you'll notice that height: 100% doesn't really\nmean anything as none of the parent divs have a height to be 100% of, but it\nwill make sense later when we put the Square in a div that has an absolute\nheight.\nThen, let's build the board. Start by building out a component that just renders\none square.\nExample :import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-board',\n  template: `\n    \n      \n        \n      \n    \n  `,\n})\nexport class BoardComponent {}Now, we need to render 64 of them. We will need an *ngFor, but Angular isn't\nvery good at for loops, so we have to make an array of 64 items.\nExample :\n  \n    \n  \nExample :// ...\nexport class BoardComponent {\n  sixtyFour = new Array(64).fill(0).map((_, i) => i);\n}\nThen, you just have a lot of black squares in a vertical list. Not very chess-y.\nTo make it an 8x8 grid, we are going to wrap them all in a , and use the cool new CSS feature, CSS Grid. Make sure you are\nusing a modern browser. Apply this style to the wrapping .board:\nExample :.board {\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  display: grid;\n  grid-template-columns: repeat(8, 12.5%);\n  grid-template-rows: repeat(8, 12.5%);\n}For brevity's sake you could just set .board to a fixed width and height\nof 560px. I added a ContainerComponent, just to specify that size, to keep\nthe board independent of where it will be placed. At this point, you will have\nan 8x8 board, but it still doesn't quite look like chess.\n\nMaking the chessboard pattern and placing one knight on the board\nWe're going to need a way to express coordinates on the board. Define a new\ninterface, to hold x and y coordinates.\nExample :export interface Coord {\n  x: number;\n  y: number;\n}Save it in a new file, coord.ts, and import it into your Board component file.\nThen, we need to convert [0..63] (the indices of the *ngFor) to Coord\nobjects.\nExample :export class Board {\n    // ...\n    xy(i): Coord {\n      return {\n          x: i % 8,\n          y: Math.floor(i / 8)\n      }\n    }\n}\nYou can then quite easily go from Coord to whether the square is black or not:\nExample :    // ...\n    isBlack({ x, y }: Coord) {\n        return (x + y) % 2 === 1;\n    }Then, pass the result to each SquareComponent, and render only one KnightComponent in the top\nleft:\nExample :\n  \n    \n  \nAnd look at that, we have a chess board with one knight.\n\nMaking the knight move around\n\nAt this point, your code should look like this commit. You can\nstart fresh from there if you want.\n\nWe can clearly represent the position of a knight in one Coord object. You\ncould store this on the BoardComponent itself:\nExample : Example :knightPosition: Coord = { x: 2, y: 5 };But we're going to want to read this elsewhere and drive the game logic from it,\nand we don't want all the game logic to be trapped inside the BoardComponent.\nSo, create a GameService, and represent the changing position of the knight\nwith an RxJS BehaviorSubject. This is an ultra-lightweight way of\nbuilding an @ngrx-style Store without any boilerplate. It allows us to\n'broadcast' updates to the knight's position to any interested components.\nLike any Subject, BehaviourSubject can be used as an Observable, and\ncomponents can subscribe to it with the | async pipe. But unlike a regular\nSubject, it can also have an initial value, and will replay the most recent\nvalue to any new subscribers. This is exactly what we want.\nExample :import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Coord } from './coord';\n\n@Injectable()\nexport class GameService {\n  knightPosition$ = new BehaviorSubject({ x: 2, y: 5 });\n\n  moveKnight(to: Coord) {\n    this.knightPosition$.next(to);\n  }\n}As you can see, this is a very simple service. Inject it into your\nBoardComponent, and let's put the Knight where the GameService\nsays it should go.\nExample :\nExample :knightPosition$ = this.game.knightPosition$;\nconstructor(private game: GameService) { }This works, but it's very hard to read. A better solution would be to put the\nentire *ngFor section in the scope of one subscription. You can do that\nwithout introducing a redundant , by using  and a fancy\ntrick: since knightPosition$|async is always truthy, you can put it in an\n*ngIf and give the result a name using the *ngIf=\"AAA as BBB\" syntax. Here's\nthe entire template:\nExample :\n  \n    \n      \n         \n      \n    \n  \nThe resulting template is much clearer.\nNow that we have a knightPosition$ and even a GameService.moveKnight()\nfunction, we can hook up a click event on each  to move the knight\naround the board. We're going to remove it later, so just throw it in the\nBoardComponent:\nExample :Example :handleSquareClick(pos: Coord) {\n  this.game.moveKnight(pos);\n}Click around, and your noble KnightComponent will follow, even though he is breaking\nthe rules. So, let's add the rules. Amend the GameService to include\na canMoveKnight function, based on the current position and a prospective\nposition. You can store the currentPosition by subscribing internally to\nknightPosition$ and writing out each new value into an instance variable.\nExample :import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Coord } from './coord';\n\n@Injectable()\nexport class GameService {\n  knightPosition$ = new BehaviorSubject({ x: 2, y: 5 });\n  currentPosition: Coord;\n\n  constructor() {\n    this.knightPosition$.subscribe(kp => {\n      this.currentPosition = kp;\n    });\n  }\n\n  moveKnight(to: Coord) {\n    this.knightPosition$.next(to);\n  }\n\n  canMoveKnight(to: Coord) {\n    const { x, y } = this.currentPosition;\n    const dx = to.x - x;\n    const dy = to.y - y;\n\n    return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n  }\n}Amend handleSquareClick to check the rules before executing the move:\nExample :handleSquareClick(pos: Coord) {\n  if (this.game.canMoveKnight(pos)) {\n    this.game.moveKnight(pos);\n  }\n}And voilà, your knight won't execute an illegal move. We will be replacing this\nclick handler in just a moment, but we have separated the game logic out, so we\ncan reuse those two functions.\nImplementing drag and drop\n\nAt this point, your code should be look like this commit.\n\nTake a moment to think about what we have to work with. We have:\n\nA KnightComponent which we want to be able to drag,\nMany SquareComponents on which he could be dropped,\nA way to express that state change (GameService.moveKnight),\nAnd a way to compute where we can drop him (GameService.canMoveKnight).\n\nOur strategy for implementing drag and drop is this:\n\nMake the knight draggable\nTurn all the squares into drop targets\nOnly allow drops into squares where canMoveKnight returns true\nOn each successful drop, call moveKnight, and Angular will re-render with\nthe new state.\nAdd some extra visuals to guide the interaction\n\nIf you have used other drag and drop libraries, this may seem a bit weird --\nwhat happens to the Knight that we're dragging after we drop him? The answer is,\nhe disappears. After step 1, we will have a knight you can pick up, but nothing\ninteresting will happen when we let go, except that the preview will vanish. We\nare going to do steps 3 and 4 on the drop targets, which are notified when you\ndrop something on them.\nPart 1. Make the knight draggable\nFirst, we need a type to describe what we're dragging, so that the squares can\nlisten for knights floating above them. Store a constant string \"KNIGHT\" in\na new file. This is better than typing the same string over and over, and serves\nas a single place where all your different chess piece types are defined.\nExample :// constants.ts\nexport const ItemTypes = {\n  KNIGHT: 'KNIGHT',\n};Then, make your KnightComponent into a drag source.\n\nInject DndService into your KnightComponent\nCreate a dead simple drag source which emits ItemTypes.KNIGHT, and a simple\n{} to represent what's being dragged. We don't need any more information\nthan that, but if you were doing >1 piece, you would have to specify which\nknight was being dragged. This is where you'd do it.\nAttach the drag source to the Knight's DOM element.\nIn ngOnDestroy, unsubscribe the drag source.\n\nHere's all four in one go:\nExample :import { Component } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\nimport { ItemTypes } from './constants';\n\n@Component({\n  selector: 'app-knight',\n                   // step 3\n  template: `♘`,\n  styles: [\n    `\n      span {\n        font-weight: 700;\n        font-size: 54px;\n      }\n    `,\n  ],\n})\nexport class KnightComponent {\n  // step 2\n  knightSource = this.dnd.dragSource(ItemTypes.KNIGHT, {\n    beginDrag: () => ({}),\n  });\n\n  // step 1\n  constructor(private dnd: DndService) {}\n\n  // step 4\n  ngOnDestroy() {\n    this.knightSource.unsubscribe();\n  }\n}Try dragging your little knight, and you'll find that you can. But the\ninteraction is slightly confusing - you can't tell at a glance that the knight\nis conceptually in-flight, it just looks like there are two knights. So let's\nlisten to whether we are dragging the knight, and make the stationary one look\ndifferent while we are.\n\nUse the DragSource.listen and DragSourceMonitor.isDragging methods to\nget an observable isDragging$ on your KnightComponent.\nUse that observable in your template to change styles\n\nExample :// component\n// (this is an Observable)\nisDragging$ = this.knightSource.listen(monitor => monitor.isDragging());Example :\n♘Example :/* in the style block */\n.dragging {\n  opacity: 0.25;\n}Now, the knight on the board will be a bit transparent when you've picked it up.\nYou could set it to opacity: 0, but in chess, players like to know where the\npiece came from. @ng-dnd makes no assumptions about how to render\nany elements, so you can always customise their appearance at any stage of the\ndrag and drop process.\nPart 2: Make the squares into drop targets\nBecause canMoveKnight has to be computed once per square, each square is going\nto have to know where it is on the board. However, the SquareComponent is\nperfectly good at what it does. We don't want to ruin a good thing. Let's wrap\nit with another component, BoardSquareComponent, that will handle the drag and drop,\nand leave the black and white rendering to SquareComponent. This is a basic wrapper\nwhich preserves the size of the underlying squares:\nExample :import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-board-square',\n  template: `\n    \n      \n        \n      \n    \n  `,\n  styles: [\n    `\n      :host,\n      .wrapper {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class BoardSquareComponent {\n  @Input() position: Coord;\n  get black() {\n    const { x, y } = this.position;\n    return (x + y) % 2 === 1;\n  }\n}Add it to your module, and replace the  in the BoardComponent\ntemplate with this:\nExample :\n  \nThen, we're going to add a drop target to BoardSquareComponent and attach it\nto that wrapper div. It's very similar to the drag source.\n\nInject DndService\nCreate a drop target\nAttach it to the DOM\nUnsubscribe it in ngOnDestroy.\n\nExample :import { Component, Input } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\nimport { ItemTypes } from './constants';\n\n@Component({\n  selector: 'app-board-square',\n  template: `\n                         \n    \n      \n        \n      \n    \n  `,\n  styles: [\n    `\n      :host,\n      .wrapper {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class BoardSquareComponent {\n  @Input() position: Coord;\n  get black() {\n    const { x, y } = this.position;\n    return (x + y) % 2 === 1;\n  }\n\n  // step 2\n  target = this.dnd.dropTarget(ItemTypes.KNIGHT, {});\n\n  // step 1\n  constructor(private dnd: DndService) {}\n\n  // step 4\n  ngOnDestroy() {\n    this.target.unsubscribe();\n  }\n}Parts 3 and 4: make the knight move around on drop\nNext up is to incorporate the game logic, and to actually move the knight. We're\ngoing to use two hooks in the drop target: DropTargetSpec.canDrop and\nDropTargetSpec.drop. We have already done the heavy lifting for both in\nGameService. Inject GameService in the constructor, and incorporate its\nmethods.\nExample :target = this.dnd.dropTarget(ItemTypes.KNIGHT, {\n    canDrop: monitor => {\n        return this.game.canMoveKnight(this.position);\n    },\n    drop: monitor => {\n        this.game.moveKnight(this.position);\n    }\n});\n\nconstructor(private dnd: DndService, private gme: GameService) {}Now you should be able to drag your knight around the board!\nPart 5: Extra visuals\nWe have some guidance already about where you can drop a knight. The mouse\ncursor gets a different icon depending on whether you can or not. But usually,\nthis is not enough of an indicator. Good UI means making difficult things\nobvious and learnable. Someone who has never seen a knight should be able to\nfigure out where one can go.\nIn that spirit, we will change the colour of the squares while dragging,\ndepending on whether they represent a valid move, and colour the square you're\nhovering over either red or green depending on whether dropping would result in\na move.\nThe procedure is almost identical to what we did for the Knight earlier on.\n\nUse the DropTarget.listen, DropTargetMonitor.canDrop and\nDropTargetMonitor.isOver methods to observe changes in drag state\nUse observables in your template to change styles on an overlay div.\n\nExample :// We are assuming RxJS 5.5+ here, but you can use plain Observable.map\nimport { map } from 'rxjs/operators';\n\n// template:Example :\n  \n    \n  \n  \nExample :export class BoardSquareComponent {\n  // ...\n  target = this.dnd.dropTarget(ItemTypes.KNIGHT, {\n    // ...\n  });\n\n  collected$ = this.target.listen(m => ({\n    canDrop: m.canDrop(),\n    isOver: m.isOver(),\n  }));\n\n  showOverlay$ = this.collected$.pipe(map(c => c.isOver || c.canDrop));\n\n  overlayStyle$ = this.collected$.pipe(\n    map(coll => {\n      let { canDrop, isOver } = coll;\n      let bg: string = 'rgba(0,0,0,0)';\n      if (canDrop && isOver) {\n        bg = 'green';\n      } else if (canDrop && !isOver) {\n        bg = 'yellow';\n      } else if (!canDrop && isOver) {\n        bg = 'red';\n      }\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: bg,\n      };\n    })\n  );\n\n  // ...\n}Here's what it looks like:\n\nLastly, we're going to customize the drag preview (that little knight that\nfollows the mouse around). @ng-dnd has some very powerful ways to\ncustomize this, but we're going to use a simple image. It's quite simple:\n\nCreate an Image\nWait for it to load\nConnect it to the knightSource as a drag preview\n\nWe can do this in just a few lines.\nExample :// ...\nexport class KnightComponent {\n  // ...\n\n  ngOnInit() {\n    const img = new Image();\n    img.src = // ... long 'data:image/png;base64' url\n      // regular 'https://' URLs work here too\n      img.onload = () => this.knightSource.connectDragPreview(img);\n  }\n}For that long URL, see this file.\nThen we get a funky horse as our preview.\n\nHave a go with the live demo here.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/translating-react-code.html":{"url":"additional-documentation/translating-react-code.html","title":"additional-page - Translating React Code","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTranslating React Code\nThere are many code examples and libraries on the web written for react-dnd,\nthe most important of which is the actual react-dnd\ndocumentation. In the\ninterest of making them useful or at least understandable, this library presents\na fairly similar API to the original. There are, of course, some differences\nmandated by the style and limitations of React and Angular. We will illustrate\nthis with the react-dnd DragSource compared to @ng-dnd's\nDndService.dragSource(). Here are the original API\ndocs on\nDragSource; the following is a small but complete example for a quick\nreference. If you know how to use react-dnd already, then this should show you\nmost of it. If you don't know react-dnd, this will help you read the example code demos in the react-dnd documentation.\nHere's a basic example in React:\nExample :let itemSourceSpec = {\n  beginDrag: (props, monitor) => {\n    return { someProperty: props.someProperty };\n  },\n  endDrag: (props, monitor, component) => {\n    if (monitor.didDrop()) {\n      component.fireAction(monitor.getItem());\n    }\n  },\n};\n@DragSource('ITEM', itemSourceSpec, (connect, monitor) => ({\n  connectDragSource: connect.connectDragSource(),\n  isDragging: monitor.isDragging(),\n}))\nexport class MyComponent extends React.Component {\n  fireAction() {\n    /* ... */\n  }\n  render() {\n    const { someProperty, isDragging } = this.props;\n    return connectDragSource(\n      \n        {someProperty}\n        {isDragging ? 'I am being dragged now' : null}\n      \n    );\n  }\n}And here's the Angular translation:\nExample :@Component({\n  template: `\n    \n      {{ someProperty }}\n       I am being dragged now \n    \n  `,\n})\nexport class MyComponent {\n  @Input() someProperty: string;\n  itemSource = dnd.dragSource('ITEM', {\n    beginDrag: monitor => {\n      return { someProperty: this.someProperty };\n    },\n    endDrag: monitor => {\n      if (monitor.didDrop()) {\n        this.fireAction(monitor.getItem());\n      }\n    },\n  });\n  collected$ = this.itemSource.listen(monitor => ({\n    isDragging: monitor.isDragging(),\n  }));\n  constructor(private dnd: DndService) {}\n  fireAction(item) {\n    /* ... */\n  }\n  ngOnDestroy() {\n    this.itemSource.destroy();\n  }\n}As you can see, the two are very similar. You should be able to take most\nReact/react-dnd examples and translate them quite directly into Angular. You\ncan almost copy and paste some parts.\n1. Biggest difference: Connections instead of Higher-Order Components\nThere is a React concept of 'props', similar to Input() in Angular. The\nprimary difference relevant to us is that in React you can create a 'wrapper' or\n'higher-order' component that will pass all of its props to the one it is\n'wrapping' or 'decorating', with extra behaviour or new props added. This is how\nreact-dnd works: wrap your component with @DragSource(type, spec, collect: (connect, monitor) => Object), and the output of the collect function is\ninjected into your component's props.\nIn Angular, we run everything inside your component, using methods on an\ninjected DndService to create connections. Connections are a go-between\nfor subscribing to the global drag state and can be connected to DOM\nelements. This difference is typical of the React Way and the Angular Way. You\ncan create more than one connection for a component, to accomplish the same\nthing as composing multiple decorators in react-dnd.\nThere are five other ways this approach makes for slightly different-looking but\nvery similar-functioning code.\n2. You must destroy the connection object when you are done with it.\nIn React, this is managed by the wrapper component. In Angular, you have to do\nit yourself. See ConnectionBase.unsubscribe.\n3. No props or component arguments in the spec callbacks\nThere are no props in Angular, as discussed above. Instead, all inputs to a component\nor properties relevant to the template are declared on the component class.\nTherefore, using this is appropriate instead. That also makes component\nmoot, since it would also refer to this. Therefore, all of the callbacks on the\ntwo *Spec interfaces have only monitor as an argument.\nOne thing to be aware of is that to access this in an function you pass\nelsewhere, you must use Arrow notation: (arrow) => this.notation; for your\nspec callbacks.\n4. Information about current drag state comes through an Observable\nIn react-dnd the collect((props, monitor) => {}) function supplies the\ncomponent props 'from above'. In Angular (here, DragSource.listen), the\nlibrary gives you an Observable you can subscribe to in your template. The\nexample above creates an Object { ... } and subscribes to it all in one go\n(the internals make this efficient), but you are free to do listen(m => m.isDragging()), with one subscription for each interesting value. You might\ncombine information from two different connections using\nObservable.combineLatest, for example.\nI found the terms connect and collect far too similar and confusing, so\nI renamed collect to listen.\n5. connectDragSource() (etc.) functions vs Angular directives\nIn the example above, connect.connectDragSource() returns a function that will\nlink up a particular part of the JSX template's DOM to the wrapper component. To\naccomplish the same thing in Angular we must connect some DOM from the template\nto a Connection object. The Angular Way to do this is with a directive,\nwhich connects to the DOM via its injected ElementRef. The Angular translation\nabove uses [dragSource]=\"itemSource\" on the same part of the template as the\nReact code does.\nSome React examples will have two different drag sources + associated connectors\n(on different DOM elements), or one source and one connectDragPreview. Angular\ncan do both patterns with directives, because each directive is linked to one Connection.\n6. Can't supply a dynamic type via a (props) => props.type callback, use setType instead\nImagine you want to make a component draggable based on type(s) specified on the\ncomponent inputs.\nreact-dnd allows strings and ES6 Symbols in the type argument. But you can\nalso pass a function of (props) => string|symbol; in this way, your item\ntypes can depend on the inputs to your component, and even change over time when\nthe props change. It's not a plain asynchronous callback like the rest of the\nspec, it is called when the props change on the decorating component, before any\nasynchronous drag operations start. Angular doesn't have a way for arbitrary\nobjects to listen to ngOnChanges(), so we have to do it manually.\nYou can supply a default type, or null, and update it in later as the\n@Input() property is populated. If you supply null, @ng-dnd will\ndefer connecting the DOM and the subscription to the monitor until this is\ndone. See DragSource.setType for more information.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/testing.html":{"url":"additional-documentation/testing.html","title":"additional-page - Testing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTesting\nUsage with Jest\nSee The React DnD testing\nguide for details about\nhow to use dnd-core and react-dnd-test-backend with Jest. In particular, you\nwill need to configure the moduleNameMapper as described there.\nTesting Components in Isolation\nThe Angular way of supplying drag state to components is not as easily testable\nas the React way. Currently it is not easy to isolate a component's rendering\nfrom the drag sources, drop targets and drag layers it listens to.\nThe Test Backend\nReact DnD offers a test backend that does not require the DOM, and offers an\nAPI for easy simulation of drag and drop events. This is useful for testing an\nentire drag and drop interaction. (Imagine trying to construct the exact mouse\nevents that represent a drag, just to do basic tests!) It is also useful as a\nlightweight no-op backend if you do not need to test the drag and drop\ninteraction.\nInstall it with:\nExample :yarn add -D react-dnd-test-backendExample usage (example component defined below):\nExample :// Import the test backend\nimport { createTestBackend, TestBackend } from 'react-dnd-test-backend';\n// We will need to find the DragDropManager to access the backend through\n// dependency injection\nimport { DndModule, DRAG_DROP_MANAGER } from '@ng-dnd/core';\n\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\ndescribe(MyComponent.name, () => {\n  let component: MyComponent;\n  let fixture: ComponentFixture;\n\n  // Use this backend to drive drag and drop interactions\n  let backend: TestBackend;\n\n  // We will store the handler ID for each, to pass to the test backend.\n  let source: any;\n  let target: any;\n\n  // MyComponent should render differently while dragging\n  const draggingClassApplied = () => {\n    return fixture.debugElement.query(By.css('.dragging')) != null;\n  };\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // supply the test backend when creating the testing module\n        DndModule.forRoot({ backend: createTestBackend }),\n      ],\n      declarations: [MyComponent],\n    });\n  }));\n\n  beforeEach(() => {\n    // grab the manager\n    const manager = TestBed.get(DRAG_DROP_MANAGER);\n    // grab the backend off the manager\n    backend = manager.getBackend();\n    fixture = TestBed.createComponent(MyComponent);\n    component = fixture.componentInstance;\n    // the source and target handler IDs are available after change\n    // detection\n    fixture.detectChanges();\n    source = component.source.getHandlerId();\n    target = component.target.getHandlerId();\n  });\n\n  it('should drag and then drop', () => {\n    // pick up the drag source\n    backend.simulateBeginDrag([source]);\n\n    // check that it rendered differently\n    fixture.detectChanges();\n    expect(draggingClassApplied()).toBeTruthy();\n\n    // hover over the target\n    backend.simulateHover([target]);\n    // drop over the most recently hovered target(s)\n    backend.simulateDrop();\n    // complete the interaction\n    backend.simulateEndDrag();\n\n    fixture.detectChanges();\n    expect(draggingClassApplied()).toBeFalsy();\n  });\n});Example :import { Component } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\n@Component({\n  template: `\n    \n    \n  `,\n})\nclass MyComponent {\n  source = this.dnd.dragSource('TEST', {\n    beginDrag: () => ({}),\n  });\n  target = this.dnd.dropTarget('TEST', {});\n  isDragging$ = this.source.listen(m => m.isDragging());\n  constructor(private dnd: DndService) {}\n  ngOnDestroy() {\n    this.source.unsubscribe();\n    this.target.unsubscribe();\n  }\n}\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
